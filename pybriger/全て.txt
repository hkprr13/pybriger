└── [pybriger]
    ├── [Log]
    │   ├── Log.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import logging  # ログ
    │       #-------------------------------------------------------------------------------
    │       class Log:
    │           """
    │           ログクラス
    │           ログをログファイルに出力する
    │           """
    │           def __init__(
    │                   self,
    │                   fileName : str,
    │               ) -> None:
    │               """
    │               ログクラスの初期化
    │               Args:
    │                   fileName (str) : ファイル名(拡張子も)
    │               """
    │               self.__logging = logging
    │               self.__logging.basicConfig(
    │                   filename = fileName,
    │                   level    = self.__logging.INFO,
    │                   format   = "%(asctime)s - %(levelname)s - %(message)s",
    │                   encoding = "utf-8"
    │               )
    │           #---------------------------------------------------------------------------
    │           def debug(self, msg : str):
    │               """デバックメッセージ"""
    │               self.__logging.debug(msg)
    │           #---------------------------------------------------------------------------
    │           def info(self, msg : str):
    │               """インフォメッセージ"""
    │               self.__logging.info(msg)
    │           #---------------------------------------------------------------------------
    │           def warning(self, msg : str):
    │               """警告メッセージ"""
    │               self.__logging.warning(msg)
    │           #---------------------------------------------------------------------------
    │           def error(self, msg : str):
    │               """エラーメッセージ"""
    │               self.__logging.error(msg)
    │           #---------------------------------------------------------------------------
    │           def critical(self, msg : str):
    │               """致命的エラー"""
    │               self.__logging.critical(msg)
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Log import Log
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Log"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [Trigger]
    │   ├── Trigger.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common     import private   # プライベートメソッド
    │       from ..common     import public    # パブリックメソッド
    │       from ..config     import Config    # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Trigger:
    │           def  __init__(
    │                   self,
    │                   triggerName : str,
    │                   tableName   : str
    │               ) -> None:
    │               """
    │               テーブルにトリガーを作成する
    │               ※出力はしない
    │               Args:
    │                   triggerName (str) : トリガー名
    │                   tableName   (str) : テーブル名
    │               Examples:
    │                   trigger = Trigger(
    │                       triggerName = "triggerName",
    │                       tableName   = "tableName"
    │                   )
    │               """
    │               self.__triggerName = triggerName
    │               self.__tableName   = tableName
    │           #---------------------------------------------------------------------------
    │           @property
    │           @private
    │           def __sqlEngine(self):
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @public
    │           def create(
    │                   self,
    │                   timing : str,
    │                   event  : str,
    │                   body   : str
    │               ):
    │               """
    │               トリガーの作成
    │               Args:
    │                   timing (str) : タイミング BEFORE AFTER
    │                   event  (str) : イベント  INSERT UPDATE DELETE
    │                   body   (str) : 実行するSQL文
    │               Examples:
    │                   trigger = Trigger("triggerName", "tableName")
    │                   trigger.create("before | after", "inser | update | delete", "SQL文")
    │               """
    │               query = f"CREATE {self.__triggerName} " # 末尾にスペース
    │               if timing == "before":
    │                   query += "BEFORE " # 末尾にスペース
    │               elif timing == "after":
    │                   query += "AFTER "  # 末尾にスペース
    │               else:
    │                   raise Exception(f"使えない引数:{timing} を指定しています。")
    │               if event == "insert":
    │                   query += "INSERT " # 末尾にスペース
    │               elif event == "update":
    │                   query += "UPDATE " # 末尾にスペース
    │               elif event == "delete":
    │                   query += "DELETE " # 末尾にスペース
    │               else:
    │                   raise Exception(f"使えない引数:{event} を指定しています。")
    │               query += f"ON {self.__tableName} EACH ROW BIGIN {body} END;"
    │               self.__sqlEngine.execute(query)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def show(self):
    │               """
    │               トリガーの確認
    │               """
    │               self.__sqlEngine.execute("SHOW TRIGGERS;")
    │           #---------------------------------------------------------------------------
    │           def drop(self):
    │               """
    │               トリガーの削除
    │               """
    │               self.__sqlEngine.execute(
    │                   f"DROP TRIGGER IF EXISTS {self.__triggerName}"
    │               )
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Trigger import Trigger
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Trigger"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [View]
    │   ├── View.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import csv                         # csvライブラリのインポート
    │       from ..common     import private   # プライベートメソッド
    │       from ..common     import public    # パブリックメソッド
    │       from ..config     import Config    # コンフィグクラス
    │       from ..column     import Column    # カラムクラス
    │       from ..conditions import Condition # 条件クラス
    │       #-------------------------------------------------------------------------------
    │       class View:
    │           """
    │           ビュー操作クラス
    │           Attributes:
    │               __viewName   (str)                         : ビュー名
    │               __conditions (Condition)                   : 条件式オブジェクト
    │               __columns    (Column)                      : カラムオブジェクト
    │               __sqlEngine  (Sqlite3Engine | MySqlEngine) : エンジンオブジェクト
    │           """
    │           #---------------------------------------------------------------------------
    │           def __init__(
    │                   self,
    │                   viewName   : str,
    │                   conditions : Condition,
    │                   *columns   : Column
    │               ) -> None:
    │               """
    │               ビューの操作をする
    │               Args:
    │                   viewName   (str)       : ビュー名
    │                   conditions (Condition) : 条件式 例: User.age >= 20
    │                   *columns   (Column)    : カラム
    │               Examples:
    │                   view = View("viewName", User.age >= 20, User.id, User.name)
    │               """
    │               self.__viewName   = viewName
    │               self.__conditions = conditions
    │               self.__columns    = columns
    │           #---------------------------------------------------------------------------
    │           @property
    │           @private
    │           def __sqlEngine(self):
    │               """
    │               sqlエンジンの設定
    │               """
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @ private
    │           def __bulidSelectQuery(self) -> str:
    │               # クエリ
    │               query = "SELECT " # 末尾にスペース
    │               # テーブル名
    │               tableName = ""
    │               # カラム名を取得する
    │               for col in self.__columns:
    │                   tableName = col.tableName
    │                   query += f"{col.columnName}, " # 末尾にスペース
    │               else:
    │                   # 末尾とカンマを消す
    │                   query = query[:-2]
    │                   # 成形する
    │                   query += f" FROM {tableName} WHERE {self.__conditions}"
    │               # SELECT id, name FROM User WHERE age >= 10 の形式で返す
    │               return query
    │           #---------------------------------------------------------------------------
    │           @public
    │           def create(
    │                   self,
    │                   replace             : bool = False,
    │                   checkOption         : bool = False,
    │                   localCheckOpetion   : bool = False,
    │                   cascadedCheckOption : bool = False,
    │                   securityDefiner     : bool = False,
    │                   readOnly            : bool = False
    │               ):
    │               """
    │                   データベースにビューを作成する
    │                   ※出力はしない
    │                   Args:
    │                       replace             (bool) : 既存のビューを置き換える
    │                       checkOption         (bool) : ビューを通した更新を制限
    │                       localCheckOpetion   (bool) : ネストビューで自分自身の条件のみを強制
    │                       cascadedCheckOption (bool) : ネストビューすべての条件を強制
    │                       securityDefiner     (bool) : ビューを作成したユーザ権限で実行
    │                       readOnly            (bool) : ビューから書き込み操作を禁止
    │                   Examples:
    │                       view = View("viewName", User.age >= 10, User.id, User.name)
    │                       view.create(replece = True, checkOption = True)
    │               """
    │               # クエリ
    │               query     = f"CREATE " # 末尾にスペース
    │               # セレクト句
    │               selectSql = self.__bulidSelectQuery()
    │               # リプレイスビューが有効なら
    │               if replace == True:
    │                   query += "OR REPLACE " # 末尾にスペース
    │               # CREATE VIEW viewName AS SELECT id, name FROM User WHWRE age >= 10
    │               query += f"VIEW {self.__viewName} AS {selectSql} " # 末尾にスペース
    │               # オプション句の構築
    │               withClaises = []
    │               # チェックオプションが有効なら
    │               if checkOption:
    │                   withClaises.append("CHECK OPTION")
    │               # ローカルチェックオプションが有効なら
    │               if localCheckOpetion:
    │                   withClaises.append("LOCAL CHECK OPTION")
    │               # カスケードチェックオプションが有効なら
    │               if cascadedCheckOption:
    │                   withClaises.append("CASCADED CHECK OPTION")
    │               # セキュリティーデフェンダーが有効なら
    │               if securityDefiner:
    │                   withClaises.append("SECURITY DEFINER")
    │               # 読み取り専用が有効なら
    │               if readOnly:
    │                   withClaises.append("READ ONLY")
    │               # オプション句リストが空ではなければ
    │               if withClaises:
    │                   query += f"WITH {' '.join(withClaises)}"
    │                   query += ";"
    │               else:
    │                   query = query[:-1] + ";" # 末尾にスペースを削除する
    │               self.__sqlEngine.execute(query = query)
    │               self.__sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def show(self) -> list:
    │               """
    │               ビューの表示
    │               Returns:
    │                   ビューのイテレーターを返す
    │               """
    │               # クエリ
    │               query = f"SELECT * FROM {self.__viewName};"
    │               cur = self.__sqlEngine.cursor()
    │               cur.execute(query)
    │               # リストで返す
    │               return cur.fetchall()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def drop(self):
    │               """
    │               ビューの削除
    │               """
    │               # クエリ
    │               query = f"DROP VIEW IF EXISTS {self.__viewName};"
    │               self.__sqlEngine.execute(query = query)
    │               self.__sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def makeCSV(
    │                   self,
    │                   filePath      : str,
    │                   includeHeader : bool = True,
    │                   encoding      : str = "utf-8"
    │               ):
    │               """
    │               ビュー内容をCSVファイルとして出力する
    │               Args:
    │                   filePath      (str)  : 出力先のCSVファイルパス(.csv不要)
    │                   includeHeader (bool) : ヘッダー行(カラム名)を含んで出力するか
    │                   ncoding       (str)  : 出力ファイルの文字コード
    │               Raises:
    │                   Exception : エンジンが未設定またはクエリ失敗時
    │               """
    │               # カーソルの設定
    │               cur = self.__sqlEngine.cursor()
    │               cur.execute(f"SELECT * FROM {self.__viewName};") # ビュー名で指定
    │               # 出力に失敗時に戻り値を返す
    │               if cur.description is None:
    │                   print("出力に失敗しました")
    │                   return
    │               # カラム名の取得
    │               columnNames = [description[0] for description in cur.description]
    │               # データ行の取得
    │               rows = cur.fetchall()
    │               # ファイルに書き込み
    │               try:
    │                   with open(
    │                       file    = f"{filePath}.csv", mode     = "w",
    │                       newline = "",                encoding = encoding
    │                   ) as f:
    │                       writer = csv.writer(f)
    │                       # ヘッダー行フラグが真なら
    │                       if includeHeader:
    │                           writer.writerow(columnNames) # ヘッダー行あり
    │                       writer.writerows(rows)           # データ行
    │                   print("出力に成功しました")
    │               except Exception as e:
    │                   print(e)
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .View import View
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "View"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [aggregate]
    │   ├── Aggregate.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from abc import ABC     # 基底クラス
    │       #-------------------------------------------------------------------------------
    │       class Aggregate(ABC): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Avg.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Aggregate import Aggregate
    │       #-------------------------------------------------------------------------------
    │       class Avg(Aggregate): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Count.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Aggregate import Aggregate
    │       #-------------------------------------------------------------------------------
    │       class Count(Aggregate): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Max.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Aggregate import Aggregate
    │       #-------------------------------------------------------------------------------
    │       class Max(Aggregate): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Min.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Aggregate import Aggregate
    │       #-------------------------------------------------------------------------------
    │       class Min(Aggregate): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Sum.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Aggregate import Aggregate
    │       #-------------------------------------------------------------------------------
    │       class Sum(Aggregate): ...
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Avg   import Avg
    │       from .Count import Count
    │       from .Max   import Max
    │       from .Min   import Min
    │       from .Sum   import Sum
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Avg",
    │           "Count",
    │           "Max",
    │           "Min",
    │           "Sum"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [column]
    │   ├── Column.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..datatypes.DataType import DataType       # データ型　<-インポートエラー回避
    │       from ..constraints        import AutoIncrement  # 自動採番
    │       from ..constraints        import PrimaryKey     # 主キークラス
    │       from ..constraints        import Default        # デフォルト値クラス
    │       from ..constraints        import NotNull        # NotNullクラス
    │       from ..constraints        import Unique         # ユニーク設定クラス
    │       from ..constraints        import ForeignKey     # 外部キー制約クラス
    │       from ..common             import public         # パブリックメソッド
    │       from ..common             import private        # プライベートメソッド
    │       from ..conditions         import Condition      # 条件クラス
    │       from ..conditions         import ConditionGroup # 条件クラス
    │       #-------------------------------------------------------------------------------
    │       class Column:
    │           """
    │           SQLのカラムを表現するためのクラス
    │           データ型、制約（主キー、NOT NULL、デフォルト値、ユニーク、外部キー）を定義し
    │           テーブル作成用のSQL構築やクエリビルダーでの利用を目的とする
    │           Attributes:
    │               columnName   (str)         : カラム名（Modelクラス側で自動設定）
    │               tableName    (str)         : テーブル名（Modelクラス側で自動設定）
    │               dataType     (DataType)    : カラムのデータ型
    │               dataTypeSql  (str)         : SQL用のデータ型文字列
    │               primaryKeySql(str)         : PRIMARY KEY 制約のSQL文字列
    │               defaultSql   (str)         : DEFAULT 制約のSQL文字列
    │               notNullSql   (str)         : NOT NULL 制約のSQL文字列
    │               uniqueSql    (str)         : UNIQUE 制約のSQL文字列
    │               foreignKeySql(str)         : FOREIGN KEY 制約のSQL文字列
    │           """
    │           #---------------------------------------------------------------------------
    │       
    │           #---------------------------------------------------------------------------
    │           def __init__(
    │               self,
    │               dataType        : DataType,
    │               isPrimaryKey    : bool              = False,
    │               isAutoIncrement : bool              = False,
    │               default         : Default    | None = None,
    │               notNull         : NotNull    | None = None,
    │               unique          : Unique     | None = None,
    │               foreignKey      : ForeignKey | None = None
    │           ):
    │               """
    │               カラム情報を初期化する
    │               Args:
    │                   dataType        (DataType)           : カラムのデータ型
    │                   isPrimaryKey    (bool)               : 主キー
    │                   isAutoIncrement (bool)               : 自動採番
    │                   default         (Default | None)     : デフォルト値
    │                   notNull         (NotNull | None)     : NOT NULL制約
    │                   unique          (Unique | None)      : UNIQUE制約
    │                   foreignKey      (ForeignKey | None)  : 外部キー制約
    │               Raises:
    │                   ValueError : dataTypeがNoneの場合
    │               """
    │               # インスタンス属性の付与
    │               self.dataType   = dataType
    │               self.default    = default
    │               self.notNull    = notNull
    │               self.unique     = unique
    │               self.foreignKey = foreignKey
    │               # SQLの設定
    │               self.__setDataTypeSql(dataType)
    │               self.__setPrimaryKeySql(isPrimaryKey)
    │               self.__setAutoIncrement(isAutoIncrement)
    │               self.__setDefaultSql(default)
    │               self.__setNotNullSql(notNull)
    │               self.__setUniqueSql(unique)
    │               self.__setForeignKeySql(foreignKey)
    │               # カラム名とテーブル名
    │               self.columnName : str
    │               self.tableName  : str
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setDataTypeSql(self, dataType: DataType | None) -> None:
    │               """
    │               データ型に応じたSQL文字列を設定する
    │               Args:
    │                   dataType (DataType | None): データ型オブジェクト
    │               Raises:
    │                   ValueError : Noneが渡された場合
    │               """
    │               if dataType is not None:
    │                   self.dataTypeSql = dataType.toSql()
    │               else:
    │                   raise ValueError("データ型が指定されていません")
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setPrimaryKeySql(self, isPrimaryKey : bool) -> None:
    │               """
    │               PRIMARY KEY 制約をSQL文字列として設定する
    │               Args:
    │                   isPrimaryKey (bool): 主キーにするかどうか
    │               """
    │               if isPrimaryKey:
    │                   self.primaryKeySql = PrimaryKey().toSql()
    │               else:
    │                   self.primaryKeySql = ""
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setAutoIncrement(self, isAutoIncrement : bool ) -> None:
    │               """
    │               AUTO INCREMENT 制約をSQL文字列として設定する
    │               Args:
    │                   isAutoIncrement (bool) : 自動採番するかどうか
    │               """
    │               if isAutoIncrement:
    │                   self.autoIncrementSql = AutoIncrement().toSql()
    │               else:
    │                   self.autoIncrementSql = ""
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setDefaultSql(self, default : Default | None) -> None:
    │               """
    │               DEFAULT 制約をSQL文字列として設定する
    │               Args:
    │                   default (Default | None): デフォルト値
    │               """
    │               self.defaultSql = default.toSql() if default else ""
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setNotNullSql(self, notNull : NotNull | None) -> None:
    │               """
    │               NOT NULL 制約をSQL文字列として設定する
    │               Args:
    │                   notNull (NotNull | None): NOT NULL 制約
    │               """
    │               self.notNullSql = notNull.toSql() if notNull else ""
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setUniqueSql(self, unique : Unique | None) -> None:
    │               """
    │               UNIQUE 制約をSQL文字列として設定する
    │               Args:
    │                   unique (Unique | None): UNIQUE 制約
    │               """
    │               self.uniqueSql = unique.toSql() if unique else ""
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __setForeignKeySql(self, foreignKey : ForeignKey | None) -> None:
    │               """
    │               FOREIGN KEY 制約をSQL文字列として設定する
    │               Args:
    │                   foreignKey (ForeignKey | None): 外部キー制約
    │               """
    │               self.foreignKeySql = foreignKey.toSql() if foreignKey else ""
    │           #---------------------------------------------------------------------------
    │           @public
    │           def like(self, value):
    │               """LIKE演算子"""
    │               return Condition(self.columnName, "LIKE", value)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def In (self, *values):
    │               """IN演算子"""
    │               return Condition(self.columnName, "IN", values)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def notIn (self, *values):
    │               """NOT IN演算子"""
    │               return Condition(self.columnName, "NOTIN", (values))
    │           #---------------------------------------------------------------------------
    │           @public
    │           def between(self, before, after):
    │               """BETWEEN演算子"""
    │               return Condition(self.columnName, "BETWEEN", (before, after))
    │           #---------------------------------------------------------------------------
    │           def __str__(self) -> str:
    │               return self.columnName
    │           #---------------------------------------------------------------------------
    │           def __eq__(self, value):
    │               """
    │               等価比較演算子 ==
    │               Returns:
    │                   Condition : (columnName, '=', value)
    │               """
    │               return Condition(self.columnName, "=", value)
    │           #---------------------------------------------------------------------------
    │           def __ne__(self, value):
    │               """
    │               不等比較演算子 !=
    │               """
    │               return Condition(self.columnName, "!=", value)
    │           #---------------------------------------------------------------------------
    │           def __lt__(self, value):
    │               """
    │               小なり演算子 <
    │               """
    │               return Condition(self.columnName, "<", value)
    │           #---------------------------------------------------------------------------
    │           def __le__(self, value):
    │               """
    │               以下演算子 <=
    │               """
    │               return Condition(self.columnName, "<=", value)
    │           #---------------------------------------------------------------------------
    │           def __gt__(self, value):
    │               """
    │               大なり演算子 >
    │               """
    │               return Condition(self.columnName, ">", value)
    │           #---------------------------------------------------------------------------
    │           def __ge__(self, value):
    │               """
    │               以上演算子 >=
    │               """
    │               return Condition(self.columnName, ">=", value)
    │           #---------------------------------------------------------------------------
    │           def __and__(self, value):
    │               """
    │               AND演算子 AND
    │               """
    │               return ConditionGroup(self.columnName, "AND", value)
    │           #---------------------------------------------------------------------------
    │           def __or__(self, value):
    │               """
    │               OR演算子 OR
    │               """
    │               return ConditionGroup(self.columnName, "OR", value)
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Column import Column
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Column"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [common]
    │   ├── Override.py
    │       ↓ 内容（最大10000行）
    │       from typing import override
    │   ├── Private.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import inspect              # 呼び出し履歴を調べるのに使用
    │       from functools import wraps # デコレーターで
    │                                   # 元の関数名やドキュメントを保持するために使用
    │       #-------------------------------------------------------------------------------
    │       def private(func):
    │           """
    │           privateであること明示的にするメソッド
    │           """
    │           @wraps(func)
    │           def wrapper(*args, **kwargs):
    │               # 呼び出し元のスタック情報を取得
    │               callerFrame    = inspect.stack()[1]
    │               # 呼び出し元のモジュールを取得
    │               # 呼び出したコードが属しているモジュール
    │               callModule     = inspect.getmodule(callerFrame[0])
    │               # この@privateメソッドが定義されているモジュール
    │               dediningModule = inspect.getmodule(func)
    │               # モジュールが違う場合はエラー
    │               if not callModule == dediningModule:
    │                   raise PermissionError(
    │                       f"'{func.__name__}'はプライベートです"
    │                   )
    │               else:
    │                   return func(*args, **kwargs)
    │           return wrapper
    │       #-------------------------------------------------------------------------------
    │   ├── Public.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import inspect              # 呼び出し履歴を調べるのに使用
    │       from functools import wraps # デコレーターで
    │                                   # 元の関数名やドキュメントを保持するために使用
    │       #-------------------------------------------------------------------------------
    │       def public(func):
    │           """
    │           publicであること明示的にするメソッド
    │           """
    │           @wraps(func)
    │           def wrapper(*args, **kwargs):
    │               # 関数を呼び出したモジュールの名前
    │               caller  = inspect.stack()[1].frame.f_globals.get("__name__")
    │               # 関数が定義されているモジュールの名前
    │               current = func.__globals__.get("__name__")
    │               if not caller == current:
    │                   pass
    │                   # print(f"外部モジュール内で{func.__name__}を呼び出し")
    │               else:
    │                   pass
    │                   # print(f"同一モジュール内で{func.__name__}を呼び出し")
    │               return func(*args, ** kwargs)
    │           # メタ情報としてpublicであること示す
    │           return wrapper
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Override import override
    │       from .Private  import private
    │       from .Public   import public
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "override",
    │           "private",
    │           "public"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [conditions]
    │   ├── Condition.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       class Condition:
    │           #---------------------------------------------------------------------------
    │           def __init__(self, left, operator = None, right = None):
    │               self.left     = left
    │               self.operator = operator
    │               self.right    = right
    │           #---------------------------------------------------------------------------
    │           def toSql(self, placeHolder = "?"):
    │               # leftがConditonオブジェクトなら,再帰的にtoSql()を呼び出す
    │               if isinstance(self.left, Condition):
    │                   # 複数条件をネストしてSQLに変換するため
    │                   leftSql, leftValues = self.left.toSql(placeHolder)
    │               # leftが単なる列名の場合文字列化してSQLとして扱う
    │               else:
    │                   leftSql    = str(self.left)
    │                   leftValues = []
    │       
    │               # NULL判定(IS NULL / IS NOT NULL)
    │               if  isinstance(self.right, str) and self.right.upper() == "NULL":
    │                   sql = f"{leftSql} {self.operator} NULL"
    │                   return sql, leftValues
    │       
    │               # IN/NOT IN条件の場合
    │               # rightがリストやタプルかどうか確認
    │               if  self.operator in ("IN", "NOT IN") \
    │               and isinstance(self.right, (list, tuple)):
    │                   if not self.right:
    │                       raise ValueError("IN句に空のリストは使えません")
    │                   # INの中身の値の個数に応じて, プレイスホルダーを並べる
    │                   placeHolders = ", ".join([placeHolder] * len(self.right))
    │                   sql = f"{leftSql} {self.operator} ({placeHolders})"
    │                   return sql, leftValues + list(self.right)
    │       
    │               # BETWEEN/NOT BETWEEN条件の場合
    │               # 値は(下限, 上限)である必要あり
    │               if self.operator == "BETWEEN" \
    │               and  isinstance(self.right, (tuple, list)) \
    │               and  len(self.right) == 2:
    │                   sql = f"{leftSql} {self.operator} {placeHolder} AND {placeHolder}"
    │                   return sql, [self.right[0], self.right[1]]
    │       
    │               # LIKE/NOT LIKE条件の場合
    │               if self.operator in ("LIKE", "NOT LIKE"):
    │                   sql = f"{leftSql} {self.operator} {placeHolder}"
    │                   return sql, leftValues + [self.right]
    │       
    │               # 論理式(AND/OR/NOT)
    │               # rightがconditionオブジェクトなら, 再帰的にtoSql()を呼び出す
    │               if isinstance(self.right, Condition):
    │                   rightSql, rightValues = self.right.toSql(placeHolder)
    │                   sql = f"{leftSql} {self.operator} {rightSql}"
    │                   return sql, leftValues + rightValues
    │       
    │               # 単独NOT
    │               if self.operator == "NOT" and isinstance(self.right,Condition):
    │                   rightSql, rightValues = self.right.toSql(placeHolder)
    │                   sql = f"(NOT {rightSql})"
    │                   return sql, rightValues
    │       
    │               # 通常の比較演算子(=, !=, >, ...)
    │               sql = f"({leftSql} {self.operator} {placeHolder})"
    │               return sql, \
    │                      leftValues + ([self.right] if self.right is not None else [])
    │           #---------------------------------------------------------------------------
    │           def __and__(self, other):
    │               return Condition(self, "AND", other)
    │           #---------------------------------------------------------------------------
    │           def __or__(self, other):
    │               return Condition(self, "OR", other)
    │       #-------------------------------------------------------------------------------
    │   ├── ConditionGroup.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Condition import Condition
    │       #-------------------------------------------------------------------------------
    │       class ConditionGroup(Condition):
    │           def __init__(
    │                   self,
    │                   left,
    │                   operator = None,
    │                   right    = None
    │               ):
    │               super().__init__(left, operator, right)
    │           #---------------------------------------------------------------------------
    │           def __str__(self):
    │               return super().__str__()
    │       #-------------------------------------------------------------------------------
    │   ├── Regexp.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Condition import Condition
    │       #-------------------------------------------------------------------------------
    │       class Regexp(Condition):
    │           def __init__(self, value : str) -> None:
    │               self.value = value
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Condition      import Condition
    │       from .ConditionGroup import ConditionGroup
    │       from .Regexp         import Regexp
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Condition",
    │           "ConditionGroup",
    │           "Regexp"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [config]
    │   ├── Config.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from __future__ import annotations # 循環インポートを回避する用
    │       from typing import TYPE_CHECKING
    │       #-------------------------------------------------------------------------------
    │       if TYPE_CHECKING:
    │           from ..engine import Sqlite3Engine      #
    │           from ..engine import AsyncSqlite3Engine #
    │           from ..engine import MySqlEngine        #
    │           from ..engine import AsyncMySqlEngine   #
    │       #-------------------------------------------------------------------------------
    │       class Config:
    │           sqlEngine      : Sqlite3Engine       | MySqlEngine      | None = None
    │           asyncSqlEngine : AsyncSqlite3Engine  | AsyncMySqlEngine | None = None
    │           database : str | None = None
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       from .Config import Config
    │       __all__ = [
    │           "Config"
    │       ]
    ├── [constraints]
    │   ├── AutoIncrement.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class AutoIncrement(Constraints):
    │           def __init__(self) -> None:
    │               ...
    │           @public
    │           def toSql(self) -> str:
    │               return "AUTOINCREMENT"
    │       #-------------------------------------------------------------------------------
    │   ├── Check.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class Check(Constraints): ...
    │       #-------------------------------------------------------------------------------
    │   ├── Constraints.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common import public
    │       #-------------------------------------------------------------------------------
    │       class Constraints:
    │           """制約"""
    │           def __init__(self) -> None: ...
    │           #---------------------------------------------------------------------------
    │           @public
    │           def toSql(self) -> str: ...
    │       #-------------------------------------------------------------------------------
    │   ├── Default.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class Default(Constraints):
    │           def __init__(self, value: str | int | float | bool | None):
    │               """
    │               デフォルト値の定義クラス
    │               Args:
    │                   value (str | int | float | bool | None): デフォルト値
    │               """
    │               self.setValue(value)
    │           #---------------------------------------------------------------------------
    │           @private
    │           def setValue(self, value: str | int | float | bool | None):
    │               """
    │               デフォルト値を設定（内部用）
    │               Raises:
    │                   TypeError: 非対応のデータ型の場合
    │               """
    │               if isinstance(value, (str, int, float, bool)) or value is None:
    │                   self.value = value
    │               else:
    │                   raise TypeError(
    │                       f"デフォルト値として使用できない型: {type(value).__name__}"
    │                   )
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getValue(self) -> str | int | float | bool | None:
    │               """
    │               デフォルト値を取得
    │               Returns:
    │                   str | int | float | bool | None: デフォルト値
    │               """
    │               return self.value
    │           #---------------------------------------------------------------------------
    │           @public
    │           def toSql(self) -> str:
    │               """
    │               SQL文の DEFAULT 句に変換
    │               Returns:
    │                   str: SQL形式のDEFAULT句（例: DEFAULT 1）
    │               """
    │               if self.value is None:
    │                   return ""
    │               elif isinstance(self.value, str):
    │                   return f"DEFAULT '{self.value}'"
    │               elif isinstance(self.value, bool):
    │                   return "DEFAULT TRUE" if self.value else "DEFAULT FALSE"
    │               else:
    │                   return f"DEFAULT {self.value}"
    │       #-------------------------------------------------------------------------------
    │       
    │       #-------------------------------------------------------------------------------
    │   ├── ForeignKey.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class ForeignKey(Constraints):
    │           """
    │           外部キー制約の定義クラス
    │           """
    │           def __init__(
    │                   self,
    │                   referenceName : str,
    │                   onUpdate      : bool | None = None,
    │                   onDelete      : bool | None = None
    │               ):
    │               """
    │               外部キー制約の定義クラス
    │               Args:
    │                   referenceName (str)  : "table.column" 形式の参照名
    │                   onUpdate      (bool | None) : ON UPDATE CASCADE の適用有無
    │                                                 Noneなら未明示
    │                   onDelete      (bool | None) : ON DELETE CASCADE の適用有無
    │                                                 Noneなら未明示
    │               """
    │               self.setReferenceName(referenceName)
    │               # カラムの変更があった場合,更新するかどうか
    │               self.onUpdate = onUpdate
    │               # カラムの変更があった場合,削除するかどうか
    │               self.onDelete = onDelete
    │           #---------------------------------------------------------------------------
    │           @private
    │           def setReferenceName(self, referenceName : str):
    │               # 文字列かどうか判断
    │               if not isinstance(referenceName, str):
    │                   raise TypeError("文字列である必要があります")
    │               else: pass
    │               strings : list = referenceName.split(".")
    │               # 指定された文字列を分離させる
    │               # User.user_id
    │               if  len(strings) == 2:
    │                   # 参照先のテーブル
    │                   self.referencedTable  = strings[0] # User
    │                   # 参照先のカラム
    │                   self.referencedColumn = strings[1] # user_id
    │               else:
    │                   raise ValueError(
    │                       f"入力された値 '{referenceName}' が間違っています"
    │                   )
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getReferencedTable(self) -> str:
    │               """
    │               参照先のテーブル名の取得
    │               Returns:
    │                   参照先のテーブル名
    │               """
    │               return self.referencedTable
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getReferencedColumn(self) -> str:
    │               """
    │               参照先のテーブルのカラムの取得
    │               Returns:
    │                   str : 参照先のテーブルのカラム
    │               """
    │               return self.referencedColumn
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getOnUpdate(self) -> bool | None:
    │               """
    │               更新時に連動するかを取得
    │               Returns:
    │                   bool : 更新するならTrue
    │                          しないならFalse
    │                          未明示ならNone
    │               """
    │               return self.onUpdate
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getOnDelete(self) -> bool  | None:
    │               """
    │               削除時に連動するかを取得
    │               Returns:
    │                   bool : 更新するならTrue
    │                          しないならFalse
    │                          未明示ならNone
    │               """
    │               return self.onDelete
    │           #---------------------------------------------------------------------------
    │           @public
    │           def toSql(self) -> str:
    │               """
    │               外部キー制約をSQL形式で返す
    │               Returns:
    │                   str : 外部キー制約のSQL文
    │               Notes:
    │                   FOREIGN KEY (~~~) ... で出力されるのでカラム名が決定したら
    │                   ~~~を入れ替える必要あり
    │               """
    │               # SQL
    │               sql = f"FOREIGN KEY (~~~) "\
    │                   + f"REFERENCES {self.referencedTable}({self.referencedColumn})"
    │               # 更新時に連動するなら
    │               if self.onUpdate is None:
    │                   pass # Noneならsqlに未明示
    │               elif self.onUpdate == True:
    │                   sql += " ON UPDATE CASCADE"
    │               else:
    │                   sql += " ON UPDATE NO ACTION"
    │               # 削除時に連動するなら
    │               if self.onDelete is None:
    │                   pass # Noneならsqlに未明示
    │               elif self.onDelete == True:
    │                   sql += " ON DELETE CASCADE"
    │               else:
    │                   sql += " ON DELETE NO ACTION"
    │               return sql
    │       #-------------------------------------------------------------------------------
    │   ├── NotNull.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class NotNull(Constraints):
    │           def __init__(
    │                   self,
    │                   enabled: bool | None = None
    │               ):
    │               """
    │               NOT NULL 制約を管理するクラス
    │               Args:
    │                   enabled (bool | None): TrueならNOT NULL有効
    │                                          Falseなら無効
    │                                          Noneなら未明示
    │               """
    │               self.setEnabled(enabled)
    │           #---------------------------------------------------------------------------
    │           @private
    │           def setEnabled(
    │                   self,
    │                   enabled: bool | None
    │               ) -> None:
    │               if enabled is not None \
    │               and not isinstance(enabled, bool):
    │                   raise TypeError("enabledはboolまたはNoneである必要があります")
    │               self.enabled = enabled
    │           #---------------------------------------------------------------------------
    │           @public
    │           def isEnabled(self) -> bool | None:
    │               """
    │               NOT NULLが有効かどうかを取得する
    │               Returns:
    │                   bool | None: 有効ならTrue
    │                                無効ならFalse
    │                                未明示ならNone
    │               """
    │               return self.enabled
    │           #---------------------------------------------------------------------------
    │           @public
    │           def toSql(self) -> str:
    │               """
    │               SQL形式のNOT NULL制約文字列を返す
    │               Returns:
    │                   str: NOT NULLまたは 空文字（未明示の場合）
    │               """
    │               if self.enabled is None:
    │                   return ""
    │               elif self.enabled:
    │                   return "NOT NULL"
    │               else:
    │                   return ""
    │       #-------------------------------------------------------------------------------
    │   ├── PrimaryKey.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class PrimaryKey(Constraints):
    │           """
    │           主キー制約クラス
    │           """
    │           def __init__(self):
    │               """
    │       
    │               """
    │           #---------------------------------------------------------------------------
    │           def toSql(self) -> str:
    │               """
    │               主キー制約のSQLを生成
    │               Returns:
    │                   str: PRIMARY KEY制約のSQL
    │               """
    │               return "PRIMARY KEY"
    │       #-------------------------------------------------------------------------------
    │   ├── Unique.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Constraints import Constraints # 基底クラス
    │       from ..common     import private     # プライベートメソッド
    │       from ..common     import public      #　パブリックメソッド
    │       #-------------------------------------------------------------------------------
    │       class Unique(Constraints):
    │           """
    │           ユニーク制約クラス
    │           """
    │           def __init__(self):
    │               """
    │               """
    │           #---------------------------------------------------------------------------
    │           def toSql(self) -> str:
    │               """
    │               ユニーク制約のSQLを生成
    │               Returns:
    │                   str: UNIQUE制約のSQL
    │               """
    │       
    │               return "UNIQUE"
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .AutoIncrement     import AutoIncrement
    │       from .Check             import Check
    │       from .Constraints       import Constraints
    │       from .Default           import Default
    │       from .ForeignKey        import ForeignKey
    │       from .NotNull           import NotNull
    │       from .PrimaryKey        import PrimaryKey
    │       from .Unique            import Unique
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "AutoIncrement",
    │           "Check",
    │           "Constraints",
    │           "Default",
    │           "ForeignKey",
    │           "NotNull",
    │           "PrimaryKey",
    │           "Unique"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [csv]
    │   ├── CSV.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import csv
    │       from typing   import cast, Any      # 型チェック用
    │       from ..common import public         # パブリックメソッド
    │       from ..common import private        # プライベートメソッド
    │       from ..config import Config         # コンフィグクラス
    │       from ..model  import Model          # モデルクラス
    │       from ..engine import MySqlEngine    # MySQLエンジンクラス
    │       from ..engine import Sqlite3Engine  # Sqlite3エンジンクラス
    │       #-------------------------------------------------------------------------------
    │       class CSV:
    │           #---------------------------------------------------------------------------
    │           def __init__(self, model : type[Model]) -> None:
    │               self.__model     = model
    │               self.__tableName = self.__model.tableName
    │           #---------------------------------------------------------------------------
    │           @property
    │           @public
    │           def sqlEngine(self):
    │               """sqlエンジンの設定"""
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @property
    │           @public
    │           def database(self):
    │               """データベースの設定"""
    │               database = Config.database
    │               if database is None:
    │                   raise Exception("データベースが未設定です")
    │               return database
    │           #---------------------------------------------------------------------------
    │           @public
    │           def createTable(self):
    │               try:
    │                   self.__model.createTableIfNotExists()
    │               except:
    │                   raise Exception("テーブルの作成に失敗しました")
    │           #---------------------------------------------------------------------------
    │           @public
    │           def importToDatabase(self, filePath : str):
    │               """
    │               CSVファイルをデータベースにインポートする
    │               """
    │               # CSVファイルの読み込みと分離
    │               header, data = self.__parseCSV(filePath)
    │               # DB側のカラムと照合
    │               dbColumns = self.__getTableColumns()
    │               if not set(header) == set(dbColumns):
    │                   raise Exception("CSVファイルのヘッダーとDBのカラムが一致していません")
    │               # プレイスホルダー
    │               placeHolders = "(" \
    │                            + ", ".join([self.sqlEngine.PLACEHOLDER * len(header)]) \
    │                            + ")"
    │               # カラムのSQL
    │               columnsSql = "(" \
    │                          + ", ".join([f"{col}" for col in header]) \
    │                          + ")"
    │               # クエリ
    │               query = f"INSERT INTO {self.__tableName} " \
    │                     + f"{columnsSql} VALUES {placeHolders}"
    │               # クエリの実行
    │               try:
    │                   self.sqlEngine.executeAny(query, data)
    │                   self.sqlEngine.commit()
    │               except Exception as e:
    │                   self.sqlEngine.rollback()
    │                   raise Exception(f"データの挿入に失敗しました: {e}")
    │           #---------------------------------------------------------------------------
    │           @public
    │           def exportFromDatabase(self,  filePath : str):
    │               """
    │               データベースをCSVファイルにエクスポートする
    │               """
    │               # クエリ
    │               query = f"SELECT * FROM {self.__tableName};"
    │               cur = self.sqlEngine.cursor()
    │               cur.execute(query)
    │               data = cur.fetchall()
    │               # CSVに書き込む
    │               with open(filePath, mode = "w", newline = "", encoding = "utf-8") as f:
    │                   writer = csv.writer(f)
    │                   writer.writerow(self.__getTableColumns())
    │                   writer.writerows(data)
    │               print(f"{filePath}を作成しました")
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __parseCSV(self, filePath : str) -> tuple[list[str], list[tuple]]:
    │               try:
    │                   with open(filePath, newline = "", encoding= "utf-8") as csvFile:
    │                       reader = csv.reader(csvFile)
    │                       header = next(reader)
    │                       if not header:
    │                           raise ValueError("CSVファイルにヘッダーが存在しません")
    │                       data = []
    │                       for row in reader:
    │                           if not len(row) == len(header):
    │                               raise ValueError("CSVの行とヘッダーの列数が一致しません")
    │                           data.append(tuple(row))
    │                       return header, data
    │               except FileNotFoundError:
    │                   raise FileNotFoundError("CSVファイルが存在しません")
    │               except StopIteration:
    │                   raise ValueError("CSVファイルが空です")
    │               except Exception as e:
    │                   raise Exception(f"CSVファイルの読み込みに失敗しました: {e}")
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __getTableColumns(self):
    │               # MYSQLの場合
    │               if isinstance(self.sqlEngine, MySqlEngine):
    │                   # クエリ
    │                   query = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS " \
    │                         + f"WHERE TABLE_SCHEMA = {self.sqlEngine.PLACEHOLDER}" \
    │                         + f"AND TABLE_NAME = {self.sqlEngine.PLACEHOLDER};"
    │                   cur = self.sqlEngine.cursor(dictionary = True)
    │                   cur.execute(query, (self.database, self.__tableName))
    │                   # 型チェック
    │                   rows = cast(list[dict[str, Any]], cur.fetchall())
    │                   return [row["COLUMN_NAME"] for row in rows]
    │               # Sqlite3の場合
    │               elif isinstance(self.sqlEngine, Sqlite3Engine):
    │                   # クエリ
    │                   query = f"PRAGMA table_info({self.__tableName});"
    │                   cur = self.sqlEngine.cursor()
    │                   cur.execute(query)
    │                   return [row[1] for row in cur.fetchall()]
    │               else:
    │                   raise Exception("エンジンが未設定です")
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .CSV import CSV
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "CSV"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [datatypes]
    │   ├── Array.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Array(DataType):
    │           """配列型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.ARRAY)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.ARRAY)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Auto.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Auto(DataType):
    │           """自動採番型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.AUTO)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.AUTO)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Blob.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Blob(DataType):
    │           """バイナリデータ型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.BLOB)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.BLOB)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Boolean.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Boolean(DataType):
    │           """論理値型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.BOOLEAN)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.BOOLEAN)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Char.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Char(DataType):
    │           """固定長文字列型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.CHAR)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.CHAR)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Cidr.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Cidr(DataType):
    │           """サブネット型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.CIDR)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.CIDR)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── DataType.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common import public
    │       #-------------------------------------------------------------------------------
    │       class DataType:
    │           """
    │           データ型の基底クラス
    │           Attributes:
    │               query     (str) : 使用するSQLのデータ型のクエリ
    │               length    (int) : 使用するSQLのデータ型の最大文字数の長さ
    │               precision (int)  : 使用するSQLのデータの精度
    │           """
    │           sqlEngine : None
    │           #---------------------------------------------------------------------------
    │           def __init__(
    │                   self,
    │                   query     : str | None = None,
    │                   length    : int | None = None,
    │                   precision : int | None = None
    │               ):
    │               self.query     = query
    │               self.length    = length
    │               self.precision = precision
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getQuery(self) -> str | None:
    │               """
    │               データ型のクエリ名の取得
    │               Returns:
    │                   str | None: 設定されたクエリ文字列
    │               """
    │               return self.query
    │           #---------------------------------------------------------------------------
    │           @public
    │           def setQuery(
    │               self,
    │               query : str | None = None
    │           ) -> None:
    │               """
    │               Args:
    │                   query (str): クエリ文字列
    │               Raises:
    │                   TypeError : 引数が文字列でない場合
    │               """
    │               if query is None or isinstance(query, str):
    │                   self.query = query
    │               else:
    │                   raise TypeError("型が違います")
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getLength(self) -> int | None:
    │               """
    │               データの長さ（文字数やバイト長）を取得する
    │               Returns:
    │                   int | None: 設定された長さ
    │               """
    │               return self.length
    │           #---------------------------------------------------------------------------
    │           @public
    │           def setLength(
    │               self,
    │               length : int | None = None
    │           ) -> None:
    │               """
    │               データの長さを設定する
    │               Args:
    │                   length (int): 最大長
    │               Raises:
    │                   TypeError: 引数が整数でない場合
    │               """
    │               # 型チェック
    │               if length is None or isinstance(length, int):
    │                   self.length = length
    │               else:
    │                   raise TypeError("型が違います")
    │           #---------------------------------------------------------------------------
    │           @public
    │           def getPrecision(self) -> int | None:
    │               """
    │               精度を取得する（例：小数点以下の桁数)
    │               Returns:
    │                   int | None: 設定された精度
    │               """
    │               return self.precision
    │           #---------------------------------------------------------------------------
    │           @public
    │           def setPrecision(
    │               self,
    │               precision : int | None = None
    │           ) -> None:
    │               """
    │               精度を設定する
    │               Args:
    │                   precision (int) : 小数点以下の桁数など
    │       
    │               Raises:
    │                   TypeError: 引数が整数でない場合
    │               """
    │               # 型チェック
    │               if precision is None or isinstance(precision, int):
    │                   self.precision = precision
    │               else:
    │                   raise TypeError("型が違います")
    │           #---------------------------------------------------------------------------
    │           @public
    │           def toSql(self) -> str:
    │               """
    │               設定をもとにSQLの型定義文字列を生成して返す
    │               Returns:
    │                   str: SQLの型定義文字列
    │               """
    │               # 長さが未定義(None)ではなくかつ制度が未定義(None)ではないとき
    │               if  self.length    is not None \
    │               and self.precision is not None:
    │                   return f"{self.query}({self.length},{self.precision})"
    │               # 長さが未定義(None)ではないとき
    │               elif self.length is not None:
    │                   return f"{self.query}({self.length})"
    │               # 長さが未定義(None)であり、かつ制度が未定義(None)であるとき
    │               else:
    │                   return self.query if self.query else ""
    │       
    │       #-------------------------------------------------------------------------------
    │   ├── Date.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Date(DataType):
    │           """日付型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.DATE)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.DATE)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── DateTime.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class DateTime(DataType):
    │           """日付型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.DATETIME)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.DATETIME)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Decimal.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Decimal(DataType):
    │           """固定小数点型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.DECIMAL)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.DECIMAL)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Double.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Double(DataType):
    │           """倍精度浮動小数点型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.DOUBLE)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.DOUBLE)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Enum.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Enum(DataType):
    │           """列挙型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.ENUM)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.ENUM)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── File.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class File(DataType):
    │           """ファイル型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.FILE)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.FILE)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Float.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Float(DataType):
    │           """浮動小数点型"""
    │           def __init__(
    │                   self,
    │                   length    : int | None = None,
    │                   precision : int | None = None
    │               ):
    │               """
    │               浮動小数点型 \n
    │               Args: \n
    │                   length    (int) : 長さ \n
    │                   precision (str) : 精度 \n
    │               """
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(
    │                       query     = Config.sqlEngine.FLOAT,
    │                       length    = length,
    │                       precision = precision
    │                   )
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(
    │                       query     = Config.asyncSqlEngine.FLOAT,
    │                       length    = length,
    │                       precision = precision
    │                   )
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Geometry.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Geometry(DataType):
    │           """空間情報型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.GEOMETRY)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.GEOMETRY)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── GeometryCollection.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class GeometryCollection(DataType):
    │           """GEOMETRYCOLLECTION型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.GEOMETRYCOLLECTION)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.GEOMETRYCOLLECTION)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Hstore.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Hstore(DataType):
    │           """HSTORE型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.HSTORE)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.HSTORE)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Inet.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Inet(DataType):
    │           """IPv4/IPv6型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.INET)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.INET)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Integer.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Integer(DataType):
    │           """整数型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.INTEGER)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.INTEGER)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Json.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Json(DataType):
    │           """JSON文字列型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.JSON)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.JSON)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── LineString.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class LineString(DataType):
    │           """線型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.LINESTRING)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.LINESTRING)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Long.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Long(DataType):
    │           """長整数型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.LONG)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.LONG)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── LongBlob.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class LongBlob(DataType):
    │           """非常に大きなBLOB型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.LONGBLOB)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.LONGBLOB)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── LongText.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class LongText(DataType):
    │           """非常に大きなテキスト"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.LONGTEXT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.LONGTEXT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── MediumBlob.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class MediumBlob(DataType):
    │           """中程度のBLOB型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.MEDIUMBLOB)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMBLOB)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── MediumInt.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class MediumInt(DataType):
    │           """中間の整数型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.MEDIUMINT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMINT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── MediumText.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class MediumText(DataType):
    │           """中程度のテキスト型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.MEDIUMTEXT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMTEXT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── MultiLineString.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class MultiLineString(DataType):
    │           """MULTILINESTRING型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.MULTILINESTRING)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.MULTILINESTRING)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── MultiPolygon.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class MultiPolygon(DataType):
    │           """MULTIPOLYGON型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.MULTIPOLYGON)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.MULTIPOLYGON)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Null.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Null(DataType):
    │           """NULL型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.NULL)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.NULL)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Numeric.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Numeric(DataType):
    │           """DECIMALの別名型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.NUMERIC)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.NUMERIC)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Point.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Point(DataType):
    │           """座標点型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.POINT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.POINT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Polygon.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Polygon(DataType):
    │           """ポリゴン型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.POLYGON)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.POLYGON)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Serial.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Serial(DataType):
    │           """自動採番型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.SERIAL)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.SERIAL)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Set.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Set(DataType):
    │           """複数選択型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.SET)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.SET)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── SmallInt.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class SmallInt(DataType):
    │           """小さい整数型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.SMALLINT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.SMALLINT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Text.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Text(DataType):
    │           """テキスト型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TEXT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TEXT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Time.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Time(DataType):
    │           """時刻型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TIME)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TIME)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── TimeStamp.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class TimeStamp(DataType):
    │           """タイムスタンプ型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TIMESTAMP)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TIMESTAMP)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── TinyBlob.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class TinyBlob(DataType):
    │           """小さなBLOB型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TINYBLOB)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TINYBLOB)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── TinyInt.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class TinyInt(DataType):
    │           """非常に小さい整数型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TINYINT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TINYINT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── TinyText.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class TinyText(DataType):
    │           """小さなテキスト型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.TINYTEXT)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.TINYTEXT)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Uuid.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Uuid(DataType):
    │           """UUID型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.UUID)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.UUID)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── VarChar.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class VarChar(DataType):
    │           """可変長文字列型"""
    │           def __init__(
    │                   self,
    │                   length : int
    │               ):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(
    │                       query  = Config.sqlEngine.VARCHAR,
    │                       length = length
    │                       )
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(
    │                       query  = Config.asyncSqlEngine.VARCHAR,
    │                       length = length
    │                       )
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Xml.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Xml(DataType):
    │           """XML型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.XML)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.XML)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   ├── Year.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DataType import DataType # データ型クラス
    │       from ..config  import Config   # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Year(DataType):
    │           """年型"""
    │           def __init__(self):
    │               # エンジンと非同期エンジンが未設定なら
    │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
    │                   raise Exception("エンジンが未設定です")
    │               # エンジンが設定されていて、非同期エンジンが未設定
    │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
    │                   super().__init__(query = Config.sqlEngine.YEAR)
    │               # エンジンが未設定されていて、非同期エンジンが設定されている
    │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
    │                   super().__init__(query = Config.asyncSqlEngine.YEAR)
    │               else:
    │                   raise Exception("エンジン設定エラー")
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Integer            import Integer
    │       from .Long               import Long
    │       from .SmallInt           import SmallInt
    │       from .TinyInt            import TinyInt
    │       from .MediumInt          import MediumInt
    │       
    │       from .Float              import Float
    │       from .Double             import Double
    │       from .Decimal            import Decimal
    │       
    │       from .Char               import Char
    │       from .VarChar            import VarChar
    │       from .Text               import Text
    │       from .TinyText           import TinyText
    │       from .MediumText         import MediumText
    │       from .LongText           import LongText
    │       
    │       from .Blob               import Blob
    │       from .TinyBlob           import TinyBlob
    │       from .MediumBlob         import MediumBlob
    │       from .LongBlob           import LongBlob
    │       
    │       from .Date               import Date
    │       from .DateTime           import DateTime
    │       from .Time               import Time
    │       from .TimeStamp          import TimeStamp
    │       from .Year               import Year
    │       
    │       from .Boolean            import Boolean
    │       from .Null               import Null
    │       from .Auto               import Auto
    │       from .Serial             import Serial
    │       from .Uuid               import Uuid
    │       
    │       from .Enum               import Enum
    │       from .Set                import Set
    │       
    │       from .Json               import Json
    │       from .Array              import Array
    │       from .File               import File
    │       
    │       
    │       from .Geometry           import Geometry
    │       from .Point              import Point
    │       from .LineString         import LineString
    │       from .Polygon            import Polygon
    │       from .MultiLineString    import MultiLineString
    │       from .MultiPolygon       import MultiPolygon
    │       from .GeometryCollection import GeometryCollection
    │       
    │       #-------------------------------------------------------------------------------
    │       
    │       __all__ = [
    │           "Integer",
    │           "Long",
    │           "SmallInt",
    │           "TinyInt",
    │           "MediumInt",
    │           "Float",
    │           "Double",
    │           "Decimal",
    │           "Char",
    │           "VarChar",
    │           "Text",
    │           "TinyText",
    │           "MediumText",
    │           "LongText",
    │           "Blob",
    │           "TinyBlob",
    │           "MediumBlob",
    │           "LongBlob",
    │           "Date",
    │           "DateTime",
    │           "Time",
    │           "TimeStamp",
    │           "Year",
    │           "Boolean",
    │           "Null",
    │           "Auto",
    │           "Serial",
    │           "Uuid",
    │           "Enum",
    │           "Set",
    │           "Json",
    │           "Array",
    │           "File",
    │           "Geometry",
    │           "Point",
    │           "LineString",
    │           "Polygon",
    │           "MultiLineString",
    │           "MultiPolygon",
    │           "GeometryCollection",
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [ddl]
    │   ├── DDL.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common     import private   # プライベートメソッド
    │       from ..common     import public    # パブリックメソッド
    │       from ..config     import Config    # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class DDL:
    │           #---------------------------------------------------------------------------
    │           def __init__(self, sql : str) -> None:
    │               self.__sql = sql
    │           #---------------------------------------------------------------------------
    │           @property
    │           @private
    │           def __sqlEngine(self):
    │               """
    │               sqlエンジンの設定
    │               """
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @public
    │           def execute(self):
    │               self.__sqlEngine.execute(self.__sql)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def commit(self):
    │               self.__sqlEngine.commit()
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .DDL import DDL
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "DDL"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [engine]
    │   ├── [base]
    │   │   ├── [datetypes]
    │   │   │   ├── MySqlDateTypes.py
    │   │   │       ↓ 内容（最大10000行）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       from .SqlDateTypes import SqlDateTypes
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       class MySqlDateTypes(SqlDateTypes):
    │   │   │           """MySQLのデータ型クラス"""
    │   │   │           #---------------------------------------------------------------------------
    │   │   │           # データ型定義（MySQLの型に対応）
    │   │   │           INTEGER     = "INT"                  # 整数型（32bit）
    │   │   │           LONG        = "BIGINT"               # 長整数（64bit）
    │   │   │           SMALLINT    = "SMALLINT"             # 小さい整数（16bit）
    │   │   │           TINYINT     = "TINYINT"              # 非常に小さい整数（8bit）
    │   │   │           MEDIUMINT   = "MEDIUMINT"            # 中間の整数（24bit）
    │   │   │           FLOAT       = "FLOAT"                # 単精度浮動小数点
    │   │   │           DOUBLE      = "DOUBLE"               # 倍精度浮動小数点
    │   │   │           DECIMAL     = "DECIMAL"              # 高精度数値（任意精度）
    │   │   │           NUMERIC     = "NUMERIC"              # DECIMALの別名
    │   │   │           CHAR        = "CHAR"                 # 固定長文字列
    │   │   │           VARCHAR     = "VARCHAR"              # 可変長文字列
    │   │   │           TEXT        = "TEXT"                 # 長文（最大64KB）
    │   │   │           TINYTEXT    = "TINYTEXT"             # 小さなテキスト
    │   │   │           MEDIUMTEXT  = "MEDIUMTEXT"           # 中程度のテキスト
    │   │   │           LONGTEXT    = "LONGTEXT"             # 非常に大きなテキスト
    │   │   │           BLOB        = "BLOB"                 # バイナリデータ（最大64KB）
    │   │   │           TINYBLOB    = "TINYBLOB"             # 小さなBLOB
    │   │   │           MEDIUMBLOB  = "MEDIUMBLOB"           # 中程度のBLOB
    │   │   │           LONGBLOB    = "LONGBLOB"             # 非常に大きなBLOB
    │   │   │           DATE        = "DATE"                 # 日付（YYYY-MM-DD）
    │   │   │           TIME        = "TIME"                 # 時刻（HH:MM:SS）
    │   │   │           DATETIME    = "DATETIME"             # 日時（MySQL独自形式）
    │   │   │           TIMESTAMP   = "TIMESTAMP"            # タイムスタンプ
    │   │   │           YEAR        = "YEAR"                 # 年（4桁）
    │   │   │           BOOLEAN     = "BOOLEAN"              # 真偽値（TINYINT(1)の別名）
    │   │   │           NULL        = "NULL"                 # NULL明示
    │   │   │           AUTO        = "AUTO_INCREMENT"       # 自動採番
    │   │   │           UUID        = "CHAR(36)"             # UUID（関数UUID()で生成、文字列として保存）
    │   │   │           JSON        = "JSON"                 # JSON型（MySQL 5.7+）
    │   │   │           ENUM        = "ENUM"                 # 列挙型（値の列挙）
    │   │   │           SET         = "SET"                  # 複数選択型
    │   │   │           GEOMETRY    = "GEOMETRY"             # 空間情報型（GIS）
    │   │   │           POINT       = "POINT"                # 座標点
    │   │   │           LINESTRING  = "LINESTRING"           # 線
    │   │   │           POLYGON     = "POLYGON"              # ポリゴン
    │   │   │           XML         = "TEXT"                 # MySQLにXML専用型はない（TEXTで代替）
    │   │   │           HSTORE      = "TEXT"                 # MySQLはHSTOREなし
    │   │   │           INET        = "VARCHAR(45)"          # IPv4/IPv6用（最大45文字）
    │   │   │           CIDR        = "VARCHAR(43)"          # サブネット（"192.168.0.0/24"など）
    │   │   │           ARRAY       = "JSON"                 # MySQLは配列型なし → JSONで代替
    │   │   │           FILE        = "LONGBLOB"             # ファイル保存用（最大4GB）
    │   │   │           PLACEHOLDER = "%s"                   # プレースホルダー
    │   │   │           SERIAL             = "BIGINT UNSIGNED AUTO_INCREMENT"  # SERIAL
    │   │   │           MULTILINESTRING    = "MULTILINESTRING"
    │   │   │           MULTIPOLYGON       = "MULTIPOLYGON"
    │   │   │           GEOMETRYCOLLECTION = "GEOMETRYCOLLECTION"
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │   ├── PostgreSqlDateTypes.py
    │   │   │       ↓ 内容（最大10000行）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       from .SqlDateTypes import SqlDateTypes
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       class PostgreSqlDateTypes(SqlDateTypes):
    │   │   │           """PostgreSQLのデータ型クラス"""
    │   │   │           #---------------------------------------------------------------------------
    │   │   │           # データ型定義（PostgreSQL の型に対応）
    │   │   │           INTEGER    = "INTEGER"             # 整数型（32bit）
    │   │   │           LONG       = "BIGINT"              # 長整数（64bit）
    │   │   │           SMALLINT   = "SMALLINT"            # 小さい整数
    │   │   │           FLOAT      = "REAL"                # 単精度浮動小数点
    │   │   │           DOUBLE     = "DOUBLE PRECISION"    # 倍精度浮動小数点
    │   │   │           DECIMAL    = "DECIMAL"             # 高精度数値（任意精度）
    │   │   │           NUMERIC    = "NUMERIC"             # 高精度数値（同上）
    │   │   │           CHAR       = "CHAR"                # 固定長文字列
    │   │   │           VARCHAR    = "VARCHAR"             # 可変長文字列
    │   │   │           TEXT       = "TEXT"                # 長文
    │   │   │           BLOB       = "BLOB"                # バイナリデータ
    │   │   │           BYTEA      = "BYTEA"               # PostgreSQL用バイナリ
    │   │   │           DATE       = "DATE"                # 日付（YYYY-MM-DD）
    │   │   │           TIME       = "TIME"                # 時刻（HH:MM:SS）
    │   │   │           DATETIME   = "TIMESTAMP"           # 日時
    │   │   │           TIMESTAMP  = "TIMESTAMP"           # タイムスタンプ
    │   │   │           BOOLEAN    = "BOOLEAN"             # 真偽値
    │   │   │           NULL       = "NULL"                # NULL明示
    │   │   │           AUTO       = "AUTO_INCREMENT"      # MySQLでの自動採番
    │   │   │           SERIAL     = "SERIAL"              # PostgreSQLでの自動採番
    │   │   │           UUID       = "UUID"                # UUID
    │   │   │           JSON       = "JSON"                # JSON
    │   │   │           JSONB      = "JSONB"               # バイナリ形式のJSON
    │   │   │           ARRAY      = "ARRAY"               # 配列型
    │   │   │           ENUM       = "ENUM"                # 列挙型
    │   │   │           SET        = "SET"                 # 複数選択型
    │   │   │           XML        = "XML"                 # XML型
    │   │   │           HSTORE     = "HSTORE"              # キー・バリュー型
    │   │   │           INET       = "INET"                # IPアドレス型
    │   │   │           CIDR       = "CIDR"                # サブネット型
    │   │   │           GEOMETRY   = "GEOMETRY"            # 空間情報型
    │   │   │           PLACEHOLDER = "%s"                 # psycopg のプレースホルダー
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │   ├── SqlDateTypes.py
    │   │   │       ↓ 内容（最大10000行）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       class SqlDateTypes:
    │   │   │           #---------------------------------------------------------------------------
    │   │   │           INTEGER            = ""  # 一般的な整数型（INT、32bit）
    │   │   │           LONG               = ""  # 大きな整数型（BIGINT、64bit）
    │   │   │           SMALLINT           = ""  # 小さめの整数型（16bit）
    │   │   │           TINYINT            = ""  # 非常に小さい整数型（8bit）、BOOLEANの代替として使われる
    │   │   │           MEDIUMINT          = ""  # 中間のサイズの整数型（24bit）
    │   │   │       
    │   │   │           FLOAT              = ""  # 単精度浮動小数点数（約7桁の精度）
    │   │   │           DOUBLE             = ""  # 倍精度浮動小数点数（約15桁の精度）
    │   │   │           DECIMAL            = ""  # 任意精度の固定小数点数（金融・会計に最適）
    │   │   │           NUMERIC            = ""  # DECIMALと同義（SQL標準）
    │   │   │       
    │   │   │           CHAR               = ""  # 固定長文字列（CHAR(n)）、短い定長データ向け
    │   │   │           VARCHAR            = ""  # 可変長文字列（VARCHAR(n)）、一般的な文字列データ
    │   │   │           TEXT               = ""  # 長文テキスト（最大 65,535 バイト）
    │   │   │           TINYTEXT           = ""  # 非常に小さなテキスト（最大 255 バイト）
    │   │   │           MEDIUMTEXT         = ""  # 中程度のテキスト（最大 16,777,215 バイト）
    │   │   │           LONGTEXT           = ""  # 非常に大きなテキスト（最大 4GB）
    │   │   │       
    │   │   │           BLOB               = ""  # バイナリデータ（最大 65,535 バイト）
    │   │   │           TINYBLOB           = ""  # 非常に小さなBLOB（最大 255 バイト）
    │   │   │           MEDIUMBLOB         = ""  # 中程度のBLOB（最大 16MB）
    │   │   │           LONGBLOB           = ""  # 非常に大きなBLOB（最大 4GB）
    │   │   │       
    │   │   │           DATE               = ""  # 日付（YYYY-MM-DD）
    │   │   │           TIME               = ""  # 時刻（HH:MM:SS）
    │   │   │           DATETIME           = ""  # 日付＋時刻（YYYY-MM-DD HH:MM:SS）、タイムゾーンなし
    │   │   │           TIMESTAMP          = ""  # タイムスタンプ（UTCに変換される）
    │   │   │           YEAR               = ""  # 年（4桁または2桁）
    │   │   │       
    │   │   │           BOOLEAN            = ""  # 真偽値（TINYINT(1) として扱われる）
    │   │   │           NULL               = ""  # NULL 値明示用（型ではなく修飾的な意味）
    │   │   │       
    │   │   │           AUTO               = ""  # 自動採番（AUTO_INCREMENT 修飾子）
    │   │   │           UUID               = ""  # UUIDを保存するための文字列（通常は CHAR(36)）
    │   │   │           JSON               = ""  # JSON型（MySQL 5.7以降対応、構造化データ格納可能）
    │   │   │           ENUM               = ""  # 列挙型（事前定義された値の中から1つを選択）
    │   │   │           SET                = ""  # 複数選択可能な列挙型（0〜64個まで）
    │   │   │       
    │   │   │           GEOMETRY           = ""  # 空間情報の基本型（GIS拡張で使用）
    │   │   │           POINT              = ""  # 座標点（X,Y）
    │   │   │           LINESTRING         = ""  # 線（複数点の連続）
    │   │   │           POLYGON            = ""  # ポリゴン（閉じた線の集合）
    │   │   │       
    │   │   │           XML                = ""  # MySQLに専用XML型はないためTEXTで代用される
    │   │   │           HSTORE             = ""  # PostgreSQLのKey-Value型、MySQLでは非対応（TEXTで代用）
    │   │   │           INET               = ""  # IPv4/IPv6アドレス（VARCHAR(45)が一般的）
    │   │   │           CIDR               = ""  # サブネット表記（例: 192.168.0.0/24、VARCHARで代用）
    │   │   │           ARRAY              = ""  # MySQLには配列型がないためJSONで代替することが多い
    │   │   │           FILE               = ""  # ファイルデータ格納用（LONGBLOBなど）
    │   │   │       
    │   │   │           PLACEHOLDER        = ""  # SQLにおけるパラメータプレースホルダー（例: %s, ?）
    │   │   │           SERIAL             = ""  # BIGINT UNSIGNED AUTO_INCREMENTのエイリアス（MySQL構文糖衣）
    │   │   │       
    │   │   │           MULTILINESTRING    = ""  # 複数線（GIS）
    │   │   │           MULTIPOLYGON       = ""  # 複数ポリゴン（GIS）
    │   │   │           GEOMETRYCOLLECTION = ""  # 複数の空間要素の集合（GIS）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │   ├── Sqlite3DateTypes.py
    │   │   │       ↓ 内容（最大10000行）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       from .SqlDateTypes import SqlDateTypes
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       class Sqlite3DateTypes(SqlDateTypes):
    │   │   │           """MySQLのデータ型クラス"""
    │   │   │           #---------------------------------------------------------------------------
    │   │   │           # データ型定義（SQLite3 の型に対応）
    │   │   │           INTEGER     = "INTEGER"             # 整数型（64bit、オートインクリメントにも使用）
    │   │   │           SMALLINT    = "INTEGER"             # SQLiteにSMALLINTなし → INTEGERで代用
    │   │   │           LONG        = "INTEGER"             # SQLiteは全て64bit整数
    │   │   │           TINYINT     = "INTEGER"             # SQLiteにTINYINTなし → INTEGERで代用
    │   │   │           FLOAT       = "REAL"                # 単精度浮動小数点（SQLiteはREALで一括）
    │   │   │           DOUBLE      = "REAL"                # 倍精度浮動小数点（SQLiteはREALで一括）
    │   │   │           DECIMAL     = "NUMERIC"             # 高精度数値（丸めあり）
    │   │   │           NUMERIC     = "NUMERIC"             # NUMERIC型（任意精度数値）
    │   │   │           CHAR        = "TEXT"                # 固定長文字列 → SQLiteではTEXTで統一
    │   │   │           VARCHAR     = "TEXT"                # 可変長文字列 → TEXTにマッピングされる
    │   │   │           TEXT        = "TEXT"                # テキスト全般
    │   │   │           BLOB        = "BLOB"                # バイナリデータ
    │   │   │           BYTEA       = "BLOB"                # PostgreSQL互換のためのエイリアス
    │   │   │           DATE        = "TEXT"                # 日付（SQLiteは日付専用型なし）
    │   │   │           TIME        = "TEXT"                # 時刻（同上）
    │   │   │           DATETIME    = "TEXT"                # 日時（同上）
    │   │   │           TIMESTAMP   = "TEXT"                # タイムスタンプ（同上）
    │   │   │           BOOLEAN     = "INTEGER"             # 真偽値（0または1として保存）
    │   │   │           NULL        = "NULL"                # NULL明示
    │   │   │           UUID        = "TEXT"                # UUID文字列（標準UUID関数なし）
    │   │   │           JSON        = "TEXT"                # JSON（SQLite3.9以降はJSON関数あり）
    │   │   │           JSONB       = "TEXT"                # PostgreSQLとの互換のためのエイリアス
    │   │   │           ARRAY       = "TEXT"                # 配列型なし → JSON文字列などで代用
    │   │   │           ENUM        = "TEXT"                # 列挙型なし → TEXT＋制約で代用可能
    │   │   │           SET         = "TEXT"                # 複数選択型なし → TEXTで代用
    │   │   │           XML         = "TEXT"                # XML型なし → TEXTで代用
    │   │   │           HSTORE      = "TEXT"                # キー・バリュー型なし → JSON等で代用
    │   │   │           INET        = "TEXT"                # IPアドレス型なし → TEXTで代用
    │   │   │           CIDR        = "TEXT"                # サブネット表現型なし → TEXTで代用
    │   │   │           GEOMETRY    = "TEXT"                # 空間型なし（SpatiaLite使用時は拡張可能）
    │   │   │           PLACEHOLDER = "?"                   # sqlite3 モジュールのプレースホルダー
    │   │   │           AUTO        = "INTEGER PRIMARY KEY AUTOINCREMENT"  # 自動採番
    │   │   │           SERIAL      = "INTEGER PRIMARY KEY AUTOINCREMENT"  # PostgreSQLとの互換のため
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │   └── __init__.py
    │   │   │       ↓ 内容（最大10000行）
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       from .PostgreSqlDateTypes   import PostgreSqlDateTypes
    │   │   │       from .MySqlDateTypes        import MySqlDateTypes
    │   │   │       from .Sqlite3DateTypes      import Sqlite3DateTypes
    │   │   │       #-------------------------------------------------------------------------------
    │   │   │       __all__ = [
    │   │   │           "PostgreSqlDateTypes",
    │   │   │           "MySqlDateTypes",
    │   │   │           "Sqlite3DateTypes"
    │   │   │       ]
    │   │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncMySqlEngine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       # aiomysqlのインストールが出来ているかどうか確認
    │   │       try:
    │   │           import aiomysql
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "mysql.connnectorがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install aiomysql"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       from typing         import Any              # Any型クラス
    │   │       from .SqlEngine     import SqlEngine        # 基底SQLエンジンクラス
    │   │       from .datetypes     import MySqlDateTypes   # MySQLのデータ型クラス
    │   │       from ...common      import override         # オーバライドメソッド
    │   │       from ...common      import public           # パブリックメソッド
    │   │       from ...common      import private          # プライベートメソッド
    │   │       from ...Log         import Log              # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncMySqlEngine(SqlEngine, MySqlDateTypes):
    │   │           """
    │   │           非同期MySQLエンジンクラス
    │   │           Attributes:
    │   │               hostName     (str)        : ホスト名
    │   │               userName     (str)        : ユーザー名
    │   │               password     (str)        : パスワード
    │   │               databaseName (str)        : データベース名
    │   │               sqlEngine    (aiomysql)   : aiomysqlクラス
    │   │               conn         (Any | None) : aiomysqlコネクトオブジェクト
    │   │               cur          (Any | None) : aiomysqlカーソルオブジェクト
    │   │               __isLog      (bool)       : ログフラグ
    │   │               __Log        (Log)        : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │               self,
    │   │               hostName     : str,
    │   │               userName     : str,
    │   │               password     : str,
    │   │               databaseName : str,
    │   │               logFile      : str | None = None
    │   │           ):
    │   │               """
    │   │               非同期MySQLエンジンの初期化
    │   │               Args:
    │   │                   hostName     (str)        : ホスト名
    │   │                   userName     (str)        : ユーザー名
    │   │                   password     (str)        : パスワード
    │   │                   databaseName (str)        : データベース名
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.hostName     = hostName
    │   │               self.userName     = userName
    │   │               self.password     = password
    │   │               self.databaseName = databaseName
    │   │               # インスタンス変数(オブジェクト)
    │   │               self.sqlEngine  = aiomysql
    │   │               self.conn       = None # 初期値はNone
    │   │               self.cur        = None # 初期値はNone
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connect(self) -> Any:
    │   │               """
    │   │               非同期でMySQLに接続し、プールを作成
    │   │               Returns:
    │   │                   Any : コネクトオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : データベースの接続に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.pool = await self.sqlEngine.create_pool(
    │   │                       host       = self.hostName,
    │   │                       user       = self.userName,
    │   │                       password   = self.password,
    │   │                       db         = self.databaseName,
    │   │                       autocommit = False
    │   │                   )
    │   │                   self.conn = await self.pool.acquire()
    │   │                   return self.conn
    │   │               except Exception as e:
    │   │                   msg = "データベースの接続に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def cursor(self):
    │   │               """
    │   │               非同期カーソルの作成
    │   │               Args:
    │   │                   dictionary (bool) : 辞書型の指定
    │   │               Returns:
    │   │                   Any : カーソルオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : カーソルの失敗した場合
    │   │               """
    │   │               try:
    │   │                   # 接続してなければ
    │   │                   if self.conn is None:
    │   │                       await self.connect()
    │   │                   # 絶対Noneがないと明示する
    │   │                   # 接続があればカーソル取得
    │   │                   if not self.conn:# 安全チェック
    │   │                       raise Exception
    │   │                   # 戻り値は接続オブジェクトのコルーチンの完了を待って設定
    │   │                   self.cur  = await self.conn.cursor()
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def execute(self, query: str, value: tuple = ()):
    │   │               """
    │   │               非同期にSQLクエリを実行する
    │   │               Args:
    │   │                   query (str)     : SQL文
    │   │                   value (tuple)   : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   cur = await self.cursor()
    │   │                   await cur.execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def executeAny(self, query : str, data : list[tuple[str]]) -> None:
    │   │               """
    │   │               非同期にSQLクエリ(複数)を実行する
    │   │               Args:
    │   │                   query (str)              : クエリ文
    │   │                   value (list[tuple[str]]) : プレイスホルダーに渡す値
    │   │               Args:
    │   │                   query (str)             : SQL文
    │   │                   value (list[tuple[str]) : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
    │   │                   cur = await self.cursor()
    │   │                   await cur.executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def commit(self):
    │   │               """
    │   │               非同期にデータベースにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   await self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectOpen(self):
    │   │               """
    │   │               コネクトとカーソルの開放(非同期)
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   await self.connect()
    │   │                   await self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectClose(self):
    │   │               """
    │   │               非同期でコネクションとカーソルのクローズ
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.cur:
    │   │                       await self.cur.close()
    │   │                   if self.conn:
    │   │                       self.pool.release(self.conn)
    │   │                       self.cur  = None
    │   │                       self.conn = None
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def transaction(self):
    │   │               """
    │   │               非同期でトランザクションの開始
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   await self.cursor()
    │   │                   await self.execute("START TRANSACTION")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def rollback(self):
    │   │               """
    │   │               非同期でトランザクションをロールバックする
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               MySQLに接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncPostgreSqlEngine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       # psycopgのインストールが出来ているかどうか確認
    │   │       try:
    │   │           import psycopg
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "psycopgがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install psycopg[binary]"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       # 非同期psycopgのインストールが出来ているかどうか確認
    │   │       try:
    │   │           from psycopg import AsyncConnection, AsyncCursor
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "非同期psycopgがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install psycopg[async]"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       from typing         import Any                  # Any型クラス
    │   │       from .SqlEngine     import SqlEngine            # 基底SQLエンジンクラス
    │   │       from .datetypes     import PostgreSqlDateTypes  # PostgreSQLのデータ型クラス
    │   │       from ...common      import override             # オーバライドメソッド
    │   │       from ...common      import public               # パブリックメソッド
    │   │       from ...common      import private              # プライベートメソッド
    │   │       from ...Log          import Log                  # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncPostgreSqlEngine(SqlEngine, PostgreSqlDateTypes):
    │   │           """
    │   │           非同期PostgreSQLエンジンクラス
    │   │           Attributes:
    │   │               hostName     (str)        : ホスト名
    │   │               userName     (str)        : ユーザー名
    │   │               password     (str)        : パスワード
    │   │               databaseName (str)        : データベース名
    │   │               port         (int)        : ポート番号
    │   │               sqlEngine    (psycopg)    : psycopgクラス
    │   │               conn         (Any | None) : psycopgコネクトオブジェクト
    │   │               cur          (Any | None) : psycopgカーソルオブジェクト
    │   │               __isLog      (bool)       : ログフラグ
    │   │               __Log        (Log)        : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   hostName     : str,
    │   │                   userName     : str,
    │   │                   password     : str,
    │   │                   databaseName : str,
    │   │                   port         : int,
    │   │                   logFile      : str | None = None
    │   │               ):
    │   │               """
    │   │               PostgreSQLエンジンの初期化
    │   │               Args:
    │   │                   hostName     (str)        : ホスト名
    │   │                   userName     (str)        : ユーザー名
    │   │                   password     (str)        : パスワード
    │   │                   databaseName (str)        : データベース名
    │   │                   port         (str)        : ポート番号
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.hostName     = hostName
    │   │               self.userName     = userName
    │   │               self.password     = password
    │   │               self.databaseName = databaseName
    │   │               self.port         = port
    │   │               # インスタンス変数,(オブジェクト)
    │   │               self.sqlEngine  = psycopg
    │   │               self.conn : AsyncConnection | None = None
    │   │               self.cur  : AsyncCursor     | None = None
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │          #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connect(self) -> AsyncConnection:
    │   │               """
    │   │               非同期でデータベースの接続
    │   │               Returns:
    │   │                   AsyncConnection : コネクトオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : データベースの接続に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.conn = await self.sqlEngine.AsyncConnection.connect(
    │   │                       host     = self.hostName,
    │   │                       user     = self.userName,
    │   │                       password = self.password,
    │   │                       database = self.databaseName,
    │   │                       port     = self.port
    │   │                   )
    │   │                   return self.conn
    │   │               except Exception as e:
    │   │                   msg = "データベースの接続に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def cursor(self) -> AsyncCursor:
    │   │               """
    │   │               非同期でカーソルの作成
    │   │               Returns:
    │   │                   AsyncCursor : カーソルオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : カーソルの失敗した場合
    │   │               """
    │   │               try:
    │   │                   assert self.conn is not None # 明示する
    │   │                   if self.cur:
    │   │                       try:
    │   │                          await self.cur.close()
    │   │                       except Exception:
    │   │                           pass # カーソルが閉じ済みの時用
    │   │                   self.cur = self.conn.cursor()
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def execute(self, query: Any, value: tuple = ()) -> None:
    │   │               """
    │   │               クエリの実行
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   cur = await self.cursor()
    │   │                   await cur.execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def executeAny(self, query: Any, data: list[tuple[str]]) -> None:
    │   │               """
    │   │               クエリの実行(複数)
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   cur = await self.cursor()
    │   │                   await cur.executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def commit(self) -> None:
    │   │               """
    │   │               データベースにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   await self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectOpen(self) -> None:
    │   │               """
    │   │               コネクトとカーソルの開放(非同期)
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   await self.connect()
    │   │                   await self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectClose(self) -> None:
    │   │               """
    │   │               コネクションとカーソルのクローズ(非同期)
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   # カーソルがあれば
    │   │                   if self.cur:
    │   │                       await self.cur.close()
    │   │                   # コネクトが接続していれば
    │   │                   if self.conn:
    │   │                       await self.conn.close()
    │   │                   self.conn = None # 初期値に戻す
    │   │                   self.cur  = None # 初期値に戻す
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def transaction(self) -> None:
    │   │               """
    │   │               非同期トランザクションの開始
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       cur = await self.cursor()
    │   │                       await cur.execute("BEGIN")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def rollback(self) -> None:
    │   │               """
    │   │               非同期ロールバック
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               PostgreSQLに接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncSqlite3Engine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       # aiosqliteのインストールが出来ているかどうか確認
    │   │       try:
    │   │           import aiosqlite
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "aiosqliteがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install aiosqlite"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       from .SqlEngine     import SqlEngine        # 規定SQLエンジンクラス
    │   │       from .datetypes     import Sqlite3DateTypes # Sqlite3のデータ型クラス
    │   │       from ...common      import override         # オーバライドメソッド
    │   │       from ...common      import public           # パブリックメソッド
    │   │       from ...common      import private          # プライベートメソッド
    │   │       from ...Log         import Log              # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncSqlite3Engine(SqlEngine, Sqlite3DateTypes):
    │   │           """
    │   │           非同期Sqlite3エンジンクラス
    │   │           Attributes:
    │   │               database  (str)                         : データベースパス名
    │   │               sqlEngine (aiosqlite)                   : sqlite3クラス
    │   │               conn      (aiosqlite.Connection | None) : sqlite3コネクトオブジェクト
    │   │               cur       (aiosqlite.Cursor     | None) : sqlite3カーソルオブジェクト
    │   │               __isLog   (bool)                        : ログフラグ
    │   │               __Log     (Log)                         : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   databasePath : str,
    │   │                   logFile      : str | None = None
    │   │               ):
    │   │               """
    │   │               非同期SQLite3データベース接続エンジンの初期化
    │   │               Args:
    │   │                   databasePath (str)        : データベースパス
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.database  = databasePath # データベースパス
    │   │               self.sqlEngine = aiosqlite    # 非同期対応のSqlite3エンジン
    │   │               # カーソルとコネクト
    │   │               self.conn : aiosqlite.Connection | None = None # ← 明示的に定義
    │   │               self.cur  : aiosqlite.Cursor     | None = None # ← 明示的に定義
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connect(self) -> aiosqlite.Connection:
    │   │               """
    │   │               非同期でデータベースの接続
    │   │               Returns:
    │   │                   aiosqlite.Connection : コネクトオブジェクト
    │   │               Raises:
    │   │                   Exception : データベースの接続に失敗した場合
    │   │               """
    │   │               try:
    │   │                   # 戻り値はエンジンのコルーチンの完了を待って設定
    │   │                   self.conn = await self.sqlEngine.connect(self.database)
    │   │                   return self.conn
    │   │               except Exception as e:
    │   │                   msg = "データベースの接続に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def cursor(self) -> aiosqlite.Cursor:
    │   │               """
    │   │               非同期にカーソルを作成
    │   │               Returns:
    │   │                   aiosqlite.Cursor : カーソルオブジェクト
    │   │               Raises:
    │   │                   Exception : カーソルの作成に失敗した場合
    │   │               """
    │   │               try:
    │   │                   # 接続してなければ
    │   │                   if self.conn is None:
    │   │                       await self.connect()
    │   │                   # 絶対Noneがないと明示する
    │   │                   # 接続があればカーソル取得
    │   │                   if not self.conn:# 安全チェック
    │   │                       raise Exception
    │   │                   # 戻り値は接続オブジェクトのコルーチンの完了を待って設定
    │   │                   self.cur = await self.conn.cursor()
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def execute(self, query : str, value : tuple = ()) -> None:
    │   │               """
    │   │               非同期にSQLクエリを実行する
    │   │               Args:
    │   │                   query (str)     : 実行するクエリ文
    │   │                   value (tuple)   : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
    │   │                   cur = await self.cursor()
    │   │                   await cur.execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def executeAny(self, query : str, data : list[tuple[str]]) -> None:
    │   │               """
    │   │               非同期にSQLクエリ(複数)を実行する
    │   │               Args:
    │   │                   query (str)              : クエリ文
    │   │                   value (list[tuple[str]]) : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
    │   │                   cur = await self.cursor()
    │   │                   await cur.executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def commit(self):
    │   │               """
    │   │               非同期にトランザクションにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   await self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectOpen(self):
    │   │               """
    │   │               コネクトとカーソルの開放(非同期)
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   await self.connect()
    │   │                   await self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def connectClose(self) -> None:
    │   │               """
    │   │               コネクションとカーソルのクローズ(非同期)
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   # コネクトが接続していれば
    │   │                   if self.conn:
    │   │                       await self.conn.close()
    │   │                       self.conn = None
    │   │                       self.cur  = None
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def transaction(self) -> None:
    │   │               """
    │   │               非同期でトランザクションの開始
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.execute("BEGIN")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           async def rollback(self) -> None:
    │   │               """
    │   │               非同期でトランザクションをロールバックする
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       await self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               Sqlite3に接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── MySqlEngine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       # mysql.connectorのインストールが出来ているかどうか確認
    │   │       try:
    │   │           import mysql.connector
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "mysql.connnectorがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install mysql-connector-python"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       from typing         import Any              # Any型クラス
    │   │       from .SqlEngine     import SqlEngine        # 基底SQLエンジンクラス
    │   │       from .datetypes     import MySqlDateTypes   # MySQLのデータ型クラス
    │   │       from ...common      import override         # オーバライドメソッド
    │   │       from ...common      import public           # パブリックメソッド
    │   │       from ...common      import private          # プライベートメソッド
    │   │       from ...Log         import Log              # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class MySqlEngine(SqlEngine, MySqlDateTypes):
    │   │           """
    │   │           MySQLエンジンクラス
    │   │           Attributes:
    │   │               hostName     (str)             : ホスト名
    │   │               userName     (str)             : ユーザー名
    │   │               password     (str)             : パスワード
    │   │               databaseName (str)             : データベース名
    │   │               sqlEngine    (mysql.connector) : mysql.connectorクラス
    │   │               conn         (Any | None)      : mysqlコネクトオブジェクト
    │   │               cur          (Any | None)      : mysqlカーソルオブジェクト
    │   │               __isLog      (bool)            : ログフラグ
    │   │               __Log        (Log)             : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   hostName     : str,
    │   │                   userName     : str,
    │   │                   password     : str,
    │   │                   databaseName : str,
    │   │                   logFile      : str | None = None
    │   │               ):
    │   │               """
    │   │               MySQLエンジンの初期化
    │   │               Args:
    │   │                   hostName     (str)        : ホスト名
    │   │                   userName     (str)        : ユーザー名
    │   │                   password     (str)        : パスワード
    │   │                   databaseName (str)        : データベース名
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.hostName     = hostName
    │   │               self.userName     = userName
    │   │               self.password     = password
    │   │               self.databaseName = databaseName
    │   │               # インスタンス変数(オブジェクト)
    │   │               self.sqlEngine  = mysql.connector
    │   │               self.conn       = None # 初期値はNone
    │   │               self.cur        = None # 初期値はNone
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connect(self) -> Any:
    │   │               """
    │   │               データベースの接続
    │   │               Returns:
    │   │                   Any : コネクトオブジェクトを返す
    │   │               Raises:
    │   │                   ProgrammingError : 認証エラーやデータベース指定ミス
    │   │                   InterfaceError   : ソケットエラーやネットワークの接続エラー
    │   │                   Error            : その他のMySQLエラー
    │   │               """
    │   │               try:
    │   │                   self.conn = self.sqlEngine.connect(
    │   │                       host     = self.hostName,
    │   │                       user     = self.userName,
    │   │                       password = self.password,
    │   │                       database = self.databaseName
    │   │                   )
    │   │                   # 問題なければ返す
    │   │                   return self.conn
    │   │               # データベースとの接続が切れた場合
    │   │               except mysql.connector.errors.OperationalError as oe:
    │   │                   try:
    │   │                       self.__logInfo("接続が切れています。再接続を試みます...")
    │   │                       # 再接続を試みる
    │   │                       self.conn = self.sqlEngine.connect(
    │   │                           host     = self.hostName,
    │   │                           user     = self.userName,
    │   │                           password = self.password,
    │   │                           database = self.databaseName
    │   │                       )
    │   │                       return self.conn
    │   │                   # 再接続に失敗した場合
    │   │                   except Exception as e:
    │   │                       msg = "MySQLの再接続に失敗しました"
    │   │                       # ログ
    │   │                       self.__logError(msg)
    │   │                       print(f"{msg}: {e}")
    │   │                       raise Exception
    │   │               # 認証エラーやデータベース指定ミスの場合
    │   │               except mysql.connector.errors.ProgrammingError as pe:
    │   │                   msg = "認証エラーやデータベース指定ミスです"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {pe}")
    │   │               # ネットワークの接続やソケットエラーの場合
    │   │               except mysql.connector.errors.InterfaceError as ie:
    │   │                   msg = "ソケットエラーやネットワークの接続エラーです"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {ie}")
    │   │               except mysql.connector.errors.Error as e:
    │   │                   # ユーザ名またはパスワードが違う場合
    │   │                   if e.errno == 1045:
    │   │                       msg = "ユーザ名またはパスワードが間違っています"
    │   │                       self.__logError(msg)
    │   │                       raise Exception(msg)
    │   │                   # 指定されたデータベースが存在しない場合
    │   │                   elif e.errno == 1049:
    │   │                       msg = "指定されたデータベースが存在しません"
    │   │                       self.__logError(msg)
    │   │                       raise Exception(msg)
    │   │                   # その他
    │   │                   else:
    │   │                       msg = f"MySQLエラー({e.errno})です"
    │   │                       self.__logError(msg)
    │   │                       raise Exception(f"{msg}: {e.msg}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def cursor(
    │   │                   self,
    │   │                   dictionary : bool = False
    │   │               ) -> Any: # Anyじゃないとエラーになりやすい
    │   │               """
    │   │               カーソルの作成
    │   │               Args:
    │   │                   dictionary (bool) : 辞書型の指定
    │   │               Returns:
    │   │                   Any : カーソルオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : カーソルの失敗した場合
    │   │               """
    │   │               try:
    │   │                   # 接続されていなければ
    │   │                   if self.conn is None or not self.conn.is_connected():
    │   │                       self.connect()
    │   │                   assert self.conn is not None # 明示する
    │   │                   if self.cur:
    │   │                       try:
    │   │                           self.cur.close()
    │   │                       except Exception:
    │   │                           pass # カーソルが閉じ済みの時用
    │   │                   self.cur = self.conn.cursor(dictionary = dictionary)
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def execute(self, query: str, value : tuple = ()) -> None:
    │   │               """
    │   │               クエリの実行
    │   │               Args:
    │   │                   query (str)     : SQL文
    │   │                   value (tuple)   : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   self.cursor().execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def executeAny(self, query: str, data : list[tuple[str]]) -> None:
    │   │               """
    │   │               クエリの実行(複数)
    │   │               Args:
    │   │                   query (str)             : SQL文
    │   │                   value (list[tuple[str]) : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   self.cursor().executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def commit(self) -> None:
    │   │               """
    │   │               データベースにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn and self.conn.is_connected():
    │   │                       self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectOpen(self) -> None:
    │   │               """
    │   │               コネクトとカーソルの開放
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.connect()
    │   │                   self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectClose(self) -> None:
    │   │               """
    │   │               コネクションとカーソルのクローズ
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   # コネクトが接続していれば
    │   │                   if self.conn and self.conn.is_connected():
    │   │                       if self.cur is not None:
    │   │                           self.cur.close()
    │   │                       self.conn.close()
    │   │                       self.conn = None # 初期値に戻す
    │   │                       self.cur  = None # 初期値に戻す
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def transaction(self) -> None:
    │   │               """
    │   │               トランザクション
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn and self.conn.is_connected():
    │   │                       self.cursor().execute("START TRANSACTION")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def rollback(self) -> None:
    │   │               """
    │   │               ロールバック
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn and self.conn.is_connected():
    │   │                       self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               MySQLに接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None and self.conn.is_connected()
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── PostgreSqlEngine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       # psycopgのインストールが出来ているかどうか確認
    │   │       try:
    │   │           import psycopg
    │   │       except Exception as e:
    │   │           raise Exception(
    │   │               "psycopgがインストールされていません\n"
    │   │               "下記をターミナルで実行してください\n"
    │   │               "pip install psycopg[binary]"
    │   │           )
    │   │       #-------------------------------------------------------------------------------
    │   │       from typing         import Any                  # Any型クラス
    │   │       from .SqlEngine     import SqlEngine            # 基底SQLエンジンクラス
    │   │       from .datetypes     import PostgreSqlDateTypes  # PostgreSQLのデータ型クラス
    │   │       from ...common      import override             # オーバライドメソッド
    │   │       from ...common      import public               # パブリックメソッド
    │   │       from ...common      import private              # プライベートメソッド
    │   │       from ...Log          import Log                  # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class PostgreSqlEngine(SqlEngine, PostgreSqlDateTypes):
    │   │           """
    │   │           PostgreSQLエンジンクラス
    │   │           Attributes:
    │   │               hostName     (str)        : ホスト名
    │   │               userName     (str)        : ユーザー名
    │   │               password     (str)        : パスワード
    │   │               databaseName (str)        : データベース名
    │   │               port         (int)        : ポート番号
    │   │               sqlEngine    (psycopg)    : psycopgクラス
    │   │               conn         (Any | None) : psycopgコネクトオブジェクト
    │   │               cur          (Any | None) : psycopgカーソルオブジェクト
    │   │               __isLog      (bool)       : ログフラグ
    │   │               __Log        (Log)        : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   hostName     : str,
    │   │                   userName     : str,
    │   │                   password     : str,
    │   │                   databaseName : str,
    │   │                   port         : int,
    │   │                   logFile      : str | None = None
    │   │               ):
    │   │               """
    │   │               PostgreSQLエンジンの初期化
    │   │               Args:
    │   │                   hostName     (str)        : ホスト名
    │   │                   userName     (str)        : ユーザー名
    │   │                   password     (str)        : パスワード
    │   │                   databaseName (str)        : データベース名
    │   │                   port         (str)        : ポート番号
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.hostName     = hostName
    │   │               self.userName     = userName
    │   │               self.password     = password
    │   │               self.databaseName = databaseName
    │   │               self.port         = port
    │   │               # インスタンス変数,(オブジェクト)
    │   │               self.sqlEngine  = psycopg
    │   │               self.conn = None
    │   │               self.cur  = None
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │          #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connect(self) -> Any:
    │   │               """
    │   │               データベースの接続
    │   │               Returns:
    │   │                   Any : コネクトオブジェクトを返す
    │   │               Raises:
    │   │       
    │   │               """
    │   │               try:
    │   │                   self.conn = self.sqlEngine.connect(
    │   │                       host     = self.hostName,
    │   │                       user     = self.userName,
    │   │                       password = self.password,
    │   │                       database = self.databaseName,
    │   │                       port     = self.port
    │   │                   )
    │   │                   return self.conn
    │   │               except Exception as e:
    │   │                   msg = "データベースの接続に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def cursor(self) -> Any:
    │   │               """
    │   │               カーソルの作成
    │   │               Returns:
    │   │                   Any : カーソルオブジェクトを返す
    │   │               Raises:
    │   │                   Exception : カーソルの失敗した場合
    │   │               """
    │   │               try:
    │   │                   assert self.conn is not None # 明示する
    │   │                   if self.cur:
    │   │                       try:
    │   │                           self.cur.close()
    │   │                       except Exception:
    │   │                           pass # カーソルが閉じ済みの時用
    │   │                   self.cur = self.conn.cursor()
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def execute(self, query: Any, value: tuple = ()) -> None:
    │   │               """
    │   │               クエリの実行
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   self.cursor().execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def executeAny(self, query: Any, data: list[tuple[str]]) -> None:
    │   │               """
    │   │               クエリの実行(複数)
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   self.cursor().executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def commit(self) -> None:
    │   │               """
    │   │               データベースにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectOpen(self) -> None:
    │   │               """
    │   │               コネクトとカーソルの開放
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.connect()
    │   │                   self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectClose(self) -> None:
    │   │               """
    │   │               コネクションとカーソルのクローズ
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   # コネクトが接続していれば
    │   │                   if self.conn:
    │   │                       if self.cur is not None:
    │   │                           self.cur.close()
    │   │                       self.conn.close()
    │   │                       self.conn = None # 初期値に戻す
    │   │                       self.cur  = None # 初期値に戻す
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def transaction(self) -> None:
    │   │               """
    │   │               トランザクション
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.cursor().execute("BEGIN")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def rollback(self) -> None:
    │   │               """
    │   │               ロールバック
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               MySQLに接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── SqlEngine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ...common.Public   import public
    │   │       #-------------------------------------------------------------------------------
    │   │       class SqlEngine:
    │   │           """基底SQLエンジンクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(self):
    │   │               super().__init__()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def connect(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def cursor(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def executeAny(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def commit(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def connectOpen(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def connectClose(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def transaction(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def rollback(self): ...
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def isConnected(self): ...
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── Sqlite3Engine.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       import sqlite3                              # sqlite3
    │   │       from .SqlEngine     import SqlEngine        # 規定SQLエンジンクラス
    │   │       from .datetypes     import Sqlite3DateTypes # Sqlite3のデータ型クラス
    │   │       from ...common      import override         # オーバライドメソッド
    │   │       from ...common      import public           # パブリックメソッド
    │   │       from ...common      import private          # プライベートメソッド
    │   │       from ...Log         import Log              # ログクラス
    │   │       #-------------------------------------------------------------------------------
    │   │       class Sqlite3Engine(SqlEngine, Sqlite3DateTypes):
    │   │           """
    │   │           Sqlite3エンジンクラス
    │   │           Attributes:
    │   │               database  (str)                       : データベースパス名
    │   │               sqlEngine (sqlite3)                   : sqlite3クラス
    │   │               conn      (sqlite3.Connection | None) : sqlite3コネクトオブジェクト
    │   │               cur       (sqlite3.Cursor     | None) : sqlite3カーソルオブジェクト
    │   │               __isLog   (bool)                      : ログフラグ
    │   │               __Log     (Log)                       : ログオブジェクト
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   databasePath : str,
    │   │                   logFile      : str | None = None
    │   │               ):
    │   │               """
    │   │               SQLite3データベース接続エンジンの初期化
    │   │               Args:
    │   │                   databasePath (str)        : データベースパス
    │   │                   logFile      (str | None) : ログファイル名
    │   │               """
    │   │               super().__init__()
    │   │               # インスタンス変数
    │   │               self.database : str = databasePath
    │   │               # インスタンス変数(オブジェクト)
    │   │               self.sqlEngine = sqlite3
    │   │               self.conn : sqlite3.Connection | None = None # ← 明示的に定義
    │   │               self.cur  : sqlite3.Cursor     | None = None # ← 明示的に定義
    │   │               # ログの初期設定
    │   │               self.__setLog(logFile)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __setLog(self, logFile : str | None):
    │   │               """ログクラスとフラグの設定"""
    │   │               # ログファイルが未指定なら
    │   │               if logFile is None:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │               # ログファイルが指定されていれば
    │   │               elif logFile:
    │   │                   self.__isLog = True
    │   │                   self.__log   = Log(logFile)
    │   │               else:
    │   │                   self.__isLog = False
    │   │                   self.__log   = None
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logDebug(self, msg):
    │   │               """デバックメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.debug(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logInfo(self, msg):
    │   │               """インフォメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.info(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logWarning(self, msg):
    │   │               """警告メッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.warning(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logError(self, msg):
    │   │               """エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.error(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __logCritical(self, msg):
    │   │               """致命的エラーメッセージ"""
    │   │               if self.__isLog and self.__log is not None:
    │   │                   self.__log.critical(msg)
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connect(self) -> sqlite3.Connection:
    │   │               """
    │   │               データベースの接続
    │   │               Returns:
    │   │                   sqlite3.Connection : コネクトオブジェクト
    │   │               Raises:
    │   │                   Exception : データベースの接続に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.conn = self.sqlEngine.connect(self.database)
    │   │                   return self.conn
    │   │               except Exception as e:
    │   │                   msg = "データベースの接続に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def cursor(self) -> sqlite3.Cursor:
    │   │               """
    │   │               カーソルの作成
    │   │               Returns:
    │   │                   sqlite3.Cursor : カーソルオブジェクト
    │   │               Raises:
    │   │                   Exception : カーソルの作成に失敗した場合
    │   │               """
    │   │               try:
    │   │                   # 接続してなければ
    │   │                   if self.conn is None:
    │   │                       self.connect()
    │   │                   # 絶対Noneがないと明示する
    │   │                   # 接続があればカーソル取得
    │   │                   assert self.conn is not None # 安全チェック
    │   │                   self.cur = self.conn.cursor()
    │   │                   return self.cur
    │   │               except Exception as e:
    │   │                   msg = "カーソルの作成に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def execute(self, query : str, value : tuple = ()) -> None:
    │   │               """
    │   │               クエリを実行
    │   │               Args:
    │   │                   query (str)     : 実行するクエリ文
    │   │                   value (tuple)   : プレイスホルダーに渡す値
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
    │   │                   self.cursor().execute(query, value)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{value}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def executeAny(self, query: str, data: list[tuple[str]]):
    │   │               """
    │   │               クエリの実行(複数)
    │   │               Raises:
    │   │                   Exception : クエリの実行に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
    │   │                   self.cursor().executemany(query, data)
    │   │               except Exception as e:
    │   │                   msg  = "クエリの実行に失敗しました"
    │   │                   qmsg = f"クエリ:{query}, 値:{data}"
    │   │                   self.__logError(msg)
    │   │                   self.__logError(qmsg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def commit(self):
    │   │               """
    │   │               データベースにコミットする
    │   │               Raises:
    │   │                   Exception : コミットに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.conn.commit()
    │   │               except Exception as e:
    │   │                   # コミットが失敗した場合ロールバックする
    │   │                   msg = "コミットが失敗したためロールバックしました"
    │   │                   self.__logError(msg)
    │   │                   self.rollback()
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectOpen(self):
    │   │               """
    │   │               コネクトとカーソルの開放
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルの開放に失敗した場合
    │   │               """
    │   │               try:
    │   │                   self.connect()
    │   │                   self.cursor()
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルの開放に失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def connectClose(self) -> None:
    │   │               """
    │   │               コネクションとカーソルのクローズ
    │   │               Raises:
    │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
    │   │               """
    │   │               try:
    │   │                   # コネクトが接続していれば
    │   │                   if self.conn:
    │   │                       self.conn.close()
    │   │                       self.conn = None
    │   │                       self.cur  = None
    │   │               except Exception as e:
    │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def transaction(self) -> None:
    │   │               """
    │   │               トランザクション
    │   │               Raises:
    │   │                   Exception : トランザクションに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.cursor().execute("BEGIN")
    │   │               except Exception as e:
    │   │                   msg = "トランザクションに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def rollback(self) -> None:
    │   │               """
    │   │               ロールバック
    │   │               Raises:
    │   │                   Exception : ロールバックに失敗した場合
    │   │               """
    │   │               try:
    │   │                   if self.conn:
    │   │                       self.conn.rollback()
    │   │               except Exception as e:
    │   │                   msg = "ロールバックに失敗しました"
    │   │                   self.__logError(msg)
    │   │                   raise Exception(f"{msg}: {e}")
    │   │           #---------------------------------------------------------------------------
    │   │           @override
    │   │           @public
    │   │           def isConnected(self) -> bool:
    │   │               """
    │   │               Sqlite3に接続中かどうか返す
    │   │               Returns:
    │   │                   bool : 接続されていればTrue
    │   │               """
    │   │               return self.conn is not None
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .AsyncSqlite3Engine    import AsyncSqlite3Engine
    │   │       from .AsyncMySqlEngine      import AsyncMySqlEngine
    │   │       from .MySqlEngine           import MySqlEngine
    │   │       from .Sqlite3Engine         import Sqlite3Engine
    │   │       from .SqlEngine             import SqlEngine
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "AsyncSqlite3Engine",
    │   │           "AsyncMySqlEngine",
    │   │           "MySqlEngine",
    │   │           "Sqlite3Engine",
    │   │           "SqlEngine"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── AsyncEngine.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .base     import AsyncMySqlEngine
    │       from .base     import AsyncSqlite3Engine
    │       from ..common  import public          #パブリックメソッド
    │       from ..column  import Column
    │       from ..model   import Model           # モデルクラス
    │       from ..manager import Select          # SELECT句クラス
    │       from ..config  import Config
    │       #-------------------------------------------------------------------------------
    │       class AsyncEngine:
    │           """
    │           SQLエンジンを初期化・管理するためのクラス
    │           データベースの接続設定、エンジンの初期化、SQL発行に必要な
    │           各種情報の取得・設定を提供する
    │           """
    │           #---------------------------------------------------------------------------
    │           def __init__(
    │                   self,
    │                   sqlEngineName : str,
    │                   hostName      : str | None = None,
    │                   userName      : str | None = None,
    │                   password      : str | None = None,
    │                   database      : str | None = None
    │               ):
    │               """
    │               エンジンを初期化し、接続情報を登録する。
    │               Parameters:
    │                   sqlEngineName (str) : 使用するエンジン名
    │                   hostName      (str) : ホスト名
    │                   userName      (str) : ユーザー名
    │                   password      (str) : パスワード
    │                   databaseName  (str) : データベース名またはDBファイルパス
    │               """
    │               self.sqlEngineName = sqlEngineName
    │               self.hostName      = hostName
    │               self.userName      = userName
    │               self.password      = password
    │               self.database      = database
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def launch(self) -> None:
    │               """
    │               SQLエンジンをエンジン名に応じて初期化する
    │               Raises:
    │                   ModuleNotFoundError : 未対応のエンジン名が指定された場合
    │               """
    │               if self.sqlEngineName == "sqlite3":
    │                   if self.database:
    │                       self.sqlEngine = AsyncSqlite3Engine(
    │                           databasePath = self.database
    │                       )
    │                   raise Exception("データベースを指定してください")
    │               elif self.sqlEngineName == "mysql":
    │                   if  self.hostName and self.userName \
    │                   and self.password and self.database:
    │                       self.sqlEngine = AsyncMySqlEngine(
    │                           hostName     = self.hostName,
    │                           userName     = self.userName,
    │                           password     = self.password,
    │                           databaseName = self.database
    │                       )
    │                   else:
    │                       raise Exception("引数を指定ください")
    │               else:
    │                   raise ModuleNotFoundError("未対応のモジュールエンジンです")
    │               Config.asyncSqlEngine = self.sqlEngine
    │               Config.database       = self.database
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def commit(self) -> None:
    │               """
    │               トランザクションをコミットする
    │               """
    │               await self.sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def connectOpen(self) -> None:
    │               """
    │               データベース接続を開始する
    │               """
    │               await self.sqlEngine.connectOpen()
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def connectClose(self) -> None:
    │               """
    │               データベース接続を閉じる
    │               """
    │               await self.sqlEngine.connectClose()
    │           #---------------------------------------------------------------------------
    │   ├── Engine.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .base     import MySqlEngine
    │       from .base     import Sqlite3Engine
    │       from ..common  import public          #パブリックメソッド
    │       from ..column  import Column
    │       from ..model   import Model           # モデルクラス
    │       from ..manager import Select          # SELECT句クラス
    │       from ..config  import Config
    │       #-------------------------------------------------------------------------------
    │       class Engine:
    │           """
    │           SQLエンジンを初期化・管理するためのクラス
    │           データベースの接続設定、エンジンの初期化、SQL発行に必要な
    │           各種情報の取得・設定を提供する
    │           """
    │           #---------------------------------------------------------------------------
    │           def __init__(
    │                   self,
    │                   sqlEngineName : str,
    │                   hostName      : str | None = None,
    │                   userName      : str | None = None,
    │                   password      : str | None = None,
    │                   database      : str | None = None
    │               ):
    │               """
    │               エンジンを初期化し、接続情報を登録する。
    │               Args:
    │                   sqlEngineName (str) : 使用するエンジン名
    │                   hostName      (str) : ホスト名
    │                   userName      (str) : ユーザー名
    │                   password      (str) : パスワード
    │                   databaseName  (str) : データベース名またはDBファイルパス
    │               """
    │               self.sqlEngineName = sqlEngineName
    │               self.hostName      = hostName
    │               self.userName      = userName
    │               self.password      = password
    │               self.database      = database
    │           #---------------------------------------------------------------------------
    │           @public
    │           def launch(self) -> None:
    │               """
    │               SQLエンジンをエンジン名に応じて初期化する
    │               Raises:
    │                   ModuleNotFoundError : 未対応のエンジン名が指定された場合
    │               """
    │               if self.sqlEngineName == "sqlite3":
    │                   if self.database:
    │                       self.sqlEngine = Sqlite3Engine(
    │                           databasePath = self.database
    │                       )
    │                   else:
    │                       raise Exception("データベースを指定してください")
    │               elif self.sqlEngineName == "mysql":
    │                   if  self.hostName and self.userName \
    │                   and self.password and self.database:
    │                       self.sqlEngine = MySqlEngine(
    │                           hostName     = self.hostName,
    │                           userName     = self.userName,
    │                           password     = self.password,
    │                           databaseName = self.database
    │                       )
    │                   else:
    │                       raise Exception("引数を指定ください")
    │               else:
    │                   raise ModuleNotFoundError("未対応のモジュールエンジンです")
    │               Config.sqlEngine = self.sqlEngine
    │               Config.database  = self.database
    │           #---------------------------------------------------------------------------
    │           @public
    │           def commit(self) -> None:
    │               """
    │               トランザクションをコミットする
    │               """
    │               self.sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def connectOpen(self) -> None:
    │               """
    │               データベース接続を開始する
    │               """
    │               self.sqlEngine.connectOpen()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def connectClose(self) -> None:
    │               """
    │               データベース接続を閉じる
    │               """
    │               self.sqlEngine.connectClose()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def select(
    │                   self,
    │                   table    : type[Model],
    │                   *columns : Column
    │               ) -> Select:
    │               """
    │               SELECT文用のSelectオブジェクトを生成する
    │               Args:
    │                   table   (type[Model]) : モデルクラス
    │                   columns (Column...)   : 取得対象のカラム
    │               Returns:
    │                   Select : SELECTクラス
    │               """
    │               # columnsが引数として指定されていない場合は*として認識する
    │               if len(columns) == 0:
    │                   cols = "*"
    │               else:
    │                   cols = ", ".join(col.columnName for col in columns)
    │               return Select(
    │                   tableName  = table.tableName, # テーブル名
    │                   columns    = cols,            # カラム
    │               )
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .base        import MySqlEngine
    │       from .base        import AsyncMySqlEngine
    │       from .base        import Sqlite3Engine
    │       from .base        import AsyncSqlite3Engine
    │       from .Engine      import Engine
    │       from .AsyncEngine import AsyncEngine
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "MySqlEngine",
    │           "AsyncMySqlEngine",
    │           "Sqlite3Engine",
    │           "AsyncSqlite3Engine",
    │           "Engine",
    │           "AsyncEngine"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [filed]
    │   ├── BoolFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed   # 基底クラス
    │       from ..datatypes import Boolean # 論理値型
    │       #-------------------------------------------------------------------------------
    │       class BoolFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   isUnique        = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = Boolean(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = isUnique,
    │                   isAutoincrement = False,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── DateTimeFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed    # 基底クラス
    │       from ..datatypes import DateTime # 日付型
    │       #-------------------------------------------------------------------------------
    │       class DateTimeFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   isUnique        = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = DateTime(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = isUnique,
    │                   isAutoincrement = False,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── Filed.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..datatypes.DataType import DataType    # データ型　<-インポートエラー回避
    │       from ..column             import Column      # カラムクラス
    │       from ..constraints        import Default     # デフォルト値クラス
    │       from ..constraints        import NotNull     # NotNullクラス
    │       from ..constraints        import Unique      # ユニーク設定クラス
    │       from ..constraints        import ForeignKey  # 外部キー制約クラス
    │       from ..common             import private     # プライベートメソッド
    │       from ..common             import override    # オーバライドメソッド
    │       #-------------------------------------------------------------------------------
    │       class Filed(Column):
    │           def __init__(
    │                   self,
    │                   dataType        : DataType,
    │                   isPrimaryKey    : bool       = False,
    │                   isNotNull       : bool       = False,
    │                   isUnique        : bool       = False,
    │                   isAutoincrement : bool       = False,
    │                   default         : str | None = None,
    │                   foreignKey      : str | None = None
    │               ) -> None:
    │               # 制約
    │               self.dataType        = dataType
    │               self.isPrimaryKey    = isPrimaryKey
    │               self.isNotNull       = isNotNull
    │               self.isUnique        = isUnique
    │               self.isAutoincrement = isAutoincrement
    │               self.default         = default
    │               self.foreignKey      = foreignKey
    │               #
    │               self.columnName  : str
    │               self.tableName   : str
    │               self.dataTypeSql : str
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setDataTypeSql(self) -> None: ...
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setPrimaryKeySql(self) -> None:
    │               return super().setPrimaryKeySql(self.isPrimaryKey)
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setDefaultSql(self) -> None:
    │               return super().setDefaultSql(
    │                   Default(self.default)
    │               )
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setNotNullSql(self) -> None:
    │               return super().setNotNullSql(
    │                   NotNull(self.isNotNull)
    │               )
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setUniqueSql(self) -> None:
    │               return super().setUniqueSql(
    │                   Unique()
    │               )
    │           #---------------------------------------------------------------------------
    │           @override
    │           @private
    │           def setForeignKeySql(self) -> None:
    │               if self.foreignKey is None:
    │                   foreignKey = None
    │               else:
    │                   foreignKey = ForeignKey(
    │                       referenceName = self.foreignKey,
    │                       onUpdate      = None,
    │                       onDelete      = None
    │                   )
    │               return super().setForeignKeySql(
    │                   foreignKey = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── FloatFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed # 基底クラス
    │       from ..datatypes import Float # 浮動小数点型
    │       #-------------------------------------------------------------------------------
    │       class FloatFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   isUnique        = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = Float(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = isUnique,
    │                   isAutoincrement = False,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── IntFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed   # 基底クラス
    │       from ..datatypes import Integer # 整数型
    │       #-------------------------------------------------------------------------------
    │       class IntFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   isUnique        = False,
    │                   isAutoincrement = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = Integer(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = isUnique,
    │                   isAutoincrement = isAutoincrement,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── StrFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed # 基底クラス
    │       from ..datatypes import Char  # 固定長文字列型
    │       #-------------------------------------------------------------------------------
    │       class StrFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   isUnique        = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = Char(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = isUnique,
    │                   isAutoincrement = False,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   ├── TimeFiled.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Filed      import Filed # 基底クラス
    │       from ..datatypes import Time  # 時刻型
    │       #-------------------------------------------------------------------------------
    │       class TimeFiled(Filed):
    │           def __init__(
    │                   self,
    │                   isPrimaryKey    = False,
    │                   isNotNull       = False,
    │                   default         = None,
    │                   foreignKey      = None
    │               ) -> None:
    │               super().__init__(
    │                   dataType        = Time(),
    │                   isPrimaryKey    = isPrimaryKey,
    │                   isNotNull       = isNotNull,
    │                   isUnique        = False,
    │                   isAutoincrement = False,
    │                   default         = default,
    │                   foreignKey      = foreignKey
    │               )
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .BoolFiled     import BoolFiled
    │       from .DateTimeFiled import DateTimeFiled
    │       from .Filed         import Filed
    │       from .FloatFiled    import FloatFiled
    │       from .IntFiled      import IntFiled
    │       from .StrFiled      import StrFiled
    │       from .TimeFiled     import TimeFiled
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "BoolFiled",
    │           "DateTimeFiled",
    │           "Filed",
    │           "FloatFiled",
    │           "IntFiled",
    │           "StrFiled",
    │           "TimeFiled"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [index]
    │   ├── Index.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common import private
    │       from ..common import public
    │       from ..config import Config
    │       from ..column import Column
    │       #-------------------------------------------------------------------------------
    │       class Index:
    │           def __init__(
    │                   self,
    │                   indexName : str,
    │                   *columns  : Column
    │               ) -> None:
    │               """
    │               インデックスの操作クラス
    │               Args:
    │                   indexName (str)    : インデックス名
    │                   *columns  (Column) : カラムオブジェクト
    │               Examples:
    │                   ↓ インデックスインスタンスの作成
    │                   index = Index("indexName", User.id, User.name)
    │                   ↓ インデックスを作成
    │                   index.create()
    │                   ↓ インデックスを削除
    │                   index.drop()
    │                   ※ 各操作は自動でコミットされる
    │               """
    │               self.__indexName = indexName        # インデックス名
    │               self.__columns   = columns          # カラムオブジェクト群
    │               self.__sqlEngine = Config.sqlEngine # エンジンオブジェクト
    │           #---------------------------------------------------------------------------
    │           @ private
    │           def __columnsToSql(self) -> str:
    │               query = ""
    │               for col in self.__columns:
    │                   if query == "":
    │                       query += f"{col.tableName}("
    │                   else:
    │                       query += f"{col.columnName}, "
    │               else:
    │                   query = query[:-2]
    │                   query += ")"
    │               # User (id, name, ...)の形に成形して返す
    │               return query
    │           #---------------------------------------------------------------------------
    │           @ public
    │           def create(self) -> None:
    │               """
    │               インデックスの作成
    │               """
    │               # User (id, name, ...)の形を取得する
    │               colToSql = self.__columnsToSql()
    │               # クエリ
    │               query = f"CREATE INDEX {self.__indexName} ON {colToSql};"
    │               # エンジンが設定されていたら
    │               if not self.__sqlEngine is None:
    │                   self.__sqlEngine.execute(query = query)
    │                   self.__sqlEngine.commit()
    │               else:
    │                   raise Exception("エンジンが未設定です")
    │           #---------------------------------------------------------------------------
    │           @ public
    │           def drop(self) -> None:
    │               """
    │               インデックスの削除
    │               """
    │               # クエリ
    │               query = f"DROP INDEX IF NOT EXISTS {self.__indexName};"
    │               # エンジンが設定されていたら
    │               if not self.__sqlEngine is None:
    │                   self.__sqlEngine.execute(query = query)
    │                   self.__sqlEngine.commit()
    │               else:
    │                   raise Exception("エンジンが未設定です")
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Index import Index
    │       __all__ = [
    │           "Index"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [manager]
    │   ├── [alter]
    │   │   ├── AlterTableAddColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AlterTableAddColumn(Base):
    │   │           """テーブルにカラムを追加するクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   column      : str,
    │   │                   dataType    : str,
    │   │                   constraints : str,
    │   │               ):
    │   │               """
    │   │               テーブルにカラムを追加するクラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   column      (str) : カラム名
    │   │                   dataType    (str) : データ型
    │   │                   constraints (str) : 制約
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} ADD " \
    │   │                            + f"{column} {dataType} {constraints};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AlterTableAddConstraint.py
    │   │       ↓ 内容（最大10000行）
    │   │       from ..Base import Base    #マネージャーのベースクラス
    │   │       
    │   │       class AlterTableAddConstraint(Base):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │       
    │   │   ├── AlterTableDropColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AlterTableDropColumn(Base):
    │   │           """テーブルからカラムを削除するクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName  : str,
    │   │                   columnName : str
    │   │               ):
    │   │               """
    │   │               テーブルからカラムを削除するクラスの初期化
    │   │               Args:
    │   │                   tableName (str)  : テーブル名
    │   │                   columnNmae (str) : カラム名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} DROP COLUMN {columnName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AlterTableDropConstraint.py
    │   │       ↓ 内容（最大10000行）
    │   │       from ..Base import Base    #マネージャーのベースクラス
    │   │       
    │   │       class AlterTableDropConstraint(Base):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │   ├── AlterTableRenameColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AlterTableRenameColumn(Base):
    │   │           """テーブルのカラム名変更クラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   oldName   : str,
    │   │                   newName   : str,
    │   │               ):
    │   │               """
    │   │               テーブルのカラム名変更クラス
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   oldName   (str) : 既存の名前
    │   │                   newName   (str) : 新しい名前
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} " \
    │   │                            + f"RENAME COLUMN {oldName} TO {newName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AlterTableRenameTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       from ..Base import Base    #マネージャーのベースクラス
    │   │       class AlterTableRenameTable(Base):
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName: str
    │   │               ):
    │   │               super().__init__(tableName)
    │   │   ├── AlterView.py
    │   │       ↓ 内容（最大10000行）
    │   │       from ..Base import Base    #マネージャーのベースクラス
    │   │       
    │   │       class AlterView(Base):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │   ├── AsyncAlterTableAddColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableAddColumn(AsyncBase):
    │   │           """テーブルにカラムを追加するクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   column      : str,
    │   │                   dataType    : str,
    │   │                   constraints : str,
    │   │               ):
    │   │               """
    │   │               テーブルにカラムを追加するクラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   column      (str) : カラム名
    │   │                   dataType    (str) : データ型
    │   │                   constraints (str) : 制約
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} ADD " \
    │   │                            + f"{column} {dataType} {constraints};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterTableAddConstraint.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableAddConstraint(AsyncBase):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterTableDropColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableDropColumn(AsyncBase):
    │   │           """テーブルからカラムを削除するクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName  : str,
    │   │                   columnName : str
    │   │               ):
    │   │               """
    │   │               テーブルからカラムを削除するクラスの初期化
    │   │               Args:
    │   │                   tableName (str)  : テーブル名
    │   │                   columnNmae (str) : カラム名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} DROP COLUMN {columnName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterTableDropConstraint.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableDropConstraint(AsyncBase):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterTableRenameColumn.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableRenameColumn(AsyncBase):
    │   │           """テーブルのカラム名変更クラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   oldName   : str,
    │   │                   newName   : str,
    │   │               ):
    │   │               """
    │   │               テーブルのカラム名変更クラス
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   oldName   (str) : 既存の名前
    │   │                   newName   (str) : 新しい名前
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"ALTER TABLE {tableName} " \
    │   │                            + f"RENAME COLUMN {oldName} TO {newName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterTableRenameTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterTableRenameTable(AsyncBase):
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName: str
    │   │               ):
    │   │               super().__init__(tableName)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncAlterView.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncAlterView(AsyncBase):
    │   │           def __init__(self, tableName: str):
    │   │               super().__init__(tableName)
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .AlterTableAddColumn           import AlterTableAddColumn
    │   │       from .AlterTableAddConstraint       import AlterTableAddConstraint
    │   │       from .AlterTableDropColumn          import AlterTableDropColumn
    │   │       from .AlterTableDropConstraint      import AlterTableDropConstraint
    │   │       from .AlterTableRenameColumn        import AlterTableRenameColumn
    │   │       from .AlterTableRenameTable         import AlterTableRenameTable
    │   │       from .AlterView                     import AlterView
    │   │       from .AsyncAlterTableAddColumn      import AsyncAlterTableAddColumn
    │   │       from .AsyncAlterTableAddConstraint  import AsyncAlterTableAddConstraint
    │   │       from .AsyncAlterTableDropColumn     import AsyncAlterTableDropColumn
    │   │       from .AsyncAlterTableDropConstraint import AsyncAlterTableDropConstraint
    │   │       from .AsyncAlterTableRenameColumn   import AsyncAlterTableRenameColumn
    │   │       from .AsyncAlterTableRenameTable    import AsyncAlterTableRenameTable
    │   │       from .AsyncAlterView                import AsyncAlterView
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "AlterTableAddColumn",
    │   │           "AlterTableAddConstraint",
    │   │           "AlterTableDropColumn",
    │   │           "AlterTableDropConstraint",
    │   │           "AlterTableRenameColumn",
    │   │           "AlterTableRenameTable",
    │   │           "AlterView",
    │   │           "AsyncAlterTableAddColumn",
    │   │           "AsyncAlterTableAddConstraint",
    │   │           "AsyncAlterTableDropColumn",
    │   │           "AsyncAlterTableDropConstraint",
    │   │           "AsyncAlterTableRenameColumn",
    │   │           "AsyncAlterTableRenameTable",
    │   │           "AsyncAlterView"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── [create]
    │   │   ├── AsyncCreateIndex.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncCreateIndex(AsyncBase):
    │   │           """非同期インデックス作成クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   indexName : str,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │               非同期インデックス作成クラスの初期化
    │   │               Args:
    │   │                   indexName (str) : インデックス名
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : カラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"CREATE {indexName} ON {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def exexute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncCreateTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncCreateTable(AsyncBase):
    │   │           """
    │   │           非同期テーブル作成クラス
    │   │           ※存在する場合も
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │               非同期テーブル作成クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : CREATE TABLE (...);の...部分
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"CREATE TABLE {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncCreateTableIfNotExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncCreateTableIfNotExists(AsyncBase):
    │   │           """非同期テーブル作成クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │               非同期テーブル作成クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : CREATE TABLE (...);の...部分
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"CREATE TABLE IF NOT EXISTS {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncCreateTrigger.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import private   # プライベートメソッド
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncCreateTrigger(AsyncBase):
    │   │           """非同期トリガーの作成"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str,
    │   │                   timing      : str,
    │   │                   event       : str,
    │   │                   body        : str
    │   │               ):
    │   │               """
    │   │               非同期トリガーの作成
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │                   timing      (str) : タイミング BEFORE AFTER
    │   │                   event       (str) : イベント  INSERT UPDATE DELETE
    │   │                   body        (str) : 実行するSQL文
    │   │               Examples:
    │   │                   trigger = User.createTrigger(
    │   │                       "tableName",
    │   │                       "triggerName",
    │   │                       "before | after",
    │   │                       "inser | update | delete",
    │   │                       "SQL文"
    │   │                   )
    │   │                   trigger.execute()
    │   │                   trigger.commit()
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = self.__buildQuery(
    │   │                   tableName   = tableName,
    │   │                   triggerName = triggerName,
    │   │                   timing      = timing,
    │   │                   event       = event,
    │   │                   body        = body
    │   │               )
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __buildQuery(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str,
    │   │                   timing      : str,
    │   │                   event       : str,
    │   │                   body        : str
    │   │               ) -> str:
    │   │               """
    │   │               トリガー作成クエリの作成用のプライベートメソッド
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │                   timing      (str) : タイミング BEFORE AFTER
    │   │                   event       (str) : イベント  INSERT UPDATE DELETE
    │   │                   body        (str) : 実行するSQL文
    │   │               """
    │   │               query = f"CREATE {triggerName} "
    │   │               if timing == "before":
    │   │                   query += "BEFORE " # 末尾にスペース
    │   │               elif timing == "after":
    │   │                   query += "AFTER "  # 末尾にスペース
    │   │               else:
    │   │                   raise Exception(f"使えない引数:{timing} を指定しています。")
    │   │               if event == "insert":
    │   │                   query += "INSERT " # 末尾にスペース
    │   │               elif event == "update":
    │   │                   query += "UPDATE " # 末尾にスペース
    │   │               elif event == "delete":
    │   │                   query += "DELETE " # 末尾にスペース
    │   │               else:
    │   │                   raise Exception(f"使えない引数:{event} を指定しています。")
    │   │               query += f"ON {tableName} EACH ROW BIGIN {body} END;"
    │   │               return query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self) -> str:
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncCreateView.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncCreateView(Base):
    │   │           def __init__(
    │   │                   self,
    │   │                   viewName  : str,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               super().__init__(tableName)
    │   │               self.__viewName  = viewName
    │   │               self.__columns   = columns
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def where(self, **conditon):
    │   │               query = f"CREATE VIEW {self.__viewName} AS"
    │   │               con = ""
    │   │               for key, value in conditon.items():
    │   │                   con += f"{key} = {value}"
    │   │               return ...
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── CreateIndex.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class CreateIndex(Base):
    │   │           """インデックス作成クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   indexName : str,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │                   インデックス作成クラス
    │   │                   Args:
    │   │                       indexName (str) : インデックス名
    │   │                       tableName (str) : テーブル名
    │   │                       columns   (str) : カラム(文字列形式)
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"CREATE {indexName} ON {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def exexute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── CreateTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base          import Base          # 基底クラス
    │   │       from ...common       import public        # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class CreateTable(Base):
    │   │           """
    │   │           テーブル作成クラス
    │   │           ※存在する場合も
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │               テーブル作成クラスの初期化
    │   │               Args;
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : CREATE TABLE (...);の...部分
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"CREATE TABLE {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @property
    │   │           @public
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── CreateTableIfNotExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class CreateTableIfNotExists(Base):
    │   │           """テーブル作成クラスの初期化"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               """
    │   │               テーブル作成クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : CREATE TABLE (...);の...部分
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"CREATE TABLE IF NOT EXISTS {tableName} ({columns});"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── CreateTrigger.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base    # 基底クラス
    │   │       from ...common import private # プライベートメソッド
    │   │       from ...common import public  # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class CreateTrigger(Base):
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str,
    │   │                   timing      : str,
    │   │                   event       : str,
    │   │                   body        : str
    │   │               ):
    │   │               """
    │   │               トリガーの作成
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │                   timing      (str) : タイミング BEFORE AFTER
    │   │                   event       (str) : イベント  INSERT UPDATE DELETE
    │   │                   body        (str) : 実行するSQL文
    │   │               Examples:
    │   │                   trigger = User.createTrigger(
    │   │                       "tableName",
    │   │                       "triggerName",
    │   │                       "before | after",
    │   │                       "inser | update | delete",
    │   │                       "SQL文"
    │   │                   )
    │   │                   trigger.execute()
    │   │                   trigger.commit()
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = self.__buildQuery(
    │   │                   tableName   = tableName,
    │   │                   triggerName = triggerName,
    │   │                   timing      = timing,
    │   │                   event       = event,
    │   │                   body        = body
    │   │               )
    │   │           #---------------------------------------------------------------------------
    │   │           @private
    │   │           def __buildQuery(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str,
    │   │                   timing      : str,
    │   │                   event       : str,
    │   │                   body        : str
    │   │               ) -> str:
    │   │               """
    │   │               トリガー作成クエリの作成用のプライベートメソッド
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │                   timing      (str) : タイミング BEFORE AFTER
    │   │                   event       (str) : イベント  INSERT UPDATE DELETE
    │   │                   body        (str) : 実行するSQL文
    │   │               """
    │   │               query = f"CREATE {triggerName} "
    │   │               if timing == "before":
    │   │                   query += "BEFORE " # 末尾にスペース
    │   │               elif timing == "after":
    │   │                   query += "AFTER "  # 末尾にスペース
    │   │               else:
    │   │                   raise Exception(f"使えない引数:{timing} を指定しています。")
    │   │               if event == "insert":
    │   │                   query += "INSERT " # 末尾にスペース
    │   │               elif event == "update":
    │   │                   query += "UPDATE " # 末尾にスペース
    │   │               elif event == "delete":
    │   │                   query += "DELETE " # 末尾にスペース
    │   │               else:
    │   │                   raise Exception(f"使えない引数:{event} を指定しています。")
    │   │               query += f"ON {tableName} EACH ROW BIGIN {body} END;"
    │   │               return query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self) -> str:
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── CreateView.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class CreateView(Base):
    │   │           def __init__(
    │   │                   self,
    │   │                   viewName  : str,
    │   │                   tableName : str,
    │   │                   columns   : str
    │   │               ):
    │   │               super().__init__(tableName)
    │   │               self.__viewName  = viewName
    │   │               self.__columns   = columns
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def where(self, **conditon):
    │   │               query = f"CREATE VIEW {self.__viewName} AS"
    │   │               con = ""
    │   │               for key, value in conditon.items():
    │   │                   con += f"{key} = {value}"
    │   │               return ...
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .AsyncCreateIndex            import AsyncCreateIndex
    │   │       from .AsyncCreateTable            import AsyncCreateTable
    │   │       from .AsyncCreateTable            import AsyncCreateTable
    │   │       from .AsyncCreateTableIfNotExists import AsyncCreateTableIfNotExists
    │   │       from .AsyncCreateTrigger          import AsyncCreateTrigger
    │   │       from .AsyncCreateView             import AsyncCreateView
    │   │       from .CreateIndex                 import CreateIndex
    │   │       from .CreateTable                 import CreateTable
    │   │       from .CreateTableIfNotExists      import CreateTableIfNotExists
    │   │       from .CreateTrigger               import CreateTrigger
    │   │       from .CreateView                  import CreateView
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "AsyncCreateIndex",
    │   │           "AsyncCreateTable",
    │   │           "AsyncCreateTable",
    │   │           "AsyncCreateTableIfNotExists",
    │   │           "AsyncCreateTrigger",
    │   │           "AsyncCreateView",
    │   │           "CreateIndex",
    │   │           "CreateTable",
    │   │           "CreateTableIfNotExists",
    │   │           "CreateTrigger",
    │   │           "CreateView"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── [drop]
    │   │   ├── AsyncDropIndex.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropIndex(AsyncBase):
    │   │           """インデックス削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   indexName : str
    │   │               ):
    │   │               """
    │   │               インデックス削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   indexName (str) : インデックス名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP INDEX {indexName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropIndexIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropIndexIfExists(AsyncBase):
    │   │           """インデックス削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   indexName : str
    │   │               ):
    │   │               """
    │   │               インデックス削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   indexName (str) : インデックス名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP INDEX IF NOT EXISTS{indexName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropTable(AsyncBase):
    │   │           """テーブル削除クラス"""
    │   │           def __init__(self, tableName: str):
    │   │               """
    │   │               テーブル削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TABLE {self.tableName}"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropTableIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropTableIfExists(AsyncBase):
    │   │           """テーブル削除クラス"""
    │   │           def __init__(self, tableName: str):
    │   │               """
    │   │               テーブル削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TABLE IF NOT EXISTS {self.tableName}"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropTrigger.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropTrigger(AsyncBase):
    │   │           """トリガー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str
    │   │               ):
    │   │               """
    │   │               トリガー削除クラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TRIGGER {triggerName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropTriggerIfNotExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropTriggerIfNotExists(AsyncBase):
    │   │           """トリガー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str
    │   │               ):
    │   │               """
    │   │               トリガー削除クラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TRIGGER IF NOT EXISTS {triggerName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropView.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropView(AsyncBase):
    │   │           """ビュー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   viewName  : str
    │   │               ):
    │   │               """
    │   │               ビュー削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   vieName   (str) : 削除するビュー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP VIEW {viewName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncDropViewIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase   # 基底クラス
    │   │       from ...common   import public      # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDropViewIfExists(AsyncBase):
    │   │           """ビュー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   viewName  : str
    │   │               ):
    │   │               """
    │   │               ビュー削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   vieName   (str) : 削除するビュー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP VIEW IF NOT EXISTS {viewName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               await self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropIndex.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropIndex(Base):
    │   │           """インデックス削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   indexName : str
    │   │               ):
    │   │               """
    │   │               インデックス削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   indexName (str) : インデックス名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP INDEX {indexName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropIndexIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropIndexIfExists(Base):
    │   │           """インデックス削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   indexName : str
    │   │               ):
    │   │               """
    │   │               インデックス削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   indexName (str) : インデックス名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP INDEX IF NOT EXISTS{indexName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropTable.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropTable(Base):
    │   │           """テーブル削除クラス"""
    │   │           def __init__(self, tableName: str):
    │   │               """
    │   │               テーブル削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TABLE {self.tableName}"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropTableIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropTableIfExists(Base):
    │   │           """テーブル削除クラス"""
    │   │           def __init__(self, tableName: str):
    │   │               """
    │   │               テーブル削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TABLE IF NOT EXISTS {self.tableName}"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropTrigger.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropTrigger(Base):
    │   │           """トリガー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str
    │   │               ):
    │   │               """
    │   │               トリガー削除クラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TRIGGER {triggerName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropTriggerIfNotExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropTriggerIfNotExists(Base):
    │   │           """トリガー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName   : str,
    │   │                   triggerName : str
    │   │               ):
    │   │               """
    │   │               トリガー削除クラスの初期化
    │   │               Args:
    │   │                   tableName   (str) : テーブル名
    │   │                   triggerName (str) : トリガー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP TRIGGER IF NOT EXISTS {triggerName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropView.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropView(Base):
    │   │           """ビュー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   viewName  : str
    │   │               ):
    │   │               """
    │   │               ビュー削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   vieName   (str) : 削除するビュー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP VIEW {viewName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DropViewIfExists.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DropViewIfExists(Base):
    │   │           """ビュー削除クラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   viewName  : str
    │   │               ):
    │   │               """
    │   │               ビュー削除クラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   vieName   (str) : 削除するビュー名
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"DROP VIEW IF NOT EXISTS {viewName};"
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               self.sqlEngine.execute(self.__query)
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .AsyncDropIndex                import AsyncDropIndex
    │   │       from .AsyncDropIndexIfExists        import AsyncDropIndexIfExists
    │   │       from .AsyncDropTable                import AsyncDropTable
    │   │       from .AsyncDropTableIfExists        import AsyncDropTableIfExists
    │   │       from .AsyncDropTrigger              import AsyncDropTrigger
    │   │       from .AsyncDropTriggerIfNotExists   import AsyncDropTriggerIfNotExists
    │   │       from .AsyncDropView                 import AsyncDropView
    │   │       from .AsyncDropViewIfExists         import AsyncDropViewIfExists
    │   │       from .DropIndex                     import DropIndex
    │   │       from .DropIndexIfExists             import DropIndexIfExists
    │   │       from .DropTable                     import DropTable
    │   │       from .DropTableIfExists             import DropTableIfExists
    │   │       from .DropTrigger                   import DropTrigger
    │   │       from .DropTriggerIfNotExists        import DropTriggerIfNotExists
    │   │       from .DropView                      import DropView
    │   │       from .DropViewIfExists              import DropViewIfExists
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "AsyncDropIndex",
    │   │           "AsyncDropIndexIfExists",
    │   │           "AsyncDropTable",
    │   │           "AsyncDropTableIfExists",
    │   │           "AsyncDropTrigger",
    │   │           "AsyncDropTriggerIfNotExists",
    │   │           "AsyncDropView",
    │   │           "AsyncDropViewIfExists",
    │   │           "DropIndex",
    │   │           "DropIndexIfExists",
    │   │           "DropTable",
    │   │           "DropTableIfExists",
    │   │           "DropTrigger",
    │   │           "DropTriggerIfNotExists",
    │   │           "DropView",
    │   │           "DropViewIfExists"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── [record]
    │   │   ├── AsyncDeleteRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncDeleteRecord(AsyncBase):
    │   │           """
    │   │           レコード削除クラス
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   values    : tuple
    │   │               ):
    │   │               """
    │   │               レコード削除のクラスの初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"DELETE FROM {self.tableName} WHERE {columns}"
    │   │               # プレイスホルダーをSQLによって置き換える
    │   │               self.__query = self.__query.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncInsertRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncInsertRecord(AsyncBase):
    │   │           """
    │   │           レコードを挿入するクラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │                   placeHolders : str
    │   │               ):
    │   │               """
    │   │               レコード挿入の初期化
    │   │               Args:
    │   │                   tableName    (str)   : テーブル名
    │   │                   columns      (str)   : カラム(str) id, name, age
    │   │                   values       (tuple) : 値 1, "name", 19
    │   │                   placeHolders (str)   : プレイスホルダー
    │   │               """
    │   │               # オーバーロード
    │   │               super().__init__(tableName)
    │   │               # プレイスホルダーをSQLによって変える
    │   │               placeHolders = placeHolders.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # クエリ
    │   │               self.__query = f"INSERT INTO {self.tableName} "\
    │   │                            + f"({columns}) VALUES ({placeHolders});"
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncInsertRecords.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncInsertRecords(AsyncBase):
    │   │           """
    │   │           レコードを複数挿入するクラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   data         : list[tuple[str]],
    │   │                   placeHolders : str
    │   │               ):
    │   │               """
    │   │               レコード挿入の初期化
    │   │               Args:
    │   │                   tableName    (str)              : テーブル名
    │   │                   columns      (str)              : カラム(str) id, name, age
    │   │                   data         (list[tuple[str]]) : 値
    │   │                                                     [(1,  2,  3 ),
    │   │                                                      (a,  b,  c ),
    │   │                                                      (19, 22, 17)]
    │   │                   placeHolders (str)              : プレイスホルダー
    │   │               """
    │   │               # オーバーロード
    │   │               super().__init__(tableName)
    │   │               # プレイスホルダーをSQLによって変える
    │   │               placeHolders = placeHolders.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # クエリ
    │   │               self.__query = f"INSERT INTO {self.tableName} "\
    │   │                            + f"({columns}) VALUES ({placeHolders});"
    │   │               # 値
    │   │               self.__data = data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def data(self):
    │   │               """値"""
    │   │               return self.__data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def execute(self):
    │   │               return await super().executeAny(self.__query, self.__data)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncUpdateRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncUpdateRecord(AsyncBase):
    │   │           """
    │   │           レコード更新クラス
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │               ):
    │   │               """
    │   │               レコード更新の初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__columns = columns # カラム
    │   │               self.__values  = values  # 値
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           async def where(self, **conditionsColumn):
    │   │               """
    │   │               指定したレコードを更新するメソッド
    │   │               Args:
    │   │                   **conditionsColumn (str) : 更新したい条件カラムを指定
    │   │               Examples:
    │   │                   user = User.updateRecord(name = "a", age = 20)
    │   │                   user.where(id = 1) ※複数条件は指定できない
    │   │                   user.execute()
    │   │                   user.commit()
    │   │               Returns:
    │   │                   Where : 条件指定クラスを返す
    │   │               """
    │   │               conditions = ""
    │   │               for key, value in conditionsColumn.items():
    │   │                   conditions    += f"{key} = ?"
    │   │                   self.__values += tuple(str(value))
    │   │               return Where(
    │   │                   tableName    = self.tableName, # テーブル名
    │   │                   columns      = self.__columns, # カラム
    │   │                   values       = self.__values,  # 値
    │   │                   conditions   = conditions,     # 条件カラム
    │   │               )
    │   │       #-------------------------------------------------------------------------------
    │   │       class Where(AsyncBase):
    │   │           """
    │   │           条件クラス(UpdateRecord用)
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │                   conditions   : str,
    │   │               ) -> None:
    │   │               """
    │   │               条件クラスの初期化
    │   │               Args:
    │   │                   tableName  (str)   : テーブル名
    │   │                   columns    (str)   : 更新するカラム
    │   │                   values     (tuple) : 値
    │   │                   conditions (str)   : 条件のカラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"UPDATE {tableName} SET {columns} WHERE {conditions};"
    │   │               # プレイスホルダーをSQLによって変更
    │   │               self.__query = self.__query.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               return super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── AsyncUpdateRecords.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..AsyncBase import AsyncBase # 基底クラス
    │   │       from ...common   import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class AsyncUpdateRecords(AsyncBase):
    │   │           """
    │   │           複数レコード更新クラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   data      : list[tuple[str]]
    │   │               ):
    │   │               """
    │   │               複数レコード更新の初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__columns   = columns
    │   │               self.__data      = data
    │   │           #---------------------------------------------------------------------------
    │   │           @ public
    │   │           async def where(self, **conditionsColumn):
    │   │               """
    │   │               指定したレコードを更新するメソッド
    │   │               Args:
    │   │                   **conditionsColumns : 更新したい条件カラムを指定する
    │   │               Examples:
    │   │                   user = User.updateRecords(
    │   │                       name = ["a","b","c"], age = [20,22,24]
    │   │                   ).where(id = [1,2,3]) ※whereも忘れずに
    │   │                   user.execute()
    │   │                   user.commit()
    │   │               Returns:
    │   │                   Where : 条件指定クラスを返す
    │   │               """
    │   │               conditions = "" # 条件文
    │   │               datas      = [] # 値のリスト(最終的にタプルにする)
    │   │               # 成型
    │   │               for key, values in conditionsColumn.items():
    │   │                   conditions += f"{key} = ?"
    │   │                   # プレイスホルダーで使用できるようにする
    │   │                   for i in range(len(values)):
    │   │                       data = list(self.__data[i]) # appendできるようにリスト型に変更
    │   │                       data.append(values[i])      # プレイスホルダーで使用できるように
    │   │                                                   # 末尾にデータを足す
    │   │                       datas.append(tuple(data))   # タプル型に変更し、リストに加える
    │   │               print(datas)
    │   │               return Where(
    │   │                   tableName  = self.tableName, # テーブル名
    │   │                   columns    = self.__columns, # カラム
    │   │                   data       = datas,          # 値
    │   │                   conditions = conditions,     # 条件
    │   │               )
    │   │       #-------------------------------------------------------------------------------
    │   │       class Where(AsyncBase):
    │   │           """
    │   │           条件クラス(UpdateRecords用)
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName  : str,
    │   │                   columns    : str,
    │   │                   data       : list[tuple[str]],
    │   │                   conditions : str,
    │   │       
    │   │               ) -> None:
    │   │               """
    │   │               条件クラスの初期化
    │   │               Args:
    │   │                   tableName  (str)              : テーブル名
    │   │                   columns    (str)              : 更新するカラム
    │   │                   values     (list[tuple[str]]) : 値
    │   │                   conditions (str)              : 条件のカラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"UPDATE {tableName} SET {columns}" \
    │   │                            + f"WHERE {conditions};"
    │   │               # プレイスホルダーをSQLによって置き換える
    │   │               self.__query = self.__query.replace("?", self.sqlEngine.PLACEHOLDER)
    │   │               # 値
    │   │               self.__data = data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__data
    │   │           #---------------------------------------------------------------------------
    │   │           async def execute(self):
    │   │               return await super().executeAny(self.__query, self.__data)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── DeleteRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class DeleteRecord(Base):
    │   │           """
    │   │           レコード削除クラス
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   values    : tuple
    │   │               ):
    │   │               """
    │   │               レコード削除のクラスの初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"DELETE FROM {self.tableName} WHERE {columns}"
    │   │               # プレイスホルダーをSQLによって置き換える
    │   │               self.__query = self.__query.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── InsertRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class InsertRecord(Base):
    │   │           """
    │   │           レコードを挿入するクラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │                   placeHolders : str
    │   │               ):
    │   │               """
    │   │               レコード挿入の初期化
    │   │               Args:
    │   │                   tableName    (str)   : テーブル名
    │   │                   columns      (str)   : カラム(str) id, name, age
    │   │                   values       (tuple) : 値 1, "name", 19
    │   │                   placeHolders (str)   : プレイスホルダー
    │   │               """
    │   │               # オーバーロード
    │   │               super().__init__(tableName)
    │   │               # プレイスホルダーをSQLによって変える
    │   │               placeHolders = placeHolders.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # クエリ
    │   │               self.__query = f"INSERT INTO {self.tableName} "\
    │   │                            + f"({columns}) VALUES ({placeHolders});"
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── InsertRecords.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class InsertRecords(Base):
    │   │           """
    │   │           レコードを複数挿入するクラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   data         : list[tuple[str]],
    │   │                   placeHolders : str
    │   │               ):
    │   │               """
    │   │               レコード挿入の初期化
    │   │               Args:
    │   │                   tableName    (str)              : テーブル名
    │   │                   columns      (str)              : カラム(str) id, name, age
    │   │                   data         (list[tuple[str]]) : 値
    │   │                                                     [(1,  2,  3 ),
    │   │                                                      (a,  b,  c ),
    │   │                                                      (19, 22, 17)]
    │   │                   placeHolders (str)              : プレイスホルダー
    │   │               """
    │   │               # オーバーロード
    │   │               super().__init__(tableName)
    │   │               # プレイスホルダーをSQLによって変える
    │   │               placeHolders = placeHolders.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # クエリ
    │   │               self.__query = f"INSERT INTO {self.tableName} "\
    │   │                            + f"({columns}) VALUES ({placeHolders});"
    │   │               # 値
    │   │               self.__data = data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def data(self):
    │   │               """値"""
    │   │               return self.__data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().executeAny(self.__query, self.__data)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── UpdateRecord.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base   # 基底クラス
    │   │       from ...common import public # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class UpdateRecord(Base):
    │   │           """
    │   │           レコード更新クラス
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │               ):
    │   │               """
    │   │               レコード更新の初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__columns = columns # カラム
    │   │               self.__values  = values  # 値
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def where(self, **conditionsColumn):
    │   │               """
    │   │               指定したレコードを更新するメソッド
    │   │               Args:
    │   │                   **conditionsColumn (str) : 更新したい条件カラムを指定
    │   │               Examples:
    │   │                   user = User.updateRecord(name = "a", age = 20)
    │   │                   user.where(id = 1) ※複数条件は指定できない
    │   │                   user.execute()
    │   │                   user.commit()
    │   │               Returns:
    │   │                   Where : 条件指定クラスを返す
    │   │               """
    │   │               conditions = ""
    │   │               for key, value in conditionsColumn.items():
    │   │                   conditions    += f"{key} = ?"
    │   │                   self.__values += tuple(str(value))
    │   │               return Where(
    │   │                   tableName    = self.tableName, # テーブル名
    │   │                   columns      = self.__columns, # カラム
    │   │                   values       = self.__values,  # 値
    │   │                   conditions   = conditions,     # 条件カラム
    │   │               )
    │   │       #-------------------------------------------------------------------------------
    │   │       class Where(Base):
    │   │           """
    │   │           条件クラス(UpdateRecord用)
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName    : str,
    │   │                   columns      : str,
    │   │                   values       : tuple,
    │   │                   conditions   : str,
    │   │               ) -> None:
    │   │               """
    │   │               条件クラスの初期化
    │   │               Args:
    │   │                   tableName  (str)   : テーブル名
    │   │                   columns    (str)   : 更新するカラム
    │   │                   values     (tuple) : 値
    │   │                   conditions (str)   : 条件のカラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"UPDATE {tableName} SET {columns} WHERE {conditions};"
    │   │               # プレイスホルダーをSQLによって変更
    │   │               self.__query = self.__query.replace(
    │   │                   "?", self.sqlEngine.PLACEHOLDER
    │   │               )
    │   │               # 値
    │   │               self.__values = values
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__values
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               return super().execute(self.__query, self.__values)
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── UpdateRecords.py
    │   │       ↓ 内容（最大10000行）
    │   │       
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base          # 基底クラス
    │   │       from ...common import public        # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class UpdateRecords(Base):
    │   │           """
    │   │           複数レコード更新クラス
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   data      : list[tuple[str]]
    │   │               ):
    │   │               """
    │   │               複数レコード更新の初期化
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__columns   = columns
    │   │               self.__data      = data
    │   │           #---------------------------------------------------------------------------
    │   │           @ public
    │   │           def where(self, **conditionsColumn):
    │   │               """
    │   │               指定したレコードを更新するメソッド
    │   │               Args:
    │   │                   **conditionsColumns : 更新したい条件カラムを指定する
    │   │               Examples:
    │   │                   user = User.updateRecords(
    │   │                       name = ["a","b","c"], age = [20,22,24]
    │   │                   ).where(id = [1,2,3]) ※whereも忘れずに
    │   │                   user.execute()
    │   │                   user.commit()
    │   │               Returns:
    │   │                   Where : 条件指定クラスを返す
    │   │               """
    │   │               conditions = "" # 条件文
    │   │               datas      = [] # 値のリスト(最終的にタプルにする)
    │   │               # 成型
    │   │               for key, values in conditionsColumn.items():
    │   │                   conditions += f"{key} = ?"
    │   │                   # プレイスホルダーで使用できるようにする
    │   │                   for i in range(len(values)):
    │   │                       data = list(self.__data[i]) # appendできるようにリスト型に変更
    │   │                       data.append(values[i])      # プレイスホルダーで使用できるように
    │   │                                                   # 末尾にデータを足す
    │   │                       datas.append(tuple(data))   # タプル型に変更し、リストに加える
    │   │               print(datas)
    │   │               return Where(
    │   │                   tableName  = self.tableName, # テーブル名
    │   │                   columns    = self.__columns, # カラム
    │   │                   data       = datas,          # 値
    │   │                   conditions = conditions,     # 条件
    │   │               )
    │   │       #-------------------------------------------------------------------------------
    │   │       class Where(Base):
    │   │           """
    │   │           条件クラス(UpdateRecords用)
    │   │           """
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName  : str,
    │   │                   columns    : str,
    │   │                   data       : list[tuple[str]],
    │   │                   conditions : str,
    │   │       
    │   │               ) -> None:
    │   │               """
    │   │               条件クラスの初期化
    │   │               Args:
    │   │                   tableName  (str)              : テーブル名
    │   │                   columns    (str)              : 更新するカラム
    │   │                   values     (list[tuple[str]]) : 値
    │   │                   conditions (str)              : 条件のカラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               # クエリ
    │   │               self.__query = f"UPDATE {tableName} SET {columns}" \
    │   │                            + f"WHERE {conditions};"
    │   │               # プレイスホルダーをSQLによって置き換える
    │   │               self.__query = self.__query.replace("?", self.sqlEngine.PLACEHOLDER)
    │   │               # 値
    │   │               self.__data = data
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           @property
    │   │           def values(self):
    │   │               """値"""
    │   │               return self.__data
    │   │           #---------------------------------------------------------------------------
    │   │           def execute(self):
    │   │               return super().executeAny(self.__query, self.__data)
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .AsyncDeleteRecord     import AsyncDeleteRecord
    │   │       from .AsyncInsertRecord     import AsyncInsertRecord
    │   │       from .AsyncInsertRecords    import AsyncInsertRecords
    │   │       from .AsyncUpdateRecord     import AsyncUpdateRecord
    │   │       from .AsyncUpdateRecords    import AsyncUpdateRecords
    │   │       from .DeleteRecord          import DeleteRecord
    │   │       from .InsertRecord          import InsertRecord
    │   │       from .InsertRecords         import InsertRecords
    │   │       from .UpdateRecord          import UpdateRecord
    │   │       from .UpdateRecords         import UpdateRecords
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "AsyncDeleteRecord",
    │   │           "AsyncInsertRecord",
    │   │           "AsyncInsertRecords",
    │   │           "AsyncUpdateRecord",
    │   │           "AsyncUpdateRecords",
    │   │           "DeleteRecord",
    │   │           "InsertRecord",
    │   │           "InsertRecords",
    │   │           "UpdateRecord",
    │   │           "UpdateRecords"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── [select]
    │   │   ├── GroupBy.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base import Base
    │   │       #-------------------------------------------------------------------------------
    │   │       class GroupBy(Base):
    │   │           """
    │   │               SQLのGROUP BY構文を構築・実行するクラス
    │   │               Parameters:
    │   │                   tableName (str) : 対象のテーブル名
    │   │                   columns   (str) : 取得するカラム（例: "name, COUNT(*)"）
    │   │                   condition (str) : WHERE句で使用する条件（空文字で無条件）
    │   │                   byColumn  (str) : GROUP BYでグループ化する列名
    │   │               Attributes:
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : SELECT対象のカラム
    │   │                   condition (str) : 条件式（※綴りミスがあるため注意）
    │   │                   byColumn  (str) : GROUP BYの対象列
    │   │           """
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   condition : str,
    │   │                   byColumn  : str
    │   │               ):
    │   │               super().__init__(tableName)
    │   │               self.tableName = tableName
    │   │               self.columns   = columns
    │   │               self.condition = condition
    │   │               self.byColumn  = byColumn
    │   │           #---------------------------------------------------------------------------
    │   │           def getRecord(self):
    │   │               """
    │   │                   GROUP BY構文を用いてレコードを取得する
    │   │                   Returns:
    │   │                       List[Tuple] : グループ化されたクエリの結果一覧
    │   │                   Raises:
    │   │                       DatabaseConnectionError : 実行時にDB接続エラーが発生した場合
    │   │               """
    │   │               # 基本となるクエリ
    │   │               query = f"SELECT {self.columns} FROM {self.tableName} "
    │   │               # 条件が存在するなら
    │   │               if self.condition == "":
    │   │                   query += f"GROUP BY {self.byColumn};"
    │   │               # 条件が存在しないなら
    │   │               else:
    │   │                   query += f"WHERE {self.condition} GROUP BY {self.byColumn};"
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           def having(self, aggregate):
    │   │               """
    │   │                   GROUP BY + HAVING構文を用いて集計条件付きレコードを取得する
    │   │                   Parameters:
    │   │                       aggregate (Column) : HAVING句で使用する集計関数付きカラム
    │   │                                            例: Column("COUNT(*) > 1")
    │   │                   Returns:
    │   │                       List[Tuple] : HAVING句適用後のクエリ結果一覧
    │   │                   Raises:
    │   │                       DatabaseConnectionError : 実行時にDB接続エラーが発生した場合
    │   │               """
    │   │               # 基本となるクエリ
    │   │               query = f"SELECT {self.columns} FROM {self.tableName} "
    │   │               # 条件が存在するなら
    │   │               if self.condition == "":
    │   │                   query += f"GROUP BY {self.byColumn} "
    │   │               # 条件が存在しないなら
    │   │               else:
    │   │                   query += f"WHERE {self.condition} GROUP BY {self.byColumn} "
    │   │               # HAVING句を足す
    │   │               query += f"HAVING {aggregate.columnName};"
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(query)
    │   │               return cur.fetchall()
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── Select.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base        import Base           # ベース
    │   │       from .GroupBy      import GroupBy        # GROUP BY
    │   │       from .Where        import Where          # WHERE
    │   │       from ...column     import Column         # カラムクラス
    │   │       from ...conditions import Condition      # 条件クラス
    │   │       from ...conditions import ConditionGroup # 複数条件クラス
    │   │       from ...common     import public         # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class Select(Base):
    │   │           """SELECTクラス"""
    │   │           #---------------------------------------------------------------------------
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName  : str,
    │   │                   columns    : str,
    │   │               ) -> None:
    │   │               """"
    │   │               SELECTクラスの初期化
    │   │               Args:
    │   │                   tableName (str) : テーブル名
    │   │                   columns   (str) : カラム
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__columns = columns
    │   │               self.__query   = ""
    │   │           #---------------------------------------------------------------------------
    │   │           @property
    │   │           @public
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getRecord(self) -> list:
    │   │               """
    │   │               指定したカラムの全てのレコードを取得する
    │   │               Returns:
    │   │                   List : クエリ結果のレコードリスト
    │   │               """
    │   │               # クエリ
    │   │               self.__query = f"SELECT {self.__columns} FROM {self.tableName};"
    │   │               # クエリから結果を取得する
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getAllRecord(self) -> list:
    │   │               """
    │   │               テーブル内の全カラムの全てのレコードを取得する
    │   │               Returns:
    │   │                   List : クエリ結果のレコードリスト
    │   │               """
    │   │               # クエリ
    │   │               self.__query = f"SELECT * FROM {self.tableName};"
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def where(
    │   │                   self,
    │   │                   *condition : Condition | ConditionGroup
    │   │               )-> Where:
    │   │               """
    │   │               WHERE句
    │   │               Args:
    │   │                   *condition (Condition | ConditionGroup) : 条件
    │   │               Examples:
    │   │                   engine = Engine(...)
    │   │                   engine.launch()
    │   │                   user   = engine.select(User, User.id, User.name)
    │   │                   result = user.where((User.age >= 20) & (User.age <= 29)).fetchall()
    │   │               """
    │   │               placeHolder = self.sqlEngine.PLACEHOLDER
    │   │               parts  = []
    │   │               values = []
    │   │               for cond in condition:
    │   │                   sql, vals = cond.toSql(placeHolder)
    │   │                   parts.append(sql)
    │   │                   values.extend(vals)
    │   │               whereClause = " AND ".join(parts)
    │   │               values = tuple(values)
    │   │               return Where(
    │   │                   tableName = self.tableName,
    │   │                   columns   = self.__columns,
    │   │                   condition = whereClause,
    │   │                   value     = values
    │   │               )
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def orderBy(
    │   │                   self,
    │   │                   asc  : Column | None = None, # 昇順
    │   │                   desc : Column | None = None, # 降順
    │   │               ) -> list:
    │   │               """
    │   │               データを昇順・降順で並び替える
    │   │               Args:
    │   │                   asc  (Column) : 昇順にソートするカラム
    │   │                   desc (Column) : 降順にソートするカラム
    │   │               Returns:
    │   │                   list : 並び替え後のレコードリスト
    │   │               """
    │   │               query = f"SELECT {self.__columns} FROM {self.tableName} "
    │   │               # ASCが未指定かつ, DESCが未指定
    │   │               if asc is None and desc is None:
    │   │                   raise Exception("ascまたはdescのいずれかを指定してください")
    │   │               # ASCが未指定かつ, DESCが指定されている
    │   │               if asc is None and not desc is None:
    │   │                   query += f"ORDER BY {desc.columnName} DESC;"
    │   │                # ASCが指定されている, かつDESCが未指定
    │   │               if not asc is None and desc is None:
    │   │                   query += f"ORDER BY {asc.columnName} ASC;"
    │   │                # ASCが指定されている, かつDESCがされている
    │   │               if not desc is None and not asc is None:
    │   │                   query += f"ORDER BY {asc.columnName} ASC, {desc.columnName} DESC;"
    │   │               cur = self.cursor()
    │   │               cur.execute(query)
    │   │               self.__query = query
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def limitOffset(
    │   │                   self,
    │   │                   limit  : int,
    │   │                   offset : int
    │   │               ) -> list:
    │   │               """
    │   │               LIMITとOFFSETを使ってページネーションされたレコードを取得する
    │   │               Args:
    │   │                   limit  (int) : 最大取得件数
    │   │                   offset (int) : 取得開始位置
    │   │               Returns:
    │   │                   list : クエリ結果の一部
    │   │               """
    │   │               #クエリ
    │   │               query = f"SELECT {self.__columns} " \
    │   │                     + f"FROM {self.tableName} " \
    │   │                     + f"LIMIT {limit} OFFSET {offset}"
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(query)
    │   │               self.__query = query
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def count(self):
    │   │               """
    │   │               レコード件数を取得する
    │   │               Returns:
    │   │                   int : 件数のタプル
    │   │               """
    │   │               # クエリ
    │   │               self.__query = f"SELECT COUNT(*) " \
    │   │                            + f"FROM {self.tableName} "
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getAvg(
    │   │                   self,
    │   │                   column : Column
    │   │               ):
    │   │               """
    │   │               指定列の平均値を取得する
    │   │               Returns:
    │   │                   List[Tuple] : 平均値のタプル (例: [(34.5,)])
    │   │               """
    │   │               self.__query = f"SELECT AVG({column.columnName}) " \
    │   │                            + f"FROM {self.tableName} "
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getSum(
    │   │                   self,
    │   │                   column : Column
    │   │               ):
    │   │               """
    │   │               指定列の合計値を取得する
    │   │               Args:
    │   │                   column (Column) : 対象カラム
    │   │               Returns:
    │   │                   List[Tuple] : 合計値のタプル
    │   │               """
    │   │               self.__query = f"SELECT SUM({column.columnName}) " \
    │   │                            + f"FROM {self.tableName} "
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getMax(
    │   │                   self,
    │   │                   column : Column
    │   │               ):
    │   │               """
    │   │               指定列の最大値を取得する
    │   │               Args:
    │   │                   column (Column) : 対象カラム
    │   │               Returns:
    │   │                   List[Tuple] : 最大値のタプル
    │   │               """
    │   │               self.__query = f"SELECT Max({column.columnName}) " \
    │   │                            + f"FROM {self.tableName} "
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def getMin(
    │   │                   self,
    │   │                   column : Column
    │   │               ):
    │   │               """
    │   │               指定列の最小値を取得する
    │   │               Args:
    │   │                   column (Column) : 対象カラム
    │   │               Returns:
    │   │                   List[Tuple] : 最小値のタプル
    │   │               """
    │   │               self.__query = f"SELECT Min({column.columnName}) " \
    │   │                            + f"FROM {self.tableName} "
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.__query)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def groupBy(
    │   │                   self,
    │   │                   column : Column  # グループ化する列
    │   │               ):
    │   │               """
    │   │               指定列でGROUP BYを実行する
    │   │               Args:
    │   │                   column (Column) : グループ化対象のカラム
    │   │               Returns:
    │   │                   GroupBy : グループ化クエリオブジェクト
    │   │               """
    │   │               return GroupBy(
    │   │                   tableName = self.tableName,
    │   │                   columns   = self.__columns,
    │   │                   condition = "",
    │   │                   byColumn  = column.columnName
    │   │               )
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def whereGroupBy(
    │   │                   self,
    │   │                   condition, # 条件
    │   │                   column : Column  # グループ化する列
    │   │               ):
    │   │               """
    │   │               WHERE + GROUP BY句による条件付きグループ化
    │   │               Args:
    │   │                   condition (str) : WHERE条件式
    │   │                   column    (Column) : グループ化対象のカラム
    │   │               Returns:
    │   │                   GroupBy : グループ化クエリオブジェクト
    │   │               """
    │   │               return GroupBy(
    │   │                   tableName = self.tableName,
    │   │                   columns   = self.__columns,
    │   │                   condition = condition,
    │   │                   byColumn  = column.columnName
    │   │               )
    │   │       #-------------------------------------------------------------------------------
    │   │   ├── Where.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from ..Base    import Base # 基底クラス
    │   │       from ...common import public    # パブリックメソッド
    │   │       #-------------------------------------------------------------------------------
    │   │       class Where(Base):
    │   │           """WHEREクラス"""
    │   │           def __init__(
    │   │                   self,
    │   │                   tableName : str,
    │   │                   columns   : str,
    │   │                   condition : str,
    │   │                   value     : tuple
    │   │               ):
    │   │               """
    │   │               WHEREクラスの初期化
    │   │                   tableName (str)   : テーブル名
    │   │                   columns   (str)   : カラム
    │   │                   condition (str)   : 条件
    │   │                   value     (tuple) : 値
    │   │               """
    │   │               super().__init__(tableName)
    │   │               self.__query = f"SELECT {columns} " \
    │   │                            + f"FROM {self.tableName} WHERE {condition};"
    │   │               self.__value = value
    │   │           #---------------------------------------------------------------------------
    │   │           @property
    │   │           @public
    │   │           def query(self):
    │   │               """クエリ"""
    │   │               return self.__query
    │   │           #---------------------------------------------------------------------------
    │   │           @property
    │   │           @public
    │   │           def value(self):
    │   │               """値"""
    │   │               return self.__value
    │   │           #---------------------------------------------------------------------------
    │   │           def inSubQuery(self, subQuery):
    │   │               query  = self.__query[:-1]
    │   │               sQuery = subQuery[:-1]
    │   │               query += f" IN ({sQuery});"
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(query, self.__value)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def fetchall(self):
    │   │               """
    │   │       
    │   │               """
    │   │               cur = self.sqlEngine.cursor()
    │   │               cur.execute(self.query, self.__value)
    │   │               return cur.fetchall()
    │   │           #---------------------------------------------------------------------------
    │   │           @public
    │   │           def execute(self):
    │   │               return super().execute(self.query, self.__value)
    │   │       #-------------------------------------------------------------------------------
    │   │   └── __init__.py
    │   │       ↓ 内容（最大10000行）
    │   │       #-------------------------------------------------------------------------------
    │   │       from .GroupBy import GroupBy
    │   │       from .Select  import Select
    │   │       from .Where   import Where
    │   │       #-------------------------------------------------------------------------------
    │   │       __all__ = [
    │   │           "GroupBy",
    │   │           "Select",
    │   │           "Where"
    │   │       ]
    │   │       #-------------------------------------------------------------------------------
    │   ├── AsyncBase.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common import public  # パブリックメソッド
    │       from ..config import Config  # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class AsyncBase:
    │           """
    │           データベース操作マネージャークラスにおける基底クラス
    │           """
    │           def __init__(self, tableName : str):
    │               """初期化"""
    │               self.tableName = tableName
    │           #---------------------------------------------------------------------------
    │           @property
    │           @public
    │           def sqlEngine(self):
    │               """sqlエンジンの設定"""
    │               engine = Config.asyncSqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def connect(self):
    │               """コネクト"""
    │               await self.sqlEngine.connect()
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def cursor(self):
    │               """カーソル"""
    │               return await self.sqlEngine.cursor()
    │       
    │           # #---------------------------------------------------------------------------
    │           @public
    │           async def execute(self, query : str, value : tuple = ()):
    │               """クエリの実行"""
    │               await self.sqlEngine.execute(query, value)
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def executeAny(self, query : str, data : list[tuple[str]]):
    │               """複数クエリの実行"""
    │               await self.sqlEngine.executeAny(query, data)
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def commit(self):
    │               """データベースにコミットする"""
    │               await self.sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def transaction(self):
    │               """トランザクション"""
    │               await self.sqlEngine.transaction()
    │           #---------------------------------------------------------------------------
    │           @public
    │           async def rollback(self):
    │               """ロールバック"""
    │               await self.sqlEngine.rollback()
    │           #---------------------------------------------------------------------------
    │           @public
    │           @property
    │           def query(self) -> str:...
    │       #-------------------------------------------------------------------------------
    │   ├── Base.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..common import public  # パブリックメソッド
    │       from ..config import Config  # コンフィグクラス
    │       #-------------------------------------------------------------------------------
    │       class Base:
    │           """
    │           データベース操作マネージャークラスにおける基底クラス
    │           """
    │           def __init__(self, tableName : str):
    │               """初期化"""
    │               self.tableName = tableName
    │           #---------------------------------------------------------------------------
    │           @property
    │           @public
    │           def sqlEngine(self):
    │               """sqlエンジンの設定"""
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           @public
    │           def connect(self):
    │               """コネクト"""
    │               self.sqlEngine.connect()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def cursor(self):
    │               """カーソル"""
    │               return self.sqlEngine.cursor()
    │       
    │           # #---------------------------------------------------------------------------
    │           @public
    │           def execute(self, query : str, value : tuple = ()):
    │               """クエリの実行"""
    │               self.sqlEngine.execute(query, value)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def executeAny(self, query : str, data : list[tuple[str]]):
    │               """複数クエリの実行"""
    │               self.sqlEngine.executeAny(query, data)
    │           #---------------------------------------------------------------------------
    │           @public
    │           def commit(self):
    │               """データベースにコミットする"""
    │               self.sqlEngine.commit()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def transaction(self):
    │               """トランザクション"""
    │               self.sqlEngine.transaction()
    │           #---------------------------------------------------------------------------
    │           @public
    │           def rollback(self):
    │               """ロールバック"""
    │               self.sqlEngine.rollback()
    │           #---------------------------------------------------------------------------
    │           @public
    │           @property
    │           def query(self) -> str:...
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Base          import Base
    │       from .AsyncBase     import AsyncBase
    │       from .alter         import AlterTableAddColumn
    │       from .alter         import AlterTableAddConstraint
    │       from .alter         import AlterTableDropColumn
    │       from .alter         import AlterTableDropConstraint
    │       from .alter         import AlterTableRenameColumn
    │       from .alter         import AlterTableRenameTable
    │       from .alter         import AlterView
    │       from .alter         import AsyncAlterTableAddColumn
    │       from .alter         import AsyncAlterTableAddConstraint
    │       from .alter         import AsyncAlterTableDropColumn
    │       from .alter         import AsyncAlterTableDropConstraint
    │       from .alter         import AsyncAlterTableAddConstraint
    │       from .alter         import AsyncAlterTableRenameColumn
    │       from .alter         import AsyncAlterView
    │       from .create        import AsyncCreateIndex
    │       from .create        import AsyncCreateTable
    │       from .create        import AsyncCreateTableIfNotExists
    │       from .create        import AsyncCreateTrigger
    │       from .create        import AsyncCreateView
    │       from .create        import CreateIndex
    │       from .create        import CreateTable
    │       from .create        import CreateTableIfNotExists
    │       from .create        import CreateTrigger
    │       from .create        import CreateView
    │       from .drop          import AsyncDropIndex
    │       from .drop          import AsyncDropIndexIfExists
    │       from .drop          import AsyncDropTable
    │       from .drop          import AsyncDropTableIfExists
    │       from .drop          import AsyncDropTrigger
    │       from .drop          import AsyncDropTriggerIfNotExists
    │       from .drop          import AsyncDropView
    │       from .drop          import AsyncDropViewIfExists
    │       from .drop          import DropIndex
    │       from .drop          import DropIndexIfExists
    │       from .drop          import DropTable
    │       from .drop          import DropTableIfExists
    │       from .drop          import DropTrigger
    │       from .drop          import DropTriggerIfNotExists
    │       from .drop          import DropView
    │       from .drop          import DropViewIfExists
    │       from .record        import AsyncDeleteRecord
    │       from .record        import AsyncInsertRecord
    │       from .record        import AsyncInsertRecords
    │       from .record        import AsyncUpdateRecord
    │       from .record        import AsyncUpdateRecords
    │       from .record        import DeleteRecord
    │       from .record        import InsertRecord
    │       from .record        import InsertRecords
    │       from .record        import UpdateRecord
    │       from .record        import UpdateRecords
    │       from .select        import GroupBy
    │       from .select        import Where
    │       from .select        import Select
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Base",
    │           "AsyncBase",
    │           "AlterTableAddColumn",
    │           "AlterTableAddConstraint",
    │           "AlterTableDropColumn",
    │           "AlterTableDropConstraint",
    │           "AlterTableRenameColumn",
    │           "AlterTableRenameTable",
    │           "AlterView",
    │           "AsyncAlterTableAddColumn",
    │           "AsyncAlterTableAddConstraint",
    │           "AsyncAlterTableDropColumn",
    │           "AsyncAlterTableDropConstraint",
    │           "AsyncAlterTableRenameColumn",
    │           "AsyncAlterView",
    │           "AsyncCreateIndex",
    │           "AsyncCreateTable",
    │           "AsyncCreateTableIfNotExists",
    │           "AsyncCreateTrigger",
    │           "AsyncCreateView",
    │           "CreateIndex",
    │           "CreateTable",
    │           "CreateTableIfNotExists",
    │           "CreateTrigger",
    │           "CreateView",
    │           "AsyncDropIndex",
    │           "AsyncDropIndexIfExists",
    │           "AsyncDropTable",
    │           "AsyncDropTableIfExists",
    │           "AsyncDropTrigger",
    │           "AsyncDropTriggerIfNotExists",
    │           "AsyncDropView",
    │           "AsyncDropViewIfExists",
    │           "DropIndex",
    │           "DropIndexIfExists",
    │           "DropTable",
    │           "DropTableIfExists",
    │           "DropTrigger",
    │           "DropTriggerIfNotExists",
    │           "DropView",
    │           "DropViewIfExists",
    │           "AsyncDeleteRecord",
    │           "AsyncInsertRecord",
    │           "AsyncInsertRecords",
    │           "AsyncUpdateRecord",
    │           "AsyncUpdateRecords",
    │           "DeleteRecord",
    │           "InsertRecord",
    │           "InsertRecords",
    │           "UpdateRecord",
    │           "UpdateRecords",
    │           "GroupBy",
    │           "Where",
    │           "Select"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [migration]
    │   ├── Migration.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       import os
    │       import sys
    │       import importlib.util
    │       from datetime import datetime
    │       from ..engine import MySqlEngine
    │       from ..engine import Sqlite3Engine
    │       from ..model import Model
    │       from ..common import public
    │       from ..common import private
    │       from ..column import Column
    │       from ..constraints import Unique
    │       from ..datatypes import Integer
    │       from ..datatypes import Text
    │       from ..config import Config
    │       #-------------------------------------------------------------------------------
    │       class Migration:
    │           def __init__(
    │                   self,
    │                   migrationsDir : str
    │               ) -> None:
    │               """
    │               マイグレーションクラスの初期化
    │               Args:
    │                   migrationsDir (str) : マイグレーションディレクトリのパス
    │               """
    │               super().__init__()
    │               self.__migrationsDir = migrationsDir
    │               os.makedirs(migrationsDir, exist_ok = True)
    │               self.__sqlEngine.execute(self.__buildCreateTableSql())
    │               self.__sqlEngine.commit()
    │               print("初期化完了")
    │           #---------------------------------------------------------------------------
    │           @private
    │           def __buildCreateTableSql(self):
    │               query = "CREATE TABLE IF NOT EXISTS migration (" \
    │                   + "id INTEGER PRIMARY KEY auto_increment, " \
    │                   + "name text, applied_at TEXT)"
    │               # MySQLの場合
    │               if isinstance(self.__sqlEngine,MySqlEngine):
    │                   query = query.replace(
    │                       "auto_increment", "AUTO_INCREMENT"
    │                   )
    │                   query = query.replace(
    │                       "text", "VARCHAR(255) UNIQUE"
    │                   )
    │               # SQLite3の場合
    │               elif isinstance(self.__sqlEngine,Sqlite3Engine):
    │                   query = query.replace(
    │                       "auto_increment", "AUTOINCREMENT"
    │                   )
    │                   query = query.replace(
    │                       "text", "TEXT"
    │                   )
    │               else:
    │                   raise Exception("エンジンが未設定です")
    │               return query
    │           #---------------------------------------------------------------------------
    │           @property
    │           @private
    │           def __sqlEngine(self):
    │               """
    │               sqlエンジンの設定
    │               """
    │               engine = Config.sqlEngine
    │               if engine is None:
    │                   raise Exception("エンジンが未設定です")
    │               return engine
    │           #---------------------------------------------------------------------------
    │           def make(self, name : str) -> None:
    │               """
    │               新しいマイグレーションファイルを作成する
    │               Args:
    │                   name (str) : マイグレーション名
    │               """
    │               timeStamp = datetime.now().strftime("%Y%m%d%H%M%S")
    │               fileName  = f"{timeStamp}_{name.replace('', '_')}.py"
    │               filePath  = os.path.join(self.__migrationsDir, fileName)
    │               templete = f"""\
    │       def upgrade(engine):
    │           # ここにスキーマ変更SQLを記述
    │           pass
    │       def downgrade(engine):
    │           # 元に戻すSQLを記述
    │           pass
    │       """
    │               with open(filePath, "w", encoding = "utf-8") as f:
    │                   f.write(templete)
    │               print(f"{filePath}を作成しました")
    │           #---------------------------------------------------------------------------
    │           def history(self) -> list:
    │               """
    │               適用済みのマイグレーション一覧を返す
    │               Returns:
    │                   list[str] : ファイル名のリスト
    │               """
    │               cur = self.__sqlEngine.cursor()
    │               cur.execute("SELECT name FROM migration ORDER BY id")
    │               rows = cur.fetchall()
    │               return []
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Migration import Migration
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Migration"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── [model]
    │   ├── AsyncModel.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .ModelMeta    import ModelMeta
    │       from ..column      import Column
    │       from ..common      import private
    │       from ..common      import public
    │       from ..constraints import Constraints
    │       from ..manager     import Base
    │       from ..manager     import AsyncAlterTableAddColumn
    │       from ..manager     import AsyncAlterTableAddConstraint
    │       from ..manager     import AsyncAlterTableDropColumn
    │       from ..manager     import AsyncAlterTableDropConstraint
    │       from ..manager     import AsyncAlterTableRenameColumn
    │       from ..manager     import AsyncCreateIndex
    │       from ..manager     import AsyncCreateTable
    │       from ..manager     import AsyncCreateTableIfNotExists
    │       from ..manager     import AsyncCreateTrigger
    │       from ..manager     import AsyncCreateView
    │       from ..manager     import AsyncInsertRecord
    │       from ..manager     import AsyncInsertRecords
    │       from ..manager     import AsyncUpdateRecord
    │       from ..manager     import AsyncUpdateRecords
    │       from ..manager     import AsyncDeleteRecord
    │       from ..manager     import AsyncDropIndex
    │       from ..manager     import AsyncDropIndexIfExists
    │       from ..manager     import AsyncDropTable
    │       from ..manager     import AsyncDropTableIfExists
    │       from ..manager     import AsyncDropTrigger
    │       from ..manager     import AsyncDropTriggerIfNotExists
    │       from ..manager     import AsyncDropView
    │       from ..manager     import AsyncDropViewIfExists
    │       from ..manager     import Select
    │       #-------------------------------------------------------------------------------
    │       class Model(metaclass = ModelMeta):
    │           """
    │           モデルクラスの基底クラス。
    │       
    │           Attributes:
    │               tableName (str)                     : テーブル名（クラス名から自動取得）
    │               columns   (list[dict[str, Column]]) : カラム定義のリスト
    │           """
    │       
    │           tableName : str                     # テーブル名
    │           columns   : list[dict[str, Column]] # カラム
    │           #---------------------------------------------------------------------------
    │           # プライベートメソッド
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __parameterColumnsToStrings(cls, columns :tuple[Column, ...]) -> str:
    │               cols = ""
    │               for col in columns:
    │                   cols += col.columnName + ", "
    │               return cols[:-2]
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __columnsToQuery(cls):
    │               """
    │               カラムをSQL文にする
    │               テーブル作成時に使用する
    │               """
    │               cls.__foreignKeyList = [] # 外部キー定義リスト
    │               columnDefineLists    = [] # 各カラム定義
    │               # 各カラム定義をリストに追加
    │               for cols in cls.columns:
    │                   columnSql = cls.__columnsToSql(cols)
    │                   columnDefineLists.append(columnSql)
    │               # 外部キーがある場合、末尾に追加
    │               for fk in cls.__foreignKeyList:
    │                   columnDefineLists.append(fk)
    │               return ", ".join(columnDefineLists)
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __columnsToSql(
    │                   cls,
    │                   columns : dict[str, Column]
    │               ) -> str:
    │               """
    │               カラムをSQL文にする
    │               columnsToQueryでのみ使用するプライベートメソッド
    │               Args:
    │                   columns (dict[str, Column]) : カラム
    │               Returns:
    │                   Create文で使用するSQL文を返す
    │               """
    │               columnName, columnObject = next(iter(columns.items()))
    │               parts = []
    │               parts.append(columnName)
    │               # データ型
    │               if columnObject.dataTypeSql:
    │                   parts.append(columnObject.dataTypeSql)
    │               # 主キー
    │               if columnObject.primaryKeySql:
    │                   parts.append(columnObject.primaryKeySql)
    │               # デフォルト値
    │               if columnObject.defaultSql:
    │                   parts.append(columnObject.defaultSql)
    │               # ユニーク設定
    │               if columnObject.uniqueSql:
    │                   parts.append(columnObject.uniqueSql)
    │               # NotNull制約
    │               if columnObject.notNullSql:
    │                   parts.append(columnObject.notNullSql)
    │               # 外部キー制約
    │               # 定義ある場合は別途保管
    │               fk = cls.__foreignKeyToSql(columnName, columnObject)
    │               if fk:
    │                   cls.__foreignKeyList.append(fk)
    │               return " ".join(parts)
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __foreignKeyToSql(
    │                   cls,
    │                   columnName : str,
    │                   columnObject : Column
    │               ) -> str:
    │               """
    │               外部キー制約の設定をSQL文として出力するプライベートメソッド
    │               Args:
    │                   columnName   (str) : カラム名
    │                   cokumnObject (str) : カラムオブジェクト
    │               Returns:
    │                   fk : SQL文
    │               """
    │               fk = columnObject.foreignKeySql
    │               # リプレイスする
    │               if fk: fk = fk.replace("~~~", columnName)
    │               else:  fk = ""
    │               return fk
    │           #---------------------------------------------------------------------------
    │           # パブリックメソッド
    │           #---------------------------------------------------------------------------
    │           # CREATE系
    │           @classmethod
    │           @public
    │           async def createTable(cls) -> AsyncCreateTable:
    │               """
    │               テーブルを作成する
    │               Returns:
    │                   CreateTable : テーブル作成クラス
    │               """
    │               columns = cls.__columnsToQuery()
    │               return AsyncCreateTable(
    │                   tableName = cls.__name__, # テーブル名
    │                   columns   = columns       # テーブル作成用カラム
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def createTableIfNotExists(cls) -> AsyncCreateTableIfNotExists:
    │               """
    │               テーブルが存在しない場合に作成する
    │               Returns:
    │                   CreateTableIfNotExists : テーブル作成クラス
    │               """
    │               columns = cls.__columnsToQuery()
    │               return AsyncCreateTableIfNotExists(
    │                   tableName = cls.__name__, # テーブル名
    │                   columns   = columns       # テーブル作成用カラム
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def createIndex(
    │                   cls,
    │                   indexName : str,
    │                   *columns  : Column
    │               ) -> AsyncCreateIndex:
    │               """
    │               インデックスを作成する
    │               Args:
    │                   indexName (str)    : 作成するインデックス名
    │                   *columns  (Column) : 対象とするカラム
    │               Returns:
    │                   CreateIndex: インデックス作成処理オブジェクト
    │               Examples:
    │                   ↓ インスタンスの作成
    │                   user = User.createIndex("indexName", User.id, User.name)
    │                   ↓ 実行とコミット
    │                   user.execute()
    │                   user.commit()
    │               """
    │               # カラムを文字列に変更する
    │               cols = cls.__parameterColumnsToStrings(columns)
    │               return AsyncCreateIndex(
    │                   indexName = indexName,
    │                   tableName = cls.__name__,
    │                   columns   = cols
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def createView(cls): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def createTrigger(
    │                   cls,
    │                   triggerName : str,
    │                   timing      : str,
    │                   event       : str,
    │                   body        : Base
    │               ):
    │               """
    │               トリガーの作成
    │               Args:
    │                   triggerName (str) : トリガー名
    │                   timing      (str) : タイミング BEFORE AFTER
    │                   event       (str) : イベント  INSERT UPDATE DELETE
    │                   body        (str) : 実行するSQL文
    │               Examples:
    │                   trigger = User.createTrigger(
    │                       "tableName",
    │                       "triggerName",
    │                       "before | after",
    │                       "inser | update | delete",
    │                       User.InsertRecord(~~~)      <-実行したいものを入れる
    │                   )
    │                   trigger.execute()
    │                   trigger.commit()
    │               """
    │               return AsyncCreateTrigger(
    │                   tableName   = cls.__name__, # テーブル名
    │                   triggerName = triggerName,  # トリガー名
    │                   timing      = timing,       # イベントタイミング
    │                   event       = event,        # イベント
    │                   body        = body.query    # 実行するSQL
    │               )
    │           #---------------------------------------------------------------------------
    │           # DROP系
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropTable(cls) -> AsyncDropTable:
    │               """
    │               テーブルを削除する
    │               Example:
    │                   user = User.dropTable()
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTable : テーブル削除クラス
    │               """
    │               return AsyncDropTable(
    │                   tableName = cls.__name__
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropTableIfExists(cls) -> AsyncDropTableIfExists:
    │               """
    │               テーブルが存在する場合のみ削除する
    │               Example:
    │                   user = User.dropTableIfExists()
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTableIfExists : テーブル削除クラス
    │               """
    │               return AsyncDropTableIfExists(
    │                   tableName = cls.__name__
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropView(cls, viewName : str) -> AsyncDropView:
    │               """
    │               ビューの削除
    │               Args:
    │                   viewName (str) : 削除するビュー名
    │               Example:
    │                   user = User.dropView("view")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropView : ビュー削除クラス
    │               """
    │               return AsyncDropView(
    │                   tableName = cls.__name__,
    │                   viewName  = viewName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropViewIfExist(cls, viewName : str) -> AsyncDropViewIfExists:
    │               """
    │               ビューが存在する場合削除する
    │               Args:
    │                   viewName (str) : 削除するビュー名
    │               Example:
    │                   user = User.dropView("view")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropViewIfExists : ビュー削除クラス
    │               """
    │               return AsyncDropViewIfExists(
    │                   tableName = cls.__name__,
    │                   viewName  = viewName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropIndex(cls, indexName : str) -> AsyncDropIndex:
    │               """
    │               インデックス削除
    │               Args:
    │                   indexName (str) : インデックス名
    │               Example:
    │                   user = User.dropIndex("index")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropIndex : インデックス削除クラス
    │               """
    │               return AsyncDropIndex(
    │                   tableName = cls.__name__,
    │                   indexName = indexName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropIndexIfNotExists(
    │                   cls,
    │                   indexName : str
    │               ) -> AsyncDropIndexIfExists:
    │               """
    │               インデックス削除
    │               Args:
    │                   indexName (str) : インデックス名
    │               Example:
    │                   user = User.dropIndexIfExists("index")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropIndexIfExists : インデックス削除クラス
    │               """
    │               return AsyncDropIndexIfExists(
    │                   tableName = cls.__name__,
    │                   indexName = indexName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropTrigger(cls, triggerName : str) -> AsyncDropTrigger:
    │               """
    │               トリガーの削除
    │               Args:
    │                   triggerName (str) : トリガー名
    │               Examples:
    │                   user = User.dropTrigger("trigger")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTrigger : トリガー削除オブジェクト
    │               """
    │               return AsyncDropTrigger(
    │                   tableName   = cls.__name__,
    │                   triggerName = triggerName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def dropTriggerIfNotExists(
    │                   cls,
    │                   triggerName : str
    │               ) -> AsyncDropTriggerIfNotExists:
    │               """
    │               トリガーの削除
    │               Args:
    │                   triggerName (str) : トリガー名
    │               Examples:
    │                   user = User.dropTriggerIfNotExists("trigger")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTriggerIfNotExists : トリガー削除オブジェクト
    │               """
    │               return AsyncDropTriggerIfNotExists(
    │                   tableName   = cls.__name__,
    │                   triggerName = triggerName
    │               )
    │           #---------------------------------------------------------------------------
    │           # INSERT/UPDATE/DELETE
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def insertRecord(cls, **columns) -> AsyncInsertRecord:
    │               """
    │               レコードを挿入
    │               Args:
    │                   **columns : 例: id = 1, name = "name", age = 19...
    │               Examples:
    │                   user = User.insertRecord(id = 1, name = "name", age = 19)
    │                   user.execute()
    │                   user.commit()
    │       
    │                   Userテーブルにidが1, nameが"name", ageが19が挿入される
    │               Returns:
    │                   InsertRecord : レコード挿入クラスを返す
    │               """
    │               cols         = "" # カラム
    │               placeHolders = "" # プレイスホルダー
    │               values       = [] # 値
    │               # id = 1, name = "name", age = 19...の形に成形
    │               # 値をストックに格納
    │               # カラム数に応じて, プレイスホルダー数を決定
    │               for key, value in columns.items():
    │                   cols         += f"{key}, "
    │                   placeHolders += "?, "
    │                   values.append(value)
    │               return AsyncInsertRecord(
    │                   tableName    = cls.__name__,     # テーブル名
    │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
    │                   values       = tuple(values),    # 値はタプルで渡す
    │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
    │               )
    │       
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def insertRecords(cls, **columns) -> AsyncInsertRecords:
    │               """
    │               レコードを複数挿入
    │               Args:
    │                   **columns : 例: id   = [1,   2,   3  ],
    │                                   name = ["a", "b", "c"],
    │                                   age  = [19,  22,  17 ]
    │               Examples:
    │                   user = User.insertRecord(
    │                       id = [1, 2, 3], name = ["a", "b", "c"], age = [19, 22, 17]
    │                   )
    │                   user.execute()
    │                   user.commit()
    │       
    │                   ↓Userテーブルに
    │                   |id|name|user|
    │                   |1 |a   |19  |
    │                   |2 |b   |22  |
    │                   |3 |c   |17  | と複数レコードが挿入される
    │               Returns:
    │                   InsertRecord : レコード複数挿入クラスを返す
    │               """
    │               cols         = "" # カラム
    │               placeHolders = "" # プレイスホルダー
    │               for key, values in columns.items(): # valuesは使わない
    │                   cols         += f"{key}, "
    │                   placeHolders += "?, "
    │               return AsyncInsertRecords(
    │                   tableName    = cls.__name__,     # テーブル名
    │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
    │                   data         = list(
    │                       zip(*columns.values())       # 値はリストで渡す
    │                   ),
    │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def updateRecord(cls, **updateColumns) -> AsyncUpdateRecord:
    │               """
    │               レコードを更新
    │               Args:
    │                   **updateColumns : 更新したいカラムを指定する
    │               Examples:
    │                   user = User.updateRecord(name = "a", age = 20)
    │                   user.where(id = 1)
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   UpdateRecord : レコード更新クラスを返す
    │               """
    │               cols   = "" # カラム
    │               values = [] # 値(リスト型)
    │               # id = ?, name = ?, age = ? の形に成型
    │               for key, value in updateColumns.items():
    │                   cols += f"{key} = ?, "
    │                   values.append(value)
    │               return AsyncUpdateRecord(
    │                   tableName    = cls.__name__,    # テーブル名
    │                   columns      = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
    │                   values       = tuple(values),   # タプルで渡す
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def updateRecords(cls, **updateColumns) -> AsyncUpdateRecords:
    │               """
    │               レコードを更新
    │               Args:
    │                   **updateColumns : 更新したいカラムを指定する
    │               Examples:
    │                   user = User.updateRecords(
    │                       name = ["a","b","c"], age = [20,22,24]
    │                   ).where(id = [1,2,3]) ※whereも忘れずに
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   UpdateRecords : 複数レコード更新クラスを返す
    │               """
    │               cols = "" # カラム
    │               for key, value in updateColumns.items(): # valueは使わない
    │                   cols += f"{key} = ?, "
    │               return AsyncUpdateRecords(
    │                   tableName = cls.__name__,    # テーブル名
    │                   columns   = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
    │                   data      = list(zip(*updateColumns.values()))
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           async def deleteRecord(cls, **deleteColumns) -> AsyncDeleteRecord:
    │               """
    │               レコードを削除
    │               Args:
    │                   **deleteColumns : 削除したいカラムを指定する
    │               Examples:
    │                   user = User.deleteRecord(id = 1) ※複数指定不可
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DeleteRecord : レコード削除クラスを返す
    │               """
    │               cols    = "" # カラム
    │               values = [] # 値(リスト型)
    │               # id = ? の形に成型
    │               for key, value in deleteColumns.items():
    │                   cols += f"{key} = ?, "
    │                   values.append(value)
    │               return AsyncDeleteRecord(
    │                   tableName = cls.__name__,    # テーブル名
    │                   columns   = cols[:-2] + " ", # <-WHEREの前に空白を入れる用
    │                   values    = tuple(values)    # タプルで渡す
    │               )
    │           #---------------------------------------------------------------------------
    │           # ALTER系
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableAddColumn(
    │                   cls,
    │                   **column : Column
    │               ) -> AsyncAlterTableAddColumn:
    │               """
    │               テーブルにカラムを追加する
    │               Args:
    │                   column (Column) : カラム
    │               Examples:
    │                   user = User.alterTableAddColumn(age = Column(Integer()))
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableAddColumn : カラム追加クラス
    │               """
    │               columnName   : str    # カラム名
    │               columnObject : Column # カラムオブジェクト
    │               # カラム
    │               for key, value in column.items():
    │                   columnName   = key
    │                   columnObject = value
    │               # 条件
    │               constraints = f"{columnObject.notNullSql} "\
    │                           + f"{columnObject.notNullSql} "\
    │                           + f"{columnObject.uniqueSql}"
    │               return AsyncAlterTableAddColumn(
    │                   tableName   = cls.__name__,             # テーブル名
    │                   column      = columnName,               # カラム名
    │                   dataType    = columnObject.dataTypeSql, # データ型
    │                   constraints = constraints               # 制約
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableDropColumn(
    │                   cls,
    │                   column : Column
    │               ) -> AsyncAlterTableDropColumn:
    │               """
    │               テーブルからカラムを削除する
    │               Args:
    │                   column (Column) : カラム
    │               Examples:
    │                   user = User.alterTableDropColumn(User.age)
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableDropColumn : カラム削除クラス
    │               """
    │               return AsyncAlterTableDropColumn(
    │                   tableName  = cls.__name__,     # テーブル名
    │                   columnName = column.columnName # カラム名
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableRenameColumn(
    │                   cls,
    │                   oldName : str,
    │                   newName : str
    │               ) -> AsyncAlterTableRenameColumn:
    │               """
    │               テーブルのカラム名を変更
    │               Args:
    │                   oldName (str) : 既存の名前
    │                   newName (str) : 新しい名前
    │               Examples:
    │                   user = User.alterTableRenameColumn("email", "address")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableRenameColumn : カラム名変更クラス
    │               """
    │               return AsyncAlterTableRenameColumn(
    │                   tableName = cls.__name__,
    │                   oldName   = oldName,
    │                   newName   = newName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableAddConstraint(cls,**constraints : Constraints): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableDropConstraint(cls): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterView(cls): ...
    │           #---------------------------------------------------------------------------
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def fromDict(cls, data : dict):
    │               instance = cls()
    │               for key, value in data.items():
    │                   if hasattr(isinstance, key):
    │                       setattr(instance, key, value)
    │               return instance
    │           #---------------------------------------------------------------------------
    │           #---------------------------------------------------------------------------
    │           def __and__(self, other):
    │               return f"{self} {other}"
    │       #-------------------------------------------------------------------------------
    │   ├── Model.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .ModelMeta    import ModelMeta
    │       from ..column      import Column
    │       from ..common      import private
    │       from ..common      import public
    │       from ..constraints import Constraints
    │       from ..manager     import Base
    │       from ..manager     import AlterTableAddColumn
    │       from ..manager     import AlterTableAddConstraint
    │       from ..manager     import AlterTableDropColumn
    │       from ..manager     import AlterTableDropConstraint
    │       from ..manager     import AlterTableRenameColumn
    │       from ..manager     import CreateIndex
    │       from ..manager     import CreateTable
    │       from ..manager     import CreateTableIfNotExists
    │       from ..manager     import CreateTrigger
    │       from ..manager     import CreateView
    │       from ..manager     import InsertRecord
    │       from ..manager     import InsertRecords
    │       from ..manager     import Select
    │       from ..manager     import UpdateRecord
    │       from ..manager     import UpdateRecords
    │       from ..manager     import DeleteRecord
    │       from ..manager     import DropIndex
    │       from ..manager     import DropIndexIfExists
    │       from ..manager     import DropTable
    │       from ..manager     import DropTableIfExists
    │       from ..manager     import DropTrigger
    │       from ..manager     import DropTriggerIfNotExists
    │       from ..manager     import DropView
    │       from ..manager     import DropViewIfExists
    │       #-------------------------------------------------------------------------------
    │       class Model(metaclass = ModelMeta):
    │           """
    │           モデルクラスの基底クラス。
    │       
    │           Attributes:
    │               tableName (str)                     : テーブル名（クラス名から自動取得）
    │               columns   (list[dict[str, Column]]) : カラム定義のリスト
    │           """
    │       
    │           tableName : str                     # テーブル名
    │           columns   : list[dict[str, Column]] # カラム
    │           #---------------------------------------------------------------------------
    │           # プライベートメソッド
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __parameterColumnsToStrings(cls, columns :tuple[Column, ...]) -> str:
    │               cols = ""
    │               for col in columns:
    │                   cols += col.columnName + ", "
    │               return cols[:-2]
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __columnsToQuery(cls):
    │               """
    │               カラムをSQL文にする
    │               テーブル作成時に使用する
    │               """
    │               cls.__foreignKeyList = [] # 外部キー定義リスト
    │               columnDefineLists    = [] # 各カラム定義
    │               # 各カラム定義をリストに追加
    │               for cols in cls.columns:
    │                   columnSql = cls.__columnsToSql(cols)
    │                   columnDefineLists.append(columnSql)
    │               # 外部キーがある場合、末尾に追加
    │               for fk in cls.__foreignKeyList:
    │                   columnDefineLists.append(fk)
    │               return ", ".join(columnDefineLists)
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __columnsToSql(
    │                   cls,
    │                   columns : dict[str, Column]
    │               ) -> str:
    │               """
    │               カラムをSQL文にする
    │               columnsToQueryでのみ使用するプライベートメソッド
    │               Args:
    │                   columns (dict[str, Column]) : カラム
    │               Returns:
    │                   Create文で使用するSQL文を返す
    │               """
    │               columnName, columnObject = next(iter(columns.items()))
    │               parts = []
    │               parts.append(columnName)
    │               # データ型
    │               if columnObject.dataTypeSql:
    │                   parts.append(columnObject.dataTypeSql)
    │               # 主キー
    │               if columnObject.primaryKeySql:
    │                   parts.append(columnObject.primaryKeySql)
    │               # 自動採番
    │               if columnObject.autoIncrementSql:
    │                   parts.append((columnObject.autoIncrementSql))
    │               # デフォルト値
    │               if columnObject.defaultSql:
    │                   parts.append(columnObject.defaultSql)
    │               # ユニーク設定
    │               if columnObject.uniqueSql:
    │                   parts.append(columnObject.uniqueSql)
    │               # NotNull制約
    │               if columnObject.notNullSql:
    │                   parts.append(columnObject.notNullSql)
    │               # 外部キー制約
    │               # 定義ある場合は別途保管
    │               fk = cls.__foreignKeyToSql(columnName, columnObject)
    │               if fk:
    │                   cls.__foreignKeyList.append(fk)
    │               return " ".join(parts)
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @private
    │           def __foreignKeyToSql(
    │                   cls,
    │                   columnName : str,
    │                   columnObject : Column
    │               ) -> str:
    │               """
    │               外部キー制約の設定をSQL文として出力するプライベートメソッド
    │               Args:
    │                   columnName   (str) : カラム名
    │                   cokumnObject (str) : カラムオブジェクト
    │               Returns:
    │                   fk : SQL文
    │               """
    │               fk = columnObject.foreignKeySql
    │               # リプレイスする
    │               if fk: fk = fk.replace("~~~", columnName)
    │               else:  fk = ""
    │               return fk
    │           #---------------------------------------------------------------------------
    │           # パブリックメソッド
    │           #---------------------------------------------------------------------------
    │           # CREATE系
    │           @classmethod
    │           @public
    │           def createTable(cls) -> CreateTable:
    │               """
    │               テーブルを作成する
    │               Returns:
    │                   CreateTable : テーブル作成クラス
    │               """
    │               columns = cls.__columnsToQuery()
    │               return CreateTable(
    │                   tableName = cls.__name__, # テーブル名
    │                   columns   = columns       # テーブル作成用カラム
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def createTableIfNotExists(cls) -> CreateTableIfNotExists:
    │               """
    │               テーブルが存在しない場合に作成する
    │               Returns:
    │                   CreateTableIfNotExists : テーブル作成クラス
    │               """
    │               columns = cls.__columnsToQuery()
    │               return CreateTableIfNotExists(
    │                   tableName = cls.__name__, # テーブル名
    │                   columns   = columns       # テーブル作成用カラム
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def createIndex(
    │                   cls,
    │                   indexName : str,
    │                   *columns  : Column
    │               ) -> CreateIndex:
    │               """
    │               インデックスを作成する
    │               Args:
    │                   indexName (str)    : 作成するインデックス名
    │                   *columns  (Column) : 対象とするカラム
    │               Returns:
    │                   CreateIndex: インデックス作成処理オブジェクト
    │               Examples:
    │                   ↓ インスタンスの作成
    │                   user = User.createIndex("indexName", User.id, User.name)
    │                   ↓ 実行とコミット
    │                   user.execute()
    │                   user.commit()
    │               """
    │               # カラムを文字列に変更する
    │               cols = cls.__parameterColumnsToStrings(columns)
    │               return CreateIndex(
    │                   indexName = indexName,
    │                   tableName = cls.__name__,
    │                   columns   = cols
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def createView(cls): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def createTrigger(
    │                   cls,
    │                   triggerName : str,
    │                   timing      : str,
    │                   event       : str,
    │                   body        : Base
    │               ) -> CreateTrigger:
    │               """
    │               トリガーの作成
    │               Args:
    │                   triggerName (str) : トリガー名
    │                   timing      (str) : タイミング BEFORE AFTER
    │                   event       (str) : イベント  INSERT UPDATE DELETE
    │                   body        (str) : 実行するSQL文
    │               Examples:
    │                   trigger = User.createTrigger(
    │                       "tableName",
    │                       "triggerName",
    │                       "before | after",
    │                       "inser | update | delete",
    │                       User.InsertRecord(~~~)      <-実行したいものを入れる
    │                   )
    │                   trigger.execute()
    │                   trigger.commit()
    │               """
    │               return CreateTrigger(
    │                   tableName   = cls.__name__, # テーブル名
    │                   triggerName = triggerName,  # トリガー名
    │                   timing      = timing,       # イベントタイミング
    │                   event       = event,        # イベント
    │                   body        = body.query    # 実行するSQL
    │               )
    │           #---------------------------------------------------------------------------
    │           # DROP系
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropTable(cls) -> DropTable:
    │               """
    │               テーブルを削除する
    │               Example:
    │                   user = User.dropTable()
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTable : テーブル削除クラス
    │               """
    │               return DropTable(
    │                   tableName = cls.__name__
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropTableIfExists(cls) -> DropTableIfExists:
    │               """
    │               テーブルが存在する場合のみ削除する
    │               Example:
    │                   user = User.dropTableIfExists()
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTableIfExists : テーブル削除クラス
    │               """
    │               return DropTableIfExists(
    │                   tableName = cls.__name__
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropView(cls, viewName : str) -> DropView:
    │               """
    │               ビューの削除
    │               Args:
    │                   viewName (str) : 削除するビュー名
    │               Example:
    │                   user = User.dropView("view")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropView : ビュー削除クラス
    │               """
    │               return DropView(
    │                   tableName = cls.__name__,
    │                   viewName  = viewName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropViewIfExist(cls, viewName : str) -> DropViewIfExists:
    │               """
    │               ビューが存在する場合削除する
    │               Args:
    │                   viewName (str) : 削除するビュー名
    │               Example:
    │                   user = User.dropView("view")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropViewIfExists : ビュー削除クラス
    │               """
    │               return DropViewIfExists(
    │                   tableName = cls.__name__,
    │                   viewName  = viewName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropIndex(cls, indexName : str) -> DropIndex:
    │               """
    │               インデックス削除
    │               Args:
    │                   indexName (str) : インデックス名
    │               Example:
    │                   user = User.dropIndex("index")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropIndex : インデックス削除クラス
    │               """
    │               return DropIndex(
    │                   tableName = cls.__name__,
    │                   indexName = indexName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropIndexIfNotExists(cls, indexName : str) -> DropIndexIfExists:
    │               """
    │               インデックス削除
    │               Args:
    │                   indexName (str) : インデックス名
    │               Example:
    │                   user = User.dropIndexIfExists("index")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropIndexIfExists : インデックス削除クラス
    │               """
    │               return DropIndexIfExists(
    │                   tableName = cls.__name__,
    │                   indexName = indexName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropTrigger(cls, triggerName : str) -> DropTrigger:
    │               """
    │               トリガーの削除
    │               Args:
    │                   triggerName (str) : トリガー名
    │               Examples:
    │                   user = User.dropTrigger("trigger")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTrigger : トリガー削除オブジェクト
    │               """
    │               return DropTrigger(
    │                   tableName   = cls.__name__,
    │                   triggerName = triggerName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def dropTriggerIfNotExists(
    │                   cls,
    │                   triggerName : str
    │               ) -> DropTriggerIfNotExists:
    │               """
    │               トリガーの削除
    │               Args:
    │                   triggerName (str) : トリガー名
    │               Examples:
    │                   user = User.dropTriggerIfNotExists("trigger")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DropTriggerIfNotExists : トリガー削除オブジェクト
    │               """
    │               return DropTriggerIfNotExists(
    │                   tableName   = cls.__name__,
    │                   triggerName = triggerName
    │               )
    │           #---------------------------------------------------------------------------
    │           # INSERT/UPDATE/DELETE
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def insertRecord(cls, **columns) -> InsertRecord:
    │               """
    │               レコードを挿入
    │               Args:
    │                   **columns : 例: id = 1, name = "name", age = 19...
    │               Examples:
    │                   user = User.insertRecord(id = 1, name = "name", age = 19)
    │                   user.execute()
    │                   user.commit()
    │       
    │                   Userテーブルにidが1, nameが"name", ageが19が挿入される
    │               Returns:
    │                   InsertRecord : レコード挿入クラスを返す
    │               """
    │               cols         = "" # カラム
    │               placeHolders = "" # プレイスホルダー
    │               values       = [] # 値
    │               # id = 1, name = "name", age = 19...の形に成形
    │               # 値をストックに格納
    │               # カラム数に応じて, プレイスホルダー数を決定
    │               for key, value in columns.items():
    │                   cols         += f"{key}, "
    │                   placeHolders += "?, "
    │                   values.append(value)
    │               return InsertRecord(
    │                   tableName    = cls.__name__,     # テーブル名
    │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
    │                   values       = tuple(values),    # 値はタプルで渡す
    │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
    │               )
    │       
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def insertRecords(cls, **columns) -> InsertRecords:
    │               """
    │               レコードを複数挿入
    │               Args:
    │                   **columns : 例: id   = [1,   2,   3  ],
    │                                   name = ["a", "b", "c"],
    │                                   age  = [19,  22,  17 ]
    │               Examples:
    │                   user = User.insertRecord(
    │                       id = [1, 2, 3], name = ["a", "b", "c"], age = [19, 22, 17]
    │                   )
    │                   user.execute()
    │                   user.commit()
    │       
    │                   ↓Userテーブルに
    │                   |id|name|user|
    │                   |1 |a   |19  |
    │                   |2 |b   |22  |
    │                   |3 |c   |17  | と複数レコードが挿入される
    │               Returns:
    │                   InsertRecord : レコード複数挿入クラスを返す
    │               """
    │               cols         = "" # カラム
    │               placeHolders = "" # プレイスホルダー
    │               for key, values in columns.items(): # valuesは使わない
    │                   cols         += f"{key}, "
    │                   placeHolders += "?, "
    │               return InsertRecords(
    │                   tableName    = cls.__name__,     # テーブル名
    │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
    │                   data         = list(
    │                       zip(*columns.values())       # 値はリストで渡す
    │                   ),
    │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def updateRecord(cls, **updateColumns) -> UpdateRecord:
    │               """
    │               レコードを更新
    │               Args:
    │                   **updateColumns : 更新したいカラムを指定する
    │               Examples:
    │                   user = User.updateRecord(name = "a", age = 20)
    │                   user.where(id = 1)
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   UpdateRecord : レコード更新クラスを返す
    │               """
    │               cols   = "" # カラム
    │               values = [] # 値(リスト型)
    │               # id = ?, name = ?, age = ? の形に成型
    │               for key, value in updateColumns.items():
    │                   cols += f"{key} = ?, "
    │                   values.append(value)
    │               return UpdateRecord(
    │                   tableName    = cls.__name__,    # テーブル名
    │                   columns      = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
    │                   values       = tuple(values),   # タプルで渡す
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def updateRecords(cls, **updateColumns) -> UpdateRecords:
    │               """
    │               レコードを更新
    │               Args:
    │                   **updateColumns : 更新したいカラムを指定する
    │               Examples:
    │                   user = User.updateRecords(
    │                       name = ["a","b","c"], age = [20,22,24]
    │                   ).where(id = [1,2,3]) ※whereも忘れずに
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   UpdateRecords : 複数レコード更新クラスを返す
    │               """
    │               cols = "" # カラム
    │               for key, value in updateColumns.items(): # valueは使わない
    │                   cols += f"{key} = ?, "
    │               return UpdateRecords(
    │                   tableName = cls.__name__,    # テーブル名
    │                   columns   = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
    │                   data      = list(zip(*updateColumns.values()))
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def deleteRecord(cls, **deleteColumns) -> DeleteRecord:
    │               """
    │               レコードを削除
    │               Args:
    │                   **deleteColumns : 削除したいカラムを指定する
    │               Examples:
    │                   user = User.deleteRecord(id = 1) ※複数指定不可
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   DeleteRecord : レコード削除クラスを返す
    │               """
    │               cols    = "" # カラム
    │               values = [] # 値(リスト型)
    │               # id = ? の形に成型
    │               for key, value in deleteColumns.items():
    │                   cols += f"{key} = ?, "
    │                   values.append(value)
    │               return DeleteRecord(
    │                   tableName = cls.__name__,    # テーブル名
    │                   columns   = cols[:-2] + " ", # <-WHEREの前に空白を入れる用
    │                   values    = tuple(values)    # タプルで渡す
    │               )
    │           #---------------------------------------------------------------------------
    │           # ALTER系
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableAddColumn(cls, **column : Column) -> AlterTableAddColumn:
    │               """
    │               テーブルにカラムを追加する
    │               Args:
    │                   column (Column) : カラム
    │               Examples:
    │                   user = User.alterTableAddColumn(age = Column(Integer()))
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableAddColumn : カラム追加クラス
    │               """
    │               columnName   : str    # カラム名
    │               columnObject : Column # カラムオブジェクト
    │               # カラム
    │               for key, value in column.items():
    │                   columnName   = key
    │                   columnObject = value
    │               # 条件
    │               constraints = f"{columnObject.notNullSql} "\
    │                           + f"{columnObject.notNullSql} "\
    │                           + f"{columnObject.uniqueSql}"
    │               return AlterTableAddColumn(
    │                   tableName   = cls.__name__,             # テーブル名
    │                   column      = columnName,               # カラム名
    │                   dataType    = columnObject.dataTypeSql, # データ型
    │                   constraints = constraints               # 制約
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableDropColumn(
    │                   cls,
    │                   column : Column
    │               ):
    │               """
    │               テーブルからカラムを削除する
    │               Args:
    │                   column (Column) : カラム
    │               Examples:
    │                   user = User.alterTableDropColumn(User.age)
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableDropColumn : カラム削除クラス
    │               """
    │               return AlterTableDropColumn(
    │                   tableName  = cls.__name__,     # テーブル名
    │                   columnName = column.columnName # カラム名
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableRenameColumn(
    │                   cls,
    │                   oldName : str,
    │                   newName : str
    │               ) -> AlterTableRenameColumn:
    │               """
    │               テーブルのカラム名を変更
    │               Args:
    │                   oldName (str) : 既存の名前
    │                   newName (str) : 新しい名前
    │               Examples:
    │                   user = User.alterTableRenameColumn("email", "address")
    │                   user.execute()
    │                   user.commit()
    │               Returns:
    │                   AlterTableRenameColumn : カラム名変更クラス
    │               """
    │               return AlterTableRenameColumn(
    │                   tableName = cls.__name__,
    │                   oldName   = oldName,
    │                   newName   = newName
    │               )
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableAddConstraint(cls,**constraints : Constraints): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterTableDropConstraint(cls): ...
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def alterView(cls): ...
    │           #---------------------------------------------------------------------------
    │           #---------------------------------------------------------------------------
    │           @classmethod
    │           @public
    │           def fromDict(cls, data : dict):
    │               instance = cls()
    │               for key, value in data.items():
    │                   if hasattr(isinstance, key):
    │                       setattr(instance, key, value)
    │               return instance
    │           #---------------------------------------------------------------------------
    │           #---------------------------------------------------------------------------
    │           def __and__(self, other):
    │               return f"{self} {other}"
    │       #-------------------------------------------------------------------------------
    │   ├── ModelMeta.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from ..column import Column # カラムクラス
    │       from ..filed  import Filed  # カラムクラス(フィールド)
    │       #-------------------------------------------------------------------------------
    │       class ModelMeta(type):
    │           """
    │           モデルクラスのメタクラス。
    │           Columnインスタンスを自動的に検出し、各カラムに `columnName`（変数名）と
    │           `tableName`（クラス名）を設定する。
    │           また、テーブル名とカラム一覧をクラス属性として持たせる。
    │           このメタクラスは、ORMのModel定義時に使用され、クラス定義時に
    │           自動的にカラム定義を収集・構造化する役割を持つ。
    │           主な機能:
    │           - `Model` クラス自体は対象外（カラムを要求しない）
    │           - クラス定義時に Column 型の属性を検出し、名前とテーブル名を自動的に設定
    │           - クラス属性 `tableName`, `columns` を付与
    │           Attributes (動的に付加):
    │               tableName : str
    │                   テーブル名（＝クラス名）
    │               columns : list[dict[str, Column]]
    │                   カラム名とColumnオブジェクトの辞書リスト形式
    │           Exception:
    │               Columnが1つも定義されていない場合に例外を発生させる。
    │           Examples:
    │               class User(Model, metaclass=ModelMeta):
    │                   id   = Column(Integer(), isPrimaryKey=True)
    │                   name = Column(Text())
    │       
    │               → 自動的に:
    │                   User.tableName = "User"
    │                   User.columns = [{"id": Column(...)}, {"name": Column(...)}]
    │           """
    │           def __new__(mcs, name, bases, namespace):
    │               # Model自体にはカラムを要求しない
    │               if name == "Model":
    │                   return super().__new__(mcs, name, bases, namespace)
    │               # カラムを自動登録
    │               columns = []
    │               for key, value in namespace.items():
    │                   #カラムクラスかフィールドクラス
    │                   if isinstance(value, Column) or isinstance(value, Filed):
    │                       value.columnName = key       # カラム名に属性名を設定
    │                       value.tableName  = name      # テーブル名にクラス名を設定
    │                       columns.append({key: value}) # 辞書形式で保存
    │               # カラムが1つもない場合は例外
    │               if not columns:
    │                   raise Exception(f"[{name}] クラスにカラムが定義されていません。")
    │               # テーブル名とカラムリストをクラス属性として付加
    │               namespace['tableName'] = name
    │               namespace['columns']   = columns
    │               return super().__new__(mcs, name, bases, namespace)
    │       #-------------------------------------------------------------------------------
    │   └── __init__.py
    │       ↓ 内容（最大10000行）
    │       #-------------------------------------------------------------------------------
    │       from .Model import Model
    │       #-------------------------------------------------------------------------------
    │       __all__ = [
    │           "Model"
    │       ]
    │       #-------------------------------------------------------------------------------
    ├── __init__.py
        ↓ 内容（最大10000行）
        #-------------------------------------------------------------------------------
        # 集計関数（Aggregate Functions）
        from .aggregate import Avg       # 平均
        from .aggregate import Count     # カウント
        from .aggregate import Max       # 最大
        from .aggregate import Min       # 最小
        from .aggregate import Sum       # 合計
        #-------------------------------------------------------------------------------
        # 制約（Constraints）
        from .constraints import Default      # デフォルト制約
        from .constraints import NotNull      # NULL不可制約
        from .constraints import Unique       # 一意制約
        from .constraints import ForeignKey   # 外部キー制約
        #-------------------------------------------------------------------------------
        # CSV
        from .csv import CSV
        #-------------------------------------------------------------------------------
        # 条件式（Conditions for WHERE）
        from .conditions import Condition
        from .conditions import Regexp
        #-------------------------------------------------------------------------------
        # データ型（Data Types）
        from .datatypes import DataType
        from .datatypes import Integer, Long, SmallInt, TinyInt, MediumInt
        from .datatypes import Float, Double, Decimal
        from .datatypes import Char, VarChar, Text, TinyText, MediumText, LongText
        from .datatypes import Date, Time, DateTime, TimeStamp, Year
        from .datatypes import Boolean, Null
        from .datatypes import Blob, TinyBlob, MediumBlob, LongBlob
        from .datatypes import Json, Enum, Set, Uuid, Auto, Serial
        from .datatypes import File
        from .datatypes import Geometry, Point, LineString, Polygon
        from .datatypes import MultiLineString, MultiPolygon, GeometryCollection
        #-------------------------------------------------------------------------------
        # DDL
        from .ddl import DDL
        #-------------------------------------------------------------------------------
        # カラム定義
        from .column import Column
        #-------------------------------------------------------------------------------
        # フィールド
        from .filed import BoolFiled, DateTimeFiled, FloatFiled, IntFiled, StrFiled, TimeFiled
        #-------------------------------------------------------------------------------
        # インデックス
        from .index import Index
        #-------------------------------------------------------------------------------
        # SQLエンジン（同期/非同期）
        from .engine import Engine, AsyncEngine
        #-------------------------------------------------------------------------------
        # マイグレーション
        from .migration import Migration
        #-------------------------------------------------------------------------------
        # モデル定義
        from .model import Model, AsyncModel
        #-------------------------------------------------------------------------------
        # トリガー
        from .Trigger import Trigger
        #-------------------------------------------------------------------------------
        # ビュー
        from .View import View
        #-------------------------------------------------------------------------------
        
        __all__ = [
            # Aggregate Functions
            "Avg", "Count", "Max", "Min", "Sum",
        
            # Constraints
            "Default", "NotNull", "Unique", "ForeignKey",
        
            # Conditions
            "Condition", "Regexp",
        
            # CSV
            "CSV",
        
            # Data Types
            "DataType",
            "Integer", "Long", "SmallInt", "TinyInt", "MediumInt",
            "Float", "Double", "Decimal",
            "Char", "VarChar", "Text", "TinyText", "MediumText", "LongText",
            "Blob", "TinyBlob", "MediumBlob", "LongBlob",
            "Date", "Time", "DateTime", "TimeStamp", "Year",
            "Boolean", "Null",
            "Json", "Enum", "Set", "Uuid", "Auto", "Serial",
            "File",
            "Geometry", "Point", "LineString", "Polygon",
            "MultiLineString", "MultiPolygon", "GeometryCollection",
        
            # DDL
            "DDL",
        
            # Column
            "Column",
        
            # Fields
            "BoolFiled", "FloatFiled", "IntFiled", "StrFiled", "DateTimeFiled", "TimeFiled",
        
            # Index
            "Index",
        
            # Engines
            "Engine", "AsyncEngine",
        
            # Migration
            "Migration",
        
            # Models
            "Model", "AsyncModel",
        
            # Trigger
            "Trigger",
        
            # View
            "View"
        ]
        __version__ = "0.1.0"
        #-------------------------------------------------------------------------------
    └── 全て.txt
        ↓ 内容（最大10000行）
        └── [pybriger]
            ├── [Log]
            │   ├── Log.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import logging  # ログ
            │       #-------------------------------------------------------------------------------
            │       class Log:
            │           """
            │           ログクラス
            │           ログをログファイルに出力する
            │           """
            │           def __init__(
            │                   self,
            │                   fileName : str,
            │               ) -> None:
            │               """
            │               ログクラスの初期化
            │               Args:
            │                   fileName (str) : ファイル名(拡張子も)
            │               """
            │               self.__logging = logging
            │               self.__logging.basicConfig(
            │                   filename = fileName,
            │                   level    = self.__logging.INFO,
            │                   format   = "%(asctime)s - %(levelname)s - %(message)s",
            │                   encoding = "utf-8"
            │               )
            │           #---------------------------------------------------------------------------
            │           def debug(self, msg : str):
            │               """デバックメッセージ"""
            │               self.__logging.debug(msg)
            │           #---------------------------------------------------------------------------
            │           def info(self, msg : str):
            │               """インフォメッセージ"""
            │               self.__logging.info(msg)
            │           #---------------------------------------------------------------------------
            │           def warning(self, msg : str):
            │               """警告メッセージ"""
            │               self.__logging.warning(msg)
            │           #---------------------------------------------------------------------------
            │           def error(self, msg : str):
            │               """エラーメッセージ"""
            │               self.__logging.error(msg)
            │           #---------------------------------------------------------------------------
            │           def critical(self, msg : str):
            │               """致命的エラー"""
            │               self.__logging.critical(msg)
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Log import Log
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Log"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [Trigger]
            │   ├── Trigger.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common     import private   # プライベートメソッド
            │       from ..common     import public    # パブリックメソッド
            │       from ..config     import Config    # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Trigger:
            │           def  __init__(
            │                   self,
            │                   triggerName : str,
            │                   tableName   : str
            │               ) -> None:
            │               """
            │               テーブルにトリガーを作成する
            │               ※出力はしない
            │               Args:
            │                   triggerName (str) : トリガー名
            │                   tableName   (str) : テーブル名
            │               Examples:
            │                   trigger = Trigger(
            │                       triggerName = "triggerName",
            │                       tableName   = "tableName"
            │                   )
            │               """
            │               self.__triggerName = triggerName
            │               self.__tableName   = tableName
            │           #---------------------------------------------------------------------------
            │           @property
            │           @private
            │           def __sqlEngine(self):
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @public
            │           def create(
            │                   self,
            │                   timing : str,
            │                   event  : str,
            │                   body   : str
            │               ):
            │               """
            │               トリガーの作成
            │               Args:
            │                   timing (str) : タイミング BEFORE AFTER
            │                   event  (str) : イベント  INSERT UPDATE DELETE
            │                   body   (str) : 実行するSQL文
            │               Examples:
            │                   trigger = Trigger("triggerName", "tableName")
            │                   trigger.create("before | after", "inser | update | delete", "SQL文")
            │               """
            │               query = f"CREATE {self.__triggerName} " # 末尾にスペース
            │               if timing == "before":
            │                   query += "BEFORE " # 末尾にスペース
            │               elif timing == "after":
            │                   query += "AFTER "  # 末尾にスペース
            │               else:
            │                   raise Exception(f"使えない引数:{timing} を指定しています。")
            │               if event == "insert":
            │                   query += "INSERT " # 末尾にスペース
            │               elif event == "update":
            │                   query += "UPDATE " # 末尾にスペース
            │               elif event == "delete":
            │                   query += "DELETE " # 末尾にスペース
            │               else:
            │                   raise Exception(f"使えない引数:{event} を指定しています。")
            │               query += f"ON {self.__tableName} EACH ROW BIGIN {body} END;"
            │               self.__sqlEngine.execute(query)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def show(self):
            │               """
            │               トリガーの確認
            │               """
            │               self.__sqlEngine.execute("SHOW TRIGGERS;")
            │           #---------------------------------------------------------------------------
            │           def drop(self):
            │               """
            │               トリガーの削除
            │               """
            │               self.__sqlEngine.execute(
            │                   f"DROP TRIGGER IF EXISTS {self.__triggerName}"
            │               )
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Trigger import Trigger
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Trigger"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [View]
            │   ├── View.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import csv                         # csvライブラリのインポート
            │       from ..common     import private   # プライベートメソッド
            │       from ..common     import public    # パブリックメソッド
            │       from ..config     import Config    # コンフィグクラス
            │       from ..column     import Column    # カラムクラス
            │       from ..conditions import Condition # 条件クラス
            │       #-------------------------------------------------------------------------------
            │       class View:
            │           """
            │           ビュー操作クラス
            │           Attributes:
            │               __viewName   (str)                         : ビュー名
            │               __conditions (Condition)                   : 条件式オブジェクト
            │               __columns    (Column)                      : カラムオブジェクト
            │               __sqlEngine  (Sqlite3Engine | MySqlEngine) : エンジンオブジェクト
            │           """
            │           #---------------------------------------------------------------------------
            │           def __init__(
            │                   self,
            │                   viewName   : str,
            │                   conditions : Condition,
            │                   *columns   : Column
            │               ) -> None:
            │               """
            │               ビューの操作をする
            │               Args:
            │                   viewName   (str)       : ビュー名
            │                   conditions (Condition) : 条件式 例: User.age >= 20
            │                   *columns   (Column)    : カラム
            │               Examples:
            │                   view = View("viewName", User.age >= 20, User.id, User.name)
            │               """
            │               self.__viewName   = viewName
            │               self.__conditions = conditions
            │               self.__columns    = columns
            │           #---------------------------------------------------------------------------
            │           @property
            │           @private
            │           def __sqlEngine(self):
            │               """
            │               sqlエンジンの設定
            │               """
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @ private
            │           def __bulidSelectQuery(self) -> str:
            │               # クエリ
            │               query = "SELECT " # 末尾にスペース
            │               # テーブル名
            │               tableName = ""
            │               # カラム名を取得する
            │               for col in self.__columns:
            │                   tableName = col.tableName
            │                   query += f"{col.columnName}, " # 末尾にスペース
            │               else:
            │                   # 末尾とカンマを消す
            │                   query = query[:-2]
            │                   # 成形する
            │                   query += f" FROM {tableName} WHERE {self.__conditions}"
            │               # SELECT id, name FROM User WHERE age >= 10 の形式で返す
            │               return query
            │           #---------------------------------------------------------------------------
            │           @public
            │           def create(
            │                   self,
            │                   replace             : bool = False,
            │                   checkOption         : bool = False,
            │                   localCheckOpetion   : bool = False,
            │                   cascadedCheckOption : bool = False,
            │                   securityDefiner     : bool = False,
            │                   readOnly            : bool = False
            │               ):
            │               """
            │                   データベースにビューを作成する
            │                   ※出力はしない
            │                   Args:
            │                       replace             (bool) : 既存のビューを置き換える
            │                       checkOption         (bool) : ビューを通した更新を制限
            │                       localCheckOpetion   (bool) : ネストビューで自分自身の条件のみを強制
            │                       cascadedCheckOption (bool) : ネストビューすべての条件を強制
            │                       securityDefiner     (bool) : ビューを作成したユーザ権限で実行
            │                       readOnly            (bool) : ビューから書き込み操作を禁止
            │                   Examples:
            │                       view = View("viewName", User.age >= 10, User.id, User.name)
            │                       view.create(replece = True, checkOption = True)
            │               """
            │               # クエリ
            │               query     = f"CREATE " # 末尾にスペース
            │               # セレクト句
            │               selectSql = self.__bulidSelectQuery()
            │               # リプレイスビューが有効なら
            │               if replace == True:
            │                   query += "OR REPLACE " # 末尾にスペース
            │               # CREATE VIEW viewName AS SELECT id, name FROM User WHWRE age >= 10
            │               query += f"VIEW {self.__viewName} AS {selectSql} " # 末尾にスペース
            │               # オプション句の構築
            │               withClaises = []
            │               # チェックオプションが有効なら
            │               if checkOption:
            │                   withClaises.append("CHECK OPTION")
            │               # ローカルチェックオプションが有効なら
            │               if localCheckOpetion:
            │                   withClaises.append("LOCAL CHECK OPTION")
            │               # カスケードチェックオプションが有効なら
            │               if cascadedCheckOption:
            │                   withClaises.append("CASCADED CHECK OPTION")
            │               # セキュリティーデフェンダーが有効なら
            │               if securityDefiner:
            │                   withClaises.append("SECURITY DEFINER")
            │               # 読み取り専用が有効なら
            │               if readOnly:
            │                   withClaises.append("READ ONLY")
            │               # オプション句リストが空ではなければ
            │               if withClaises:
            │                   query += f"WITH {' '.join(withClaises)}"
            │                   query += ";"
            │               else:
            │                   query = query[:-1] + ";" # 末尾にスペースを削除する
            │               self.__sqlEngine.execute(query = query)
            │               self.__sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def show(self) -> list:
            │               """
            │               ビューの表示
            │               Returns:
            │                   ビューのイテレーターを返す
            │               """
            │               # クエリ
            │               query = f"SELECT * FROM {self.__viewName};"
            │               cur = self.__sqlEngine.cursor()
            │               cur.execute(query)
            │               # リストで返す
            │               return cur.fetchall()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def drop(self):
            │               """
            │               ビューの削除
            │               """
            │               # クエリ
            │               query = f"DROP VIEW IF EXISTS {self.__viewName};"
            │               self.__sqlEngine.execute(query = query)
            │               self.__sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def makeCSV(
            │                   self,
            │                   filePath      : str,
            │                   includeHeader : bool = True,
            │                   encoding      : str = "utf-8"
            │               ):
            │               """
            │               ビュー内容をCSVファイルとして出力する
            │               Args:
            │                   filePath      (str)  : 出力先のCSVファイルパス(.csv不要)
            │                   includeHeader (bool) : ヘッダー行(カラム名)を含んで出力するか
            │                   ncoding       (str)  : 出力ファイルの文字コード
            │               Raises:
            │                   Exception : エンジンが未設定またはクエリ失敗時
            │               """
            │               # カーソルの設定
            │               cur = self.__sqlEngine.cursor()
            │               cur.execute(f"SELECT * FROM {self.__viewName};") # ビュー名で指定
            │               # 出力に失敗時に戻り値を返す
            │               if cur.description is None:
            │                   print("出力に失敗しました")
            │                   return
            │               # カラム名の取得
            │               columnNames = [description[0] for description in cur.description]
            │               # データ行の取得
            │               rows = cur.fetchall()
            │               # ファイルに書き込み
            │               try:
            │                   with open(
            │                       file    = f"{filePath}.csv", mode     = "w",
            │                       newline = "",                encoding = encoding
            │                   ) as f:
            │                       writer = csv.writer(f)
            │                       # ヘッダー行フラグが真なら
            │                       if includeHeader:
            │                           writer.writerow(columnNames) # ヘッダー行あり
            │                       writer.writerows(rows)           # データ行
            │                   print("出力に成功しました")
            │               except Exception as e:
            │                   print(e)
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .View import View
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "View"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [aggregate]
            │   ├── Aggregate.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from abc import ABC     # 基底クラス
            │       #-------------------------------------------------------------------------------
            │       class Aggregate(ABC): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Avg.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Aggregate import Aggregate
            │       #-------------------------------------------------------------------------------
            │       class Avg(Aggregate): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Count.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Aggregate import Aggregate
            │       #-------------------------------------------------------------------------------
            │       class Count(Aggregate): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Max.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Aggregate import Aggregate
            │       #-------------------------------------------------------------------------------
            │       class Max(Aggregate): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Min.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Aggregate import Aggregate
            │       #-------------------------------------------------------------------------------
            │       class Min(Aggregate): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Sum.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Aggregate import Aggregate
            │       #-------------------------------------------------------------------------------
            │       class Sum(Aggregate): ...
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Avg   import Avg
            │       from .Count import Count
            │       from .Max   import Max
            │       from .Min   import Min
            │       from .Sum   import Sum
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Avg",
            │           "Count",
            │           "Max",
            │           "Min",
            │           "Sum"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [column]
            │   ├── Column.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..datatypes.DataType import DataType       # データ型　<-インポートエラー回避
            │       from ..constraints        import AutoIncrement  # 自動採番
            │       from ..constraints        import PrimaryKey     # 主キークラス
            │       from ..constraints        import Default        # デフォルト値クラス
            │       from ..constraints        import NotNull        # NotNullクラス
            │       from ..constraints        import Unique         # ユニーク設定クラス
            │       from ..constraints        import ForeignKey     # 外部キー制約クラス
            │       from ..common             import public         # パブリックメソッド
            │       from ..common             import private        # プライベートメソッド
            │       from ..conditions         import Condition      # 条件クラス
            │       from ..conditions         import ConditionGroup # 条件クラス
            │       #-------------------------------------------------------------------------------
            │       class Column:
            │           """
            │           SQLのカラムを表現するためのクラス
            │           データ型、制約（主キー、NOT NULL、デフォルト値、ユニーク、外部キー）を定義し
            │           テーブル作成用のSQL構築やクエリビルダーでの利用を目的とする
            │           Attributes:
            │               columnName   (str)         : カラム名（Modelクラス側で自動設定）
            │               tableName    (str)         : テーブル名（Modelクラス側で自動設定）
            │               dataType     (DataType)    : カラムのデータ型
            │               dataTypeSql  (str)         : SQL用のデータ型文字列
            │               primaryKeySql(str)         : PRIMARY KEY 制約のSQL文字列
            │               defaultSql   (str)         : DEFAULT 制約のSQL文字列
            │               notNullSql   (str)         : NOT NULL 制約のSQL文字列
            │               uniqueSql    (str)         : UNIQUE 制約のSQL文字列
            │               foreignKeySql(str)         : FOREIGN KEY 制約のSQL文字列
            │           """
            │           #---------------------------------------------------------------------------
            │
            │           #---------------------------------------------------------------------------
            │           def __init__(
            │               self,
            │               dataType        : DataType,
            │               isPrimaryKey    : bool              = False,
            │               isAutoIncrement : bool              = False,
            │               default         : Default    | None = None,
            │               notNull         : NotNull    | None = None,
            │               unique          : Unique     | None = None,
            │               foreignKey      : ForeignKey | None = None
            │           ):
            │               """
            │               カラム情報を初期化する
            │               Args:
            │                   dataType        (DataType)           : カラムのデータ型
            │                   isPrimaryKey    (bool)               : 主キー
            │                   isAutoIncrement (bool)               : 自動採番
            │                   default         (Default | None)     : デフォルト値
            │                   notNull         (NotNull | None)     : NOT NULL制約
            │                   unique          (Unique | None)      : UNIQUE制約
            │                   foreignKey      (ForeignKey | None)  : 外部キー制約
            │               Raises:
            │                   ValueError : dataTypeがNoneの場合
            │               """
            │               # インスタンス属性の付与
            │               self.dataType   = dataType
            │               self.default    = default
            │               self.notNull    = notNull
            │               self.unique     = unique
            │               self.foreignKey = foreignKey
            │               # SQLの設定
            │               self.__setDataTypeSql(dataType)
            │               self.__setPrimaryKeySql(isPrimaryKey)
            │               self.__setAutoIncrement(isAutoIncrement)
            │               self.__setDefaultSql(default)
            │               self.__setNotNullSql(notNull)
            │               self.__setUniqueSql(unique)
            │               self.__setForeignKeySql(foreignKey)
            │               # カラム名とテーブル名
            │               self.columnName : str
            │               self.tableName  : str
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setDataTypeSql(self, dataType: DataType | None) -> None:
            │               """
            │               データ型に応じたSQL文字列を設定する
            │               Args:
            │                   dataType (DataType | None): データ型オブジェクト
            │               Raises:
            │                   ValueError : Noneが渡された場合
            │               """
            │               if dataType is not None:
            │                   self.dataTypeSql = dataType.toSql()
            │               else:
            │                   raise ValueError("データ型が指定されていません")
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setPrimaryKeySql(self, isPrimaryKey : bool) -> None:
            │               """
            │               PRIMARY KEY 制約をSQL文字列として設定する
            │               Args:
            │                   isPrimaryKey (bool): 主キーにするかどうか
            │               """
            │               if isPrimaryKey:
            │                   self.primaryKeySql = PrimaryKey().toSql()
            │               else:
            │                   self.primaryKeySql = ""
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setAutoIncrement(self, isAutoIncrement : bool ) -> None:
            │               """
            │               AUTO INCREMENT 制約をSQL文字列として設定する
            │               Args:
            │                   isAutoIncrement (bool) : 自動採番するかどうか
            │               """
            │               if isAutoIncrement:
            │                   self.autoIncrementSql = AutoIncrement().toSql()
            │               else:
            │                   self.autoIncrementSql = ""
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setDefaultSql(self, default : Default | None) -> None:
            │               """
            │               DEFAULT 制約をSQL文字列として設定する
            │               Args:
            │                   default (Default | None): デフォルト値
            │               """
            │               self.defaultSql = default.toSql() if default else ""
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setNotNullSql(self, notNull : NotNull | None) -> None:
            │               """
            │               NOT NULL 制約をSQL文字列として設定する
            │               Args:
            │                   notNull (NotNull | None): NOT NULL 制約
            │               """
            │               self.notNullSql = notNull.toSql() if notNull else ""
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setUniqueSql(self, unique : Unique | None) -> None:
            │               """
            │               UNIQUE 制約をSQL文字列として設定する
            │               Args:
            │                   unique (Unique | None): UNIQUE 制約
            │               """
            │               self.uniqueSql = unique.toSql() if unique else ""
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __setForeignKeySql(self, foreignKey : ForeignKey | None) -> None:
            │               """
            │               FOREIGN KEY 制約をSQL文字列として設定する
            │               Args:
            │                   foreignKey (ForeignKey | None): 外部キー制約
            │               """
            │               self.foreignKeySql = foreignKey.toSql() if foreignKey else ""
            │           #---------------------------------------------------------------------------
            │           @public
            │           def like(self, value):
            │               """LIKE演算子"""
            │               return Condition(self.columnName, "LIKE", value)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def In (self, *values):
            │               """IN演算子"""
            │               return Condition(self.columnName, "IN", values)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def notIn (self, *values):
            │               """NOT IN演算子"""
            │               return Condition(self.columnName, "NOTIN", (values))
            │           #---------------------------------------------------------------------------
            │           @public
            │           def between(self, before, after):
            │               """BETWEEN演算子"""
            │               return Condition(self.columnName, "BETWEEN", (before, after))
            │           #---------------------------------------------------------------------------
            │           def __str__(self) -> str:
            │               return self.columnName
            │           #---------------------------------------------------------------------------
            │           def __eq__(self, value):
            │               """
            │               等価比較演算子 ==
            │               Returns:
            │                   Condition : (columnName, '=', value)
            │               """
            │               return Condition(self.columnName, "=", value)
            │           #---------------------------------------------------------------------------
            │           def __ne__(self, value):
            │               """
            │               不等比較演算子 !=
            │               """
            │               return Condition(self.columnName, "!=", value)
            │           #---------------------------------------------------------------------------
            │           def __lt__(self, value):
            │               """
            │               小なり演算子 <
            │               """
            │               return Condition(self.columnName, "<", value)
            │           #---------------------------------------------------------------------------
            │           def __le__(self, value):
            │               """
            │               以下演算子 <=
            │               """
            │               return Condition(self.columnName, "<=", value)
            │           #---------------------------------------------------------------------------
            │           def __gt__(self, value):
            │               """
            │               大なり演算子 >
            │               """
            │               return Condition(self.columnName, ">", value)
            │           #---------------------------------------------------------------------------
            │           def __ge__(self, value):
            │               """
            │               以上演算子 >=
            │               """
            │               return Condition(self.columnName, ">=", value)
            │           #---------------------------------------------------------------------------
            │           def __and__(self, value):
            │               """
            │               AND演算子 AND
            │               """
            │               return ConditionGroup(self.columnName, "AND", value)
            │           #---------------------------------------------------------------------------
            │           def __or__(self, value):
            │               """
            │               OR演算子 OR
            │               """
            │               return ConditionGroup(self.columnName, "OR", value)
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Column import Column
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Column"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [common]
            │   ├── Override.py
            │       ↓ 内容（最大10000行）
            │       from typing import override
            │   ├── Private.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import inspect              # 呼び出し履歴を調べるのに使用
            │       from functools import wraps # デコレーターで
            │                                   # 元の関数名やドキュメントを保持するために使用
            │       #-------------------------------------------------------------------------------
            │       def private(func):
            │           """
            │           privateであること明示的にするメソッド
            │           """
            │           @wraps(func)
            │           def wrapper(*args, **kwargs):
            │               # 呼び出し元のスタック情報を取得
            │               callerFrame    = inspect.stack()[1]
            │               # 呼び出し元のモジュールを取得
            │               # 呼び出したコードが属しているモジュール
            │               callModule     = inspect.getmodule(callerFrame[0])
            │               # この@privateメソッドが定義されているモジュール
            │               dediningModule = inspect.getmodule(func)
            │               # モジュールが違う場合はエラー
            │               if not callModule == dediningModule:
            │                   raise PermissionError(
            │                       f"'{func.__name__}'はプライベートです"
            │                   )
            │               else:
            │                   return func(*args, **kwargs)
            │           return wrapper
            │       #-------------------------------------------------------------------------------
            │   ├── Public.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import inspect              # 呼び出し履歴を調べるのに使用
            │       from functools import wraps # デコレーターで
            │                                   # 元の関数名やドキュメントを保持するために使用
            │       #-------------------------------------------------------------------------------
            │       def public(func):
            │           """
            │           publicであること明示的にするメソッド
            │           """
            │           @wraps(func)
            │           def wrapper(*args, **kwargs):
            │               # 関数を呼び出したモジュールの名前
            │               caller  = inspect.stack()[1].frame.f_globals.get("__name__")
            │               # 関数が定義されているモジュールの名前
            │               current = func.__globals__.get("__name__")
            │               if not caller == current:
            │                   pass
            │                   # print(f"外部モジュール内で{func.__name__}を呼び出し")
            │               else:
            │                   pass
            │                   # print(f"同一モジュール内で{func.__name__}を呼び出し")
            │               return func(*args, ** kwargs)
            │           # メタ情報としてpublicであること示す
            │           return wrapper
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Override import override
            │       from .Private  import private
            │       from .Public   import public
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "override",
            │           "private",
            │           "public"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [conditions]
            │   ├── Condition.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       class Condition:
            │           #---------------------------------------------------------------------------
            │           def __init__(self, left, operator = None, right = None):
            │               self.left     = left
            │               self.operator = operator
            │               self.right    = right
            │           #---------------------------------------------------------------------------
            │           def toSql(self, placeHolder = "?"):
            │               # leftがConditonオブジェクトなら,再帰的にtoSql()を呼び出す
            │               if isinstance(self.left, Condition):
            │                   # 複数条件をネストしてSQLに変換するため
            │                   leftSql, leftValues = self.left.toSql(placeHolder)
            │               # leftが単なる列名の場合文字列化してSQLとして扱う
            │               else:
            │                   leftSql    = str(self.left)
            │                   leftValues = []
            │
            │               # NULL判定(IS NULL / IS NOT NULL)
            │               if  isinstance(self.right, str) and self.right.upper() == "NULL":
            │                   sql = f"{leftSql} {self.operator} NULL"
            │                   return sql, leftValues
            │
            │               # IN/NOT IN条件の場合
            │               # rightがリストやタプルかどうか確認
            │               if  self.operator in ("IN", "NOT IN") \
            │               and isinstance(self.right, (list, tuple)):
            │                   if not self.right:
            │                       raise ValueError("IN句に空のリストは使えません")
            │                   # INの中身の値の個数に応じて, プレイスホルダーを並べる
            │                   placeHolders = ", ".join([placeHolder] * len(self.right))
            │                   sql = f"{leftSql} {self.operator} ({placeHolders})"
            │                   return sql, leftValues + list(self.right)
            │
            │               # BETWEEN/NOT BETWEEN条件の場合
            │               # 値は(下限, 上限)である必要あり
            │               if self.operator == "BETWEEN" \
            │               and  isinstance(self.right, (tuple, list)) \
            │               and  len(self.right) == 2:
            │                   sql = f"{leftSql} {self.operator} {placeHolder} AND {placeHolder}"
            │                   return sql, [self.right[0], self.right[1]]
            │
            │               # LIKE/NOT LIKE条件の場合
            │               if self.operator in ("LIKE", "NOT LIKE"):
            │                   sql = f"{leftSql} {self.operator} {placeHolder}"
            │                   return sql, leftValues + [self.right]
            │
            │               # 論理式(AND/OR/NOT)
            │               # rightがconditionオブジェクトなら, 再帰的にtoSql()を呼び出す
            │               if isinstance(self.right, Condition):
            │                   rightSql, rightValues = self.right.toSql(placeHolder)
            │                   sql = f"{leftSql} {self.operator} {rightSql}"
            │                   return sql, leftValues + rightValues
            │
            │               # 単独NOT
            │               if self.operator == "NOT" and isinstance(self.right,Condition):
            │                   rightSql, rightValues = self.right.toSql(placeHolder)
            │                   sql = f"(NOT {rightSql})"
            │                   return sql, rightValues
            │
            │               # 通常の比較演算子(=, !=, >, ...)
            │               sql = f"({leftSql} {self.operator} {placeHolder})"
            │               return sql, \
            │                      leftValues + ([self.right] if self.right is not None else [])
            │           #---------------------------------------------------------------------------
            │           def __and__(self, other):
            │               return Condition(self, "AND", other)
            │           #---------------------------------------------------------------------------
            │           def __or__(self, other):
            │               return Condition(self, "OR", other)
            │       #-------------------------------------------------------------------------------
            │   ├── ConditionGroup.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Condition import Condition
            │       #-------------------------------------------------------------------------------
            │       class ConditionGroup(Condition):
            │           def __init__(
            │                   self,
            │                   left,
            │                   operator = None,
            │                   right    = None
            │               ):
            │               super().__init__(left, operator, right)
            │           #---------------------------------------------------------------------------
            │           def __str__(self):
            │               return super().__str__()
            │       #-------------------------------------------------------------------------------
            │   ├── Regexp.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Condition import Condition
            │       #-------------------------------------------------------------------------------
            │       class Regexp(Condition):
            │           def __init__(self, value : str) -> None:
            │               self.value = value
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Condition      import Condition
            │       from .ConditionGroup import ConditionGroup
            │       from .Regexp         import Regexp
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Condition",
            │           "ConditionGroup",
            │           "Regexp"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [config]
            │   ├── Config.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from __future__ import annotations # 循環インポートを回避する用
            │       from typing import TYPE_CHECKING
            │       #-------------------------------------------------------------------------------
            │       if TYPE_CHECKING:
            │           from ..engine import Sqlite3Engine      #
            │           from ..engine import AsyncSqlite3Engine #
            │           from ..engine import MySqlEngine        #
            │           from ..engine import AsyncMySqlEngine   #
            │       #-------------------------------------------------------------------------------
            │       class Config:
            │           sqlEngine      : Sqlite3Engine       | MySqlEngine      | None = None
            │           asyncSqlEngine : AsyncSqlite3Engine  | AsyncMySqlEngine | None = None
            │           database : str | None = None
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       from .Config import Config
            │       __all__ = [
            │           "Config"
            │       ]
            ├── [constraints]
            │   ├── AutoIncrement.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class AutoIncrement(Constraints):
            │           def __init__(self) -> None:
            │               ...
            │           @public
            │           def toSql(self) -> str:
            │               return "AUTOINCREMENT"
            │       #-------------------------------------------------------------------------------
            │   ├── Check.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class Check(Constraints): ...
            │       #-------------------------------------------------------------------------------
            │   ├── Constraints.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common import public
            │       #-------------------------------------------------------------------------------
            │       class Constraints:
            │           """制約"""
            │           def __init__(self) -> None: ...
            │           #---------------------------------------------------------------------------
            │           @public
            │           def toSql(self) -> str: ...
            │       #-------------------------------------------------------------------------------
            │   ├── Default.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class Default(Constraints):
            │           def __init__(self, value: str | int | float | bool | None):
            │               """
            │               デフォルト値の定義クラス
            │               Args:
            │                   value (str | int | float | bool | None): デフォルト値
            │               """
            │               self.setValue(value)
            │           #---------------------------------------------------------------------------
            │           @private
            │           def setValue(self, value: str | int | float | bool | None):
            │               """
            │               デフォルト値を設定（内部用）
            │               Raises:
            │                   TypeError: 非対応のデータ型の場合
            │               """
            │               if isinstance(value, (str, int, float, bool)) or value is None:
            │                   self.value = value
            │               else:
            │                   raise TypeError(
            │                       f"デフォルト値として使用できない型: {type(value).__name__}"
            │                   )
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getValue(self) -> str | int | float | bool | None:
            │               """
            │               デフォルト値を取得
            │               Returns:
            │                   str | int | float | bool | None: デフォルト値
            │               """
            │               return self.value
            │           #---------------------------------------------------------------------------
            │           @public
            │           def toSql(self) -> str:
            │               """
            │               SQL文の DEFAULT 句に変換
            │               Returns:
            │                   str: SQL形式のDEFAULT句（例: DEFAULT 1）
            │               """
            │               if self.value is None:
            │                   return ""
            │               elif isinstance(self.value, str):
            │                   return f"DEFAULT '{self.value}'"
            │               elif isinstance(self.value, bool):
            │                   return "DEFAULT TRUE" if self.value else "DEFAULT FALSE"
            │               else:
            │                   return f"DEFAULT {self.value}"
            │       #-------------------------------------------------------------------------------
            │
            │       #-------------------------------------------------------------------------------
            │   ├── ForeignKey.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class ForeignKey(Constraints):
            │           """
            │           外部キー制約の定義クラス
            │           """
            │           def __init__(
            │                   self,
            │                   referenceName : str,
            │                   onUpdate      : bool | None = None,
            │                   onDelete      : bool | None = None
            │               ):
            │               """
            │               外部キー制約の定義クラス
            │               Args:
            │                   referenceName (str)  : "table.column" 形式の参照名
            │                   onUpdate      (bool | None) : ON UPDATE CASCADE の適用有無
            │                                                 Noneなら未明示
            │                   onDelete      (bool | None) : ON DELETE CASCADE の適用有無
            │                                                 Noneなら未明示
            │               """
            │               self.setReferenceName(referenceName)
            │               # カラムの変更があった場合,更新するかどうか
            │               self.onUpdate = onUpdate
            │               # カラムの変更があった場合,削除するかどうか
            │               self.onDelete = onDelete
            │           #---------------------------------------------------------------------------
            │           @private
            │           def setReferenceName(self, referenceName : str):
            │               # 文字列かどうか判断
            │               if not isinstance(referenceName, str):
            │                   raise TypeError("文字列である必要があります")
            │               else: pass
            │               strings : list = referenceName.split(".")
            │               # 指定された文字列を分離させる
            │               # User.user_id
            │               if  len(strings) == 2:
            │                   # 参照先のテーブル
            │                   self.referencedTable  = strings[0] # User
            │                   # 参照先のカラム
            │                   self.referencedColumn = strings[1] # user_id
            │               else:
            │                   raise ValueError(
            │                       f"入力された値 '{referenceName}' が間違っています"
            │                   )
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getReferencedTable(self) -> str:
            │               """
            │               参照先のテーブル名の取得
            │               Returns:
            │                   参照先のテーブル名
            │               """
            │               return self.referencedTable
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getReferencedColumn(self) -> str:
            │               """
            │               参照先のテーブルのカラムの取得
            │               Returns:
            │                   str : 参照先のテーブルのカラム
            │               """
            │               return self.referencedColumn
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getOnUpdate(self) -> bool | None:
            │               """
            │               更新時に連動するかを取得
            │               Returns:
            │                   bool : 更新するならTrue
            │                          しないならFalse
            │                          未明示ならNone
            │               """
            │               return self.onUpdate
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getOnDelete(self) -> bool  | None:
            │               """
            │               削除時に連動するかを取得
            │               Returns:
            │                   bool : 更新するならTrue
            │                          しないならFalse
            │                          未明示ならNone
            │               """
            │               return self.onDelete
            │           #---------------------------------------------------------------------------
            │           @public
            │           def toSql(self) -> str:
            │               """
            │               外部キー制約をSQL形式で返す
            │               Returns:
            │                   str : 外部キー制約のSQL文
            │               Notes:
            │                   FOREIGN KEY (~~~) ... で出力されるのでカラム名が決定したら
            │                   ~~~を入れ替える必要あり
            │               """
            │               # SQL
            │               sql = f"FOREIGN KEY (~~~) "\
            │                   + f"REFERENCES {self.referencedTable}({self.referencedColumn})"
            │               # 更新時に連動するなら
            │               if self.onUpdate is None:
            │                   pass # Noneならsqlに未明示
            │               elif self.onUpdate == True:
            │                   sql += " ON UPDATE CASCADE"
            │               else:
            │                   sql += " ON UPDATE NO ACTION"
            │               # 削除時に連動するなら
            │               if self.onDelete is None:
            │                   pass # Noneならsqlに未明示
            │               elif self.onDelete == True:
            │                   sql += " ON DELETE CASCADE"
            │               else:
            │                   sql += " ON DELETE NO ACTION"
            │               return sql
            │       #-------------------------------------------------------------------------------
            │   ├── NotNull.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class NotNull(Constraints):
            │           def __init__(
            │                   self,
            │                   enabled: bool | None = None
            │               ):
            │               """
            │               NOT NULL 制約を管理するクラス
            │               Args:
            │                   enabled (bool | None): TrueならNOT NULL有効
            │                                          Falseなら無効
            │                                          Noneなら未明示
            │               """
            │               self.setEnabled(enabled)
            │           #---------------------------------------------------------------------------
            │           @private
            │           def setEnabled(
            │                   self,
            │                   enabled: bool | None
            │               ) -> None:
            │               if enabled is not None \
            │               and not isinstance(enabled, bool):
            │                   raise TypeError("enabledはboolまたはNoneである必要があります")
            │               self.enabled = enabled
            │           #---------------------------------------------------------------------------
            │           @public
            │           def isEnabled(self) -> bool | None:
            │               """
            │               NOT NULLが有効かどうかを取得する
            │               Returns:
            │                   bool | None: 有効ならTrue
            │                                無効ならFalse
            │                                未明示ならNone
            │               """
            │               return self.enabled
            │           #---------------------------------------------------------------------------
            │           @public
            │           def toSql(self) -> str:
            │               """
            │               SQL形式のNOT NULL制約文字列を返す
            │               Returns:
            │                   str: NOT NULLまたは 空文字（未明示の場合）
            │               """
            │               if self.enabled is None:
            │                   return ""
            │               elif self.enabled:
            │                   return "NOT NULL"
            │               else:
            │                   return ""
            │       #-------------------------------------------------------------------------------
            │   ├── PrimaryKey.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class PrimaryKey(Constraints):
            │           """
            │           主キー制約クラス
            │           """
            │           def __init__(self):
            │               """
            │
            │               """
            │           #---------------------------------------------------------------------------
            │           def toSql(self) -> str:
            │               """
            │               主キー制約のSQLを生成
            │               Returns:
            │                   str: PRIMARY KEY制約のSQL
            │               """
            │               return "PRIMARY KEY"
            │       #-------------------------------------------------------------------------------
            │   ├── Unique.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Constraints import Constraints # 基底クラス
            │       from ..common     import private     # プライベートメソッド
            │       from ..common     import public      #　パブリックメソッド
            │       #-------------------------------------------------------------------------------
            │       class Unique(Constraints):
            │           """
            │           ユニーク制約クラス
            │           """
            │           def __init__(self):
            │               """
            │               """
            │           #---------------------------------------------------------------------------
            │           def toSql(self) -> str:
            │               """
            │               ユニーク制約のSQLを生成
            │               Returns:
            │                   str: UNIQUE制約のSQL
            │               """
            │
            │               return "UNIQUE"
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .AutoIncrement     import AutoIncrement
            │       from .Check             import Check
            │       from .Constraints       import Constraints
            │       from .Default           import Default
            │       from .ForeignKey        import ForeignKey
            │       from .NotNull           import NotNull
            │       from .PrimaryKey        import PrimaryKey
            │       from .Unique            import Unique
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "AutoIncrement",
            │           "Check",
            │           "Constraints",
            │           "Default",
            │           "ForeignKey",
            │           "NotNull",
            │           "PrimaryKey",
            │           "Unique"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [csv]
            │   ├── CSV.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import csv
            │       from typing   import cast, Any      # 型チェック用
            │       from ..common import public         # パブリックメソッド
            │       from ..common import private        # プライベートメソッド
            │       from ..config import Config         # コンフィグクラス
            │       from ..model  import Model          # モデルクラス
            │       from ..engine import MySqlEngine    # MySQLエンジンクラス
            │       from ..engine import Sqlite3Engine  # Sqlite3エンジンクラス
            │       #-------------------------------------------------------------------------------
            │       class CSV:
            │           #---------------------------------------------------------------------------
            │           def __init__(self, model : type[Model]) -> None:
            │               self.__model     = model
            │               self.__tableName = self.__model.tableName
            │           #---------------------------------------------------------------------------
            │           @property
            │           @public
            │           def sqlEngine(self):
            │               """sqlエンジンの設定"""
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @property
            │           @public
            │           def database(self):
            │               """データベースの設定"""
            │               database = Config.database
            │               if database is None:
            │                   raise Exception("データベースが未設定です")
            │               return database
            │           #---------------------------------------------------------------------------
            │           @public
            │           def createTable(self):
            │               try:
            │                   self.__model.createTableIfNotExists()
            │               except:
            │                   raise Exception("テーブルの作成に失敗しました")
            │           #---------------------------------------------------------------------------
            │           @public
            │           def importToDatabase(self, filePath : str):
            │               """
            │               CSVファイルをデータベースにインポートする
            │               """
            │               # CSVファイルの読み込みと分離
            │               header, data = self.__parseCSV(filePath)
            │               # DB側のカラムと照合
            │               dbColumns = self.__getTableColumns()
            │               if not set(header) == set(dbColumns):
            │                   raise Exception("CSVファイルのヘッダーとDBのカラムが一致していません")
            │               # プレイスホルダー
            │               placeHolders = "(" \
            │                            + ", ".join([self.sqlEngine.PLACEHOLDER * len(header)]) \
            │                            + ")"
            │               # カラムのSQL
            │               columnsSql = "(" \
            │                          + ", ".join([f"{col}" for col in header]) \
            │                          + ")"
            │               # クエリ
            │               query = f"INSERT INTO {self.__tableName} " \
            │                     + f"{columnsSql} VALUES {placeHolders}"
            │               # クエリの実行
            │               try:
            │                   self.sqlEngine.executeAny(query, data)
            │                   self.sqlEngine.commit()
            │               except Exception as e:
            │                   self.sqlEngine.rollback()
            │                   raise Exception(f"データの挿入に失敗しました: {e}")
            │           #---------------------------------------------------------------------------
            │           @public
            │           def exportFromDatabase(self,  filePath : str):
            │               """
            │               データベースをCSVファイルにエクスポートする
            │               """
            │               # クエリ
            │               query = f"SELECT * FROM {self.__tableName};"
            │               cur = self.sqlEngine.cursor()
            │               cur.execute(query)
            │               data = cur.fetchall()
            │               # CSVに書き込む
            │               with open(filePath, mode = "w", newline = "", encoding = "utf-8") as f:
            │                   writer = csv.writer(f)
            │                   writer.writerow(self.__getTableColumns())
            │                   writer.writerows(data)
            │               print(f"{filePath}を作成しました")
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __parseCSV(self, filePath : str) -> tuple[list[str], list[tuple]]:
            │               try:
            │                   with open(filePath, newline = "", encoding= "utf-8") as csvFile:
            │                       reader = csv.reader(csvFile)
            │                       header = next(reader)
            │                       if not header:
            │                           raise ValueError("CSVファイルにヘッダーが存在しません")
            │                       data = []
            │                       for row in reader:
            │                           if not len(row) == len(header):
            │                               raise ValueError("CSVの行とヘッダーの列数が一致しません")
            │                           data.append(tuple(row))
            │                       return header, data
            │               except FileNotFoundError:
            │                   raise FileNotFoundError("CSVファイルが存在しません")
            │               except StopIteration:
            │                   raise ValueError("CSVファイルが空です")
            │               except Exception as e:
            │                   raise Exception(f"CSVファイルの読み込みに失敗しました: {e}")
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __getTableColumns(self):
            │               # MYSQLの場合
            │               if isinstance(self.sqlEngine, MySqlEngine):
            │                   # クエリ
            │                   query = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS " \
            │                         + f"WHERE TABLE_SCHEMA = {self.sqlEngine.PLACEHOLDER}" \
            │                         + f"AND TABLE_NAME = {self.sqlEngine.PLACEHOLDER};"
            │                   cur = self.sqlEngine.cursor(dictionary = True)
            │                   cur.execute(query, (self.database, self.__tableName))
            │                   # 型チェック
            │                   rows = cast(list[dict[str, Any]], cur.fetchall())
            │                   return [row["COLUMN_NAME"] for row in rows]
            │               # Sqlite3の場合
            │               elif isinstance(self.sqlEngine, Sqlite3Engine):
            │                   # クエリ
            │                   query = f"PRAGMA table_info({self.__tableName});"
            │                   cur = self.sqlEngine.cursor()
            │                   cur.execute(query)
            │                   return [row[1] for row in cur.fetchall()]
            │               else:
            │                   raise Exception("エンジンが未設定です")
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .CSV import CSV
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "CSV"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [datatypes]
            │   ├── Array.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Array(DataType):
            │           """配列型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.ARRAY)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.ARRAY)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Auto.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Auto(DataType):
            │           """自動採番型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.AUTO)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.AUTO)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Blob.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Blob(DataType):
            │           """バイナリデータ型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.BLOB)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.BLOB)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Boolean.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Boolean(DataType):
            │           """論理値型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.BOOLEAN)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.BOOLEAN)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Char.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Char(DataType):
            │           """固定長文字列型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.CHAR)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.CHAR)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Cidr.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Cidr(DataType):
            │           """サブネット型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.CIDR)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.CIDR)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── DataType.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common import public
            │       #-------------------------------------------------------------------------------
            │       class DataType:
            │           """
            │           データ型の基底クラス
            │           Attributes:
            │               query     (str) : 使用するSQLのデータ型のクエリ
            │               length    (int) : 使用するSQLのデータ型の最大文字数の長さ
            │               precision (int)  : 使用するSQLのデータの精度
            │           """
            │           sqlEngine : None
            │           #---------------------------------------------------------------------------
            │           def __init__(
            │                   self,
            │                   query     : str | None = None,
            │                   length    : int | None = None,
            │                   precision : int | None = None
            │               ):
            │               self.query     = query
            │               self.length    = length
            │               self.precision = precision
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getQuery(self) -> str | None:
            │               """
            │               データ型のクエリ名の取得
            │               Returns:
            │                   str | None: 設定されたクエリ文字列
            │               """
            │               return self.query
            │           #---------------------------------------------------------------------------
            │           @public
            │           def setQuery(
            │               self,
            │               query : str | None = None
            │           ) -> None:
            │               """
            │               Args:
            │                   query (str): クエリ文字列
            │               Raises:
            │                   TypeError : 引数が文字列でない場合
            │               """
            │               if query is None or isinstance(query, str):
            │                   self.query = query
            │               else:
            │                   raise TypeError("型が違います")
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getLength(self) -> int | None:
            │               """
            │               データの長さ（文字数やバイト長）を取得する
            │               Returns:
            │                   int | None: 設定された長さ
            │               """
            │               return self.length
            │           #---------------------------------------------------------------------------
            │           @public
            │           def setLength(
            │               self,
            │               length : int | None = None
            │           ) -> None:
            │               """
            │               データの長さを設定する
            │               Args:
            │                   length (int): 最大長
            │               Raises:
            │                   TypeError: 引数が整数でない場合
            │               """
            │               # 型チェック
            │               if length is None or isinstance(length, int):
            │                   self.length = length
            │               else:
            │                   raise TypeError("型が違います")
            │           #---------------------------------------------------------------------------
            │           @public
            │           def getPrecision(self) -> int | None:
            │               """
            │               精度を取得する（例：小数点以下の桁数)
            │               Returns:
            │                   int | None: 設定された精度
            │               """
            │               return self.precision
            │           #---------------------------------------------------------------------------
            │           @public
            │           def setPrecision(
            │               self,
            │               precision : int | None = None
            │           ) -> None:
            │               """
            │               精度を設定する
            │               Args:
            │                   precision (int) : 小数点以下の桁数など
            │
            │               Raises:
            │                   TypeError: 引数が整数でない場合
            │               """
            │               # 型チェック
            │               if precision is None or isinstance(precision, int):
            │                   self.precision = precision
            │               else:
            │                   raise TypeError("型が違います")
            │           #---------------------------------------------------------------------------
            │           @public
            │           def toSql(self) -> str:
            │               """
            │               設定をもとにSQLの型定義文字列を生成して返す
            │               Returns:
            │                   str: SQLの型定義文字列
            │               """
            │               # 長さが未定義(None)ではなくかつ制度が未定義(None)ではないとき
            │               if  self.length    is not None \
            │               and self.precision is not None:
            │                   return f"{self.query}({self.length},{self.precision})"
            │               # 長さが未定義(None)ではないとき
            │               elif self.length is not None:
            │                   return f"{self.query}({self.length})"
            │               # 長さが未定義(None)であり、かつ制度が未定義(None)であるとき
            │               else:
            │                   return self.query if self.query else ""
            │
            │       #-------------------------------------------------------------------------------
            │   ├── Date.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Date(DataType):
            │           """日付型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.DATE)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.DATE)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── DateTime.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class DateTime(DataType):
            │           """日付型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.DATETIME)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.DATETIME)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Decimal.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Decimal(DataType):
            │           """固定小数点型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.DECIMAL)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.DECIMAL)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Double.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Double(DataType):
            │           """倍精度浮動小数点型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.DOUBLE)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.DOUBLE)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Enum.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Enum(DataType):
            │           """列挙型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.ENUM)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.ENUM)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── File.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class File(DataType):
            │           """ファイル型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.FILE)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.FILE)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Float.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Float(DataType):
            │           """浮動小数点型"""
            │           def __init__(
            │                   self,
            │                   length    : int | None = None,
            │                   precision : int | None = None
            │               ):
            │               """
            │               浮動小数点型 \n
            │               Args: \n
            │                   length    (int) : 長さ \n
            │                   precision (str) : 精度 \n
            │               """
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(
            │                       query     = Config.sqlEngine.FLOAT,
            │                       length    = length,
            │                       precision = precision
            │                   )
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(
            │                       query     = Config.asyncSqlEngine.FLOAT,
            │                       length    = length,
            │                       precision = precision
            │                   )
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Geometry.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Geometry(DataType):
            │           """空間情報型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.GEOMETRY)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.GEOMETRY)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── GeometryCollection.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class GeometryCollection(DataType):
            │           """GEOMETRYCOLLECTION型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.GEOMETRYCOLLECTION)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.GEOMETRYCOLLECTION)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Hstore.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Hstore(DataType):
            │           """HSTORE型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.HSTORE)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.HSTORE)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Inet.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Inet(DataType):
            │           """IPv4/IPv6型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.INET)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.INET)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Integer.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Integer(DataType):
            │           """整数型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.INTEGER)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.INTEGER)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Json.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Json(DataType):
            │           """JSON文字列型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.JSON)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.JSON)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── LineString.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class LineString(DataType):
            │           """線型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.LINESTRING)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.LINESTRING)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Long.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Long(DataType):
            │           """長整数型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.LONG)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.LONG)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── LongBlob.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class LongBlob(DataType):
            │           """非常に大きなBLOB型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.LONGBLOB)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.LONGBLOB)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── LongText.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class LongText(DataType):
            │           """非常に大きなテキスト"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.LONGTEXT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.LONGTEXT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── MediumBlob.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class MediumBlob(DataType):
            │           """中程度のBLOB型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.MEDIUMBLOB)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMBLOB)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── MediumInt.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class MediumInt(DataType):
            │           """中間の整数型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.MEDIUMINT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMINT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── MediumText.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class MediumText(DataType):
            │           """中程度のテキスト型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.MEDIUMTEXT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.MEDIUMTEXT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── MultiLineString.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class MultiLineString(DataType):
            │           """MULTILINESTRING型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.MULTILINESTRING)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.MULTILINESTRING)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── MultiPolygon.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class MultiPolygon(DataType):
            │           """MULTIPOLYGON型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.MULTIPOLYGON)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.MULTIPOLYGON)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Null.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Null(DataType):
            │           """NULL型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.NULL)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.NULL)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Numeric.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Numeric(DataType):
            │           """DECIMALの別名型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.NUMERIC)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.NUMERIC)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Point.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Point(DataType):
            │           """座標点型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.POINT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.POINT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Polygon.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Polygon(DataType):
            │           """ポリゴン型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.POLYGON)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.POLYGON)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Serial.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Serial(DataType):
            │           """自動採番型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.SERIAL)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.SERIAL)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Set.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Set(DataType):
            │           """複数選択型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.SET)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.SET)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── SmallInt.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class SmallInt(DataType):
            │           """小さい整数型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.SMALLINT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.SMALLINT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Text.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Text(DataType):
            │           """テキスト型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TEXT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TEXT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Time.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Time(DataType):
            │           """時刻型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TIME)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TIME)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── TimeStamp.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class TimeStamp(DataType):
            │           """タイムスタンプ型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TIMESTAMP)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TIMESTAMP)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── TinyBlob.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class TinyBlob(DataType):
            │           """小さなBLOB型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TINYBLOB)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TINYBLOB)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── TinyInt.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class TinyInt(DataType):
            │           """非常に小さい整数型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TINYINT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TINYINT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── TinyText.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class TinyText(DataType):
            │           """小さなテキスト型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.TINYTEXT)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.TINYTEXT)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Uuid.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Uuid(DataType):
            │           """UUID型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.UUID)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.UUID)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── VarChar.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class VarChar(DataType):
            │           """可変長文字列型"""
            │           def __init__(
            │                   self,
            │                   length : int
            │               ):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(
            │                       query  = Config.sqlEngine.VARCHAR,
            │                       length = length
            │                       )
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(
            │                       query  = Config.asyncSqlEngine.VARCHAR,
            │                       length = length
            │                       )
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Xml.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Xml(DataType):
            │           """XML型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.XML)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.XML)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   ├── Year.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DataType import DataType # データ型クラス
            │       from ..config  import Config   # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Year(DataType):
            │           """年型"""
            │           def __init__(self):
            │               # エンジンと非同期エンジンが未設定なら
            │               if Config.sqlEngine is None and Config.asyncSqlEngine is None:
            │                   raise Exception("エンジンが未設定です")
            │               # エンジンが設定されていて、非同期エンジンが未設定
            │               elif Config.asyncSqlEngine is None and Config.sqlEngine is not None:
            │                   super().__init__(query = Config.sqlEngine.YEAR)
            │               # エンジンが未設定されていて、非同期エンジンが設定されている
            │               elif Config.sqlEngine is None and Config.asyncSqlEngine is not None:
            │                   super().__init__(query = Config.asyncSqlEngine.YEAR)
            │               else:
            │                   raise Exception("エンジン設定エラー")
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Integer            import Integer
            │       from .Long               import Long
            │       from .SmallInt           import SmallInt
            │       from .TinyInt            import TinyInt
            │       from .MediumInt          import MediumInt
            │
            │       from .Float              import Float
            │       from .Double             import Double
            │       from .Decimal            import Decimal
            │
            │       from .Char               import Char
            │       from .VarChar            import VarChar
            │       from .Text               import Text
            │       from .TinyText           import TinyText
            │       from .MediumText         import MediumText
            │       from .LongText           import LongText
            │
            │       from .Blob               import Blob
            │       from .TinyBlob           import TinyBlob
            │       from .MediumBlob         import MediumBlob
            │       from .LongBlob           import LongBlob
            │
            │       from .Date               import Date
            │       from .DateTime           import DateTime
            │       from .Time               import Time
            │       from .TimeStamp          import TimeStamp
            │       from .Year               import Year
            │
            │       from .Boolean            import Boolean
            │       from .Null               import Null
            │       from .Auto               import Auto
            │       from .Serial             import Serial
            │       from .Uuid               import Uuid
            │
            │       from .Enum               import Enum
            │       from .Set                import Set
            │
            │       from .Json               import Json
            │       from .Array              import Array
            │       from .File               import File
            │
            │
            │       from .Geometry           import Geometry
            │       from .Point              import Point
            │       from .LineString         import LineString
            │       from .Polygon            import Polygon
            │       from .MultiLineString    import MultiLineString
            │       from .MultiPolygon       import MultiPolygon
            │       from .GeometryCollection import GeometryCollection
            │
            │       #-------------------------------------------------------------------------------
            │
            │       __all__ = [
            │           "Integer",
            │           "Long",
            │           "SmallInt",
            │           "TinyInt",
            │           "MediumInt",
            │           "Float",
            │           "Double",
            │           "Decimal",
            │           "Char",
            │           "VarChar",
            │           "Text",
            │           "TinyText",
            │           "MediumText",
            │           "LongText",
            │           "Blob",
            │           "TinyBlob",
            │           "MediumBlob",
            │           "LongBlob",
            │           "Date",
            │           "DateTime",
            │           "Time",
            │           "TimeStamp",
            │           "Year",
            │           "Boolean",
            │           "Null",
            │           "Auto",
            │           "Serial",
            │           "Uuid",
            │           "Enum",
            │           "Set",
            │           "Json",
            │           "Array",
            │           "File",
            │           "Geometry",
            │           "Point",
            │           "LineString",
            │           "Polygon",
            │           "MultiLineString",
            │           "MultiPolygon",
            │           "GeometryCollection",
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [ddl]
            │   ├── DDL.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common     import private   # プライベートメソッド
            │       from ..common     import public    # パブリックメソッド
            │       from ..config     import Config    # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class DDL:
            │           #---------------------------------------------------------------------------
            │           def __init__(self, sql : str) -> None:
            │               self.__sql = sql
            │           #---------------------------------------------------------------------------
            │           @property
            │           @private
            │           def __sqlEngine(self):
            │               """
            │               sqlエンジンの設定
            │               """
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @public
            │           def execute(self):
            │               self.__sqlEngine.execute(self.__sql)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def commit(self):
            │               self.__sqlEngine.commit()
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .DDL import DDL
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "DDL"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [engine]
            │   ├── [base]
            │   │   ├── [datetypes]
            │   │   │   ├── MySqlDateTypes.py
            │   │   │       ↓ 内容（最大10000行）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       from .SqlDateTypes import SqlDateTypes
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       class MySqlDateTypes(SqlDateTypes):
            │   │   │           """MySQLのデータ型クラス"""
            │   │   │           #---------------------------------------------------------------------------
            │   │   │           # データ型定義（MySQLの型に対応）
            │   │   │           INTEGER     = "INT"                  # 整数型（32bit）
            │   │   │           LONG        = "BIGINT"               # 長整数（64bit）
            │   │   │           SMALLINT    = "SMALLINT"             # 小さい整数（16bit）
            │   │   │           TINYINT     = "TINYINT"              # 非常に小さい整数（8bit）
            │   │   │           MEDIUMINT   = "MEDIUMINT"            # 中間の整数（24bit）
            │   │   │           FLOAT       = "FLOAT"                # 単精度浮動小数点
            │   │   │           DOUBLE      = "DOUBLE"               # 倍精度浮動小数点
            │   │   │           DECIMAL     = "DECIMAL"              # 高精度数値（任意精度）
            │   │   │           NUMERIC     = "NUMERIC"              # DECIMALの別名
            │   │   │           CHAR        = "CHAR"                 # 固定長文字列
            │   │   │           VARCHAR     = "VARCHAR"              # 可変長文字列
            │   │   │           TEXT        = "TEXT"                 # 長文（最大64KB）
            │   │   │           TINYTEXT    = "TINYTEXT"             # 小さなテキスト
            │   │   │           MEDIUMTEXT  = "MEDIUMTEXT"           # 中程度のテキスト
            │   │   │           LONGTEXT    = "LONGTEXT"             # 非常に大きなテキスト
            │   │   │           BLOB        = "BLOB"                 # バイナリデータ（最大64KB）
            │   │   │           TINYBLOB    = "TINYBLOB"             # 小さなBLOB
            │   │   │           MEDIUMBLOB  = "MEDIUMBLOB"           # 中程度のBLOB
            │   │   │           LONGBLOB    = "LONGBLOB"             # 非常に大きなBLOB
            │   │   │           DATE        = "DATE"                 # 日付（YYYY-MM-DD）
            │   │   │           TIME        = "TIME"                 # 時刻（HH:MM:SS）
            │   │   │           DATETIME    = "DATETIME"             # 日時（MySQL独自形式）
            │   │   │           TIMESTAMP   = "TIMESTAMP"            # タイムスタンプ
            │   │   │           YEAR        = "YEAR"                 # 年（4桁）
            │   │   │           BOOLEAN     = "BOOLEAN"              # 真偽値（TINYINT(1)の別名）
            │   │   │           NULL        = "NULL"                 # NULL明示
            │   │   │           AUTO        = "AUTO_INCREMENT"       # 自動採番
            │   │   │           UUID        = "CHAR(36)"             # UUID（関数UUID()で生成、文字列として保存）
            │   │   │           JSON        = "JSON"                 # JSON型（MySQL 5.7+）
            │   │   │           ENUM        = "ENUM"                 # 列挙型（値の列挙）
            │   │   │           SET         = "SET"                  # 複数選択型
            │   │   │           GEOMETRY    = "GEOMETRY"             # 空間情報型（GIS）
            │   │   │           POINT       = "POINT"                # 座標点
            │   │   │           LINESTRING  = "LINESTRING"           # 線
            │   │   │           POLYGON     = "POLYGON"              # ポリゴン
            │   │   │           XML         = "TEXT"                 # MySQLにXML専用型はない（TEXTで代替）
            │   │   │           HSTORE      = "TEXT"                 # MySQLはHSTOREなし
            │   │   │           INET        = "VARCHAR(45)"          # IPv4/IPv6用（最大45文字）
            │   │   │           CIDR        = "VARCHAR(43)"          # サブネット（"192.168.0.0/24"など）
            │   │   │           ARRAY       = "JSON"                 # MySQLは配列型なし → JSONで代替
            │   │   │           FILE        = "LONGBLOB"             # ファイル保存用（最大4GB）
            │   │   │           PLACEHOLDER = "%s"                   # プレースホルダー
            │   │   │           SERIAL             = "BIGINT UNSIGNED AUTO_INCREMENT"  # SERIAL
            │   │   │           MULTILINESTRING    = "MULTILINESTRING"
            │   │   │           MULTIPOLYGON       = "MULTIPOLYGON"
            │   │   │           GEOMETRYCOLLECTION = "GEOMETRYCOLLECTION"
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │   ├── PostgreSqlDateTypes.py
            │   │   │       ↓ 内容（最大10000行）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       from .SqlDateTypes import SqlDateTypes
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       class PostgreSqlDateTypes(SqlDateTypes):
            │   │   │           """PostgreSQLのデータ型クラス"""
            │   │   │           #---------------------------------------------------------------------------
            │   │   │           # データ型定義（PostgreSQL の型に対応）
            │   │   │           INTEGER    = "INTEGER"             # 整数型（32bit）
            │   │   │           LONG       = "BIGINT"              # 長整数（64bit）
            │   │   │           SMALLINT   = "SMALLINT"            # 小さい整数
            │   │   │           FLOAT      = "REAL"                # 単精度浮動小数点
            │   │   │           DOUBLE     = "DOUBLE PRECISION"    # 倍精度浮動小数点
            │   │   │           DECIMAL    = "DECIMAL"             # 高精度数値（任意精度）
            │   │   │           NUMERIC    = "NUMERIC"             # 高精度数値（同上）
            │   │   │           CHAR       = "CHAR"                # 固定長文字列
            │   │   │           VARCHAR    = "VARCHAR"             # 可変長文字列
            │   │   │           TEXT       = "TEXT"                # 長文
            │   │   │           BLOB       = "BLOB"                # バイナリデータ
            │   │   │           BYTEA      = "BYTEA"               # PostgreSQL用バイナリ
            │   │   │           DATE       = "DATE"                # 日付（YYYY-MM-DD）
            │   │   │           TIME       = "TIME"                # 時刻（HH:MM:SS）
            │   │   │           DATETIME   = "TIMESTAMP"           # 日時
            │   │   │           TIMESTAMP  = "TIMESTAMP"           # タイムスタンプ
            │   │   │           BOOLEAN    = "BOOLEAN"             # 真偽値
            │   │   │           NULL       = "NULL"                # NULL明示
            │   │   │           AUTO       = "AUTO_INCREMENT"      # MySQLでの自動採番
            │   │   │           SERIAL     = "SERIAL"              # PostgreSQLでの自動採番
            │   │   │           UUID       = "UUID"                # UUID
            │   │   │           JSON       = "JSON"                # JSON
            │   │   │           JSONB      = "JSONB"               # バイナリ形式のJSON
            │   │   │           ARRAY      = "ARRAY"               # 配列型
            │   │   │           ENUM       = "ENUM"                # 列挙型
            │   │   │           SET        = "SET"                 # 複数選択型
            │   │   │           XML        = "XML"                 # XML型
            │   │   │           HSTORE     = "HSTORE"              # キー・バリュー型
            │   │   │           INET       = "INET"                # IPアドレス型
            │   │   │           CIDR       = "CIDR"                # サブネット型
            │   │   │           GEOMETRY   = "GEOMETRY"            # 空間情報型
            │   │   │           PLACEHOLDER = "%s"                 # psycopg のプレースホルダー
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │   ├── SqlDateTypes.py
            │   │   │       ↓ 内容（最大10000行）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       class SqlDateTypes:
            │   │   │           #---------------------------------------------------------------------------
            │   │   │           INTEGER            = ""  # 一般的な整数型（INT、32bit）
            │   │   │           LONG               = ""  # 大きな整数型（BIGINT、64bit）
            │   │   │           SMALLINT           = ""  # 小さめの整数型（16bit）
            │   │   │           TINYINT            = ""  # 非常に小さい整数型（8bit）、BOOLEANの代替として使われる
            │   │   │           MEDIUMINT          = ""  # 中間のサイズの整数型（24bit）
            │   │   │
            │   │   │           FLOAT              = ""  # 単精度浮動小数点数（約7桁の精度）
            │   │   │           DOUBLE             = ""  # 倍精度浮動小数点数（約15桁の精度）
            │   │   │           DECIMAL            = ""  # 任意精度の固定小数点数（金融・会計に最適）
            │   │   │           NUMERIC            = ""  # DECIMALと同義（SQL標準）
            │   │   │
            │   │   │           CHAR               = ""  # 固定長文字列（CHAR(n)）、短い定長データ向け
            │   │   │           VARCHAR            = ""  # 可変長文字列（VARCHAR(n)）、一般的な文字列データ
            │   │   │           TEXT               = ""  # 長文テキスト（最大 65,535 バイト）
            │   │   │           TINYTEXT           = ""  # 非常に小さなテキスト（最大 255 バイト）
            │   │   │           MEDIUMTEXT         = ""  # 中程度のテキスト（最大 16,777,215 バイト）
            │   │   │           LONGTEXT           = ""  # 非常に大きなテキスト（最大 4GB）
            │   │   │
            │   │   │           BLOB               = ""  # バイナリデータ（最大 65,535 バイト）
            │   │   │           TINYBLOB           = ""  # 非常に小さなBLOB（最大 255 バイト）
            │   │   │           MEDIUMBLOB         = ""  # 中程度のBLOB（最大 16MB）
            │   │   │           LONGBLOB           = ""  # 非常に大きなBLOB（最大 4GB）
            │   │   │
            │   │   │           DATE               = ""  # 日付（YYYY-MM-DD）
            │   │   │           TIME               = ""  # 時刻（HH:MM:SS）
            │   │   │           DATETIME           = ""  # 日付＋時刻（YYYY-MM-DD HH:MM:SS）、タイムゾーンなし
            │   │   │           TIMESTAMP          = ""  # タイムスタンプ（UTCに変換される）
            │   │   │           YEAR               = ""  # 年（4桁または2桁）
            │   │   │
            │   │   │           BOOLEAN            = ""  # 真偽値（TINYINT(1) として扱われる）
            │   │   │           NULL               = ""  # NULL 値明示用（型ではなく修飾的な意味）
            │   │   │
            │   │   │           AUTO               = ""  # 自動採番（AUTO_INCREMENT 修飾子）
            │   │   │           UUID               = ""  # UUIDを保存するための文字列（通常は CHAR(36)）
            │   │   │           JSON               = ""  # JSON型（MySQL 5.7以降対応、構造化データ格納可能）
            │   │   │           ENUM               = ""  # 列挙型（事前定義された値の中から1つを選択）
            │   │   │           SET                = ""  # 複数選択可能な列挙型（0〜64個まで）
            │   │   │
            │   │   │           GEOMETRY           = ""  # 空間情報の基本型（GIS拡張で使用）
            │   │   │           POINT              = ""  # 座標点（X,Y）
            │   │   │           LINESTRING         = ""  # 線（複数点の連続）
            │   │   │           POLYGON            = ""  # ポリゴン（閉じた線の集合）
            │   │   │
            │   │   │           XML                = ""  # MySQLに専用XML型はないためTEXTで代用される
            │   │   │           HSTORE             = ""  # PostgreSQLのKey-Value型、MySQLでは非対応（TEXTで代用）
            │   │   │           INET               = ""  # IPv4/IPv6アドレス（VARCHAR(45)が一般的）
            │   │   │           CIDR               = ""  # サブネット表記（例: 192.168.0.0/24、VARCHARで代用）
            │   │   │           ARRAY              = ""  # MySQLには配列型がないためJSONで代替することが多い
            │   │   │           FILE               = ""  # ファイルデータ格納用（LONGBLOBなど）
            │   │   │
            │   │   │           PLACEHOLDER        = ""  # SQLにおけるパラメータプレースホルダー（例: %s, ?）
            │   │   │           SERIAL             = ""  # BIGINT UNSIGNED AUTO_INCREMENTのエイリアス（MySQL構文糖衣）
            │   │   │
            │   │   │           MULTILINESTRING    = ""  # 複数線（GIS）
            │   │   │           MULTIPOLYGON       = ""  # 複数ポリゴン（GIS）
            │   │   │           GEOMETRYCOLLECTION = ""  # 複数の空間要素の集合（GIS）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │   ├── Sqlite3DateTypes.py
            │   │   │       ↓ 内容（最大10000行）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       from .SqlDateTypes import SqlDateTypes
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       class Sqlite3DateTypes(SqlDateTypes):
            │   │   │           """MySQLのデータ型クラス"""
            │   │   │           #---------------------------------------------------------------------------
            │   │   │           # データ型定義（SQLite3 の型に対応）
            │   │   │           INTEGER     = "INTEGER"             # 整数型（64bit、オートインクリメントにも使用）
            │   │   │           SMALLINT    = "INTEGER"             # SQLiteにSMALLINTなし → INTEGERで代用
            │   │   │           LONG        = "INTEGER"             # SQLiteは全て64bit整数
            │   │   │           TINYINT     = "INTEGER"             # SQLiteにTINYINTなし → INTEGERで代用
            │   │   │           FLOAT       = "REAL"                # 単精度浮動小数点（SQLiteはREALで一括）
            │   │   │           DOUBLE      = "REAL"                # 倍精度浮動小数点（SQLiteはREALで一括）
            │   │   │           DECIMAL     = "NUMERIC"             # 高精度数値（丸めあり）
            │   │   │           NUMERIC     = "NUMERIC"             # NUMERIC型（任意精度数値）
            │   │   │           CHAR        = "TEXT"                # 固定長文字列 → SQLiteではTEXTで統一
            │   │   │           VARCHAR     = "TEXT"                # 可変長文字列 → TEXTにマッピングされる
            │   │   │           TEXT        = "TEXT"                # テキスト全般
            │   │   │           BLOB        = "BLOB"                # バイナリデータ
            │   │   │           BYTEA       = "BLOB"                # PostgreSQL互換のためのエイリアス
            │   │   │           DATE        = "TEXT"                # 日付（SQLiteは日付専用型なし）
            │   │   │           TIME        = "TEXT"                # 時刻（同上）
            │   │   │           DATETIME    = "TEXT"                # 日時（同上）
            │   │   │           TIMESTAMP   = "TEXT"                # タイムスタンプ（同上）
            │   │   │           BOOLEAN     = "INTEGER"             # 真偽値（0または1として保存）
            │   │   │           NULL        = "NULL"                # NULL明示
            │   │   │           UUID        = "TEXT"                # UUID文字列（標準UUID関数なし）
            │   │   │           JSON        = "TEXT"                # JSON（SQLite3.9以降はJSON関数あり）
            │   │   │           JSONB       = "TEXT"                # PostgreSQLとの互換のためのエイリアス
            │   │   │           ARRAY       = "TEXT"                # 配列型なし → JSON文字列などで代用
            │   │   │           ENUM        = "TEXT"                # 列挙型なし → TEXT＋制約で代用可能
            │   │   │           SET         = "TEXT"                # 複数選択型なし → TEXTで代用
            │   │   │           XML         = "TEXT"                # XML型なし → TEXTで代用
            │   │   │           HSTORE      = "TEXT"                # キー・バリュー型なし → JSON等で代用
            │   │   │           INET        = "TEXT"                # IPアドレス型なし → TEXTで代用
            │   │   │           CIDR        = "TEXT"                # サブネット表現型なし → TEXTで代用
            │   │   │           GEOMETRY    = "TEXT"                # 空間型なし（SpatiaLite使用時は拡張可能）
            │   │   │           PLACEHOLDER = "?"                   # sqlite3 モジュールのプレースホルダー
            │   │   │           AUTO        = "INTEGER PRIMARY KEY AUTOINCREMENT"  # 自動採番
            │   │   │           SERIAL      = "INTEGER PRIMARY KEY AUTOINCREMENT"  # PostgreSQLとの互換のため
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │   └── __init__.py
            │   │   │       ↓ 内容（最大10000行）
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       from .PostgreSqlDateTypes   import PostgreSqlDateTypes
            │   │   │       from .MySqlDateTypes        import MySqlDateTypes
            │   │   │       from .Sqlite3DateTypes      import Sqlite3DateTypes
            │   │   │       #-------------------------------------------------------------------------------
            │   │   │       __all__ = [
            │   │   │           "PostgreSqlDateTypes",
            │   │   │           "MySqlDateTypes",
            │   │   │           "Sqlite3DateTypes"
            │   │   │       ]
            │   │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncMySqlEngine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       # aiomysqlのインストールが出来ているかどうか確認
            │   │       try:
            │   │           import aiomysql
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "mysql.connnectorがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install aiomysql"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       from typing         import Any              # Any型クラス
            │   │       from .SqlEngine     import SqlEngine        # 基底SQLエンジンクラス
            │   │       from .datetypes     import MySqlDateTypes   # MySQLのデータ型クラス
            │   │       from ...common      import override         # オーバライドメソッド
            │   │       from ...common      import public           # パブリックメソッド
            │   │       from ...common      import private          # プライベートメソッド
            │   │       from ...Log         import Log              # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncMySqlEngine(SqlEngine, MySqlDateTypes):
            │   │           """
            │   │           非同期MySQLエンジンクラス
            │   │           Attributes:
            │   │               hostName     (str)        : ホスト名
            │   │               userName     (str)        : ユーザー名
            │   │               password     (str)        : パスワード
            │   │               databaseName (str)        : データベース名
            │   │               sqlEngine    (aiomysql)   : aiomysqlクラス
            │   │               conn         (Any | None) : aiomysqlコネクトオブジェクト
            │   │               cur          (Any | None) : aiomysqlカーソルオブジェクト
            │   │               __isLog      (bool)       : ログフラグ
            │   │               __Log        (Log)        : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │               self,
            │   │               hostName     : str,
            │   │               userName     : str,
            │   │               password     : str,
            │   │               databaseName : str,
            │   │               logFile      : str | None = None
            │   │           ):
            │   │               """
            │   │               非同期MySQLエンジンの初期化
            │   │               Args:
            │   │                   hostName     (str)        : ホスト名
            │   │                   userName     (str)        : ユーザー名
            │   │                   password     (str)        : パスワード
            │   │                   databaseName (str)        : データベース名
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.hostName     = hostName
            │   │               self.userName     = userName
            │   │               self.password     = password
            │   │               self.databaseName = databaseName
            │   │               # インスタンス変数(オブジェクト)
            │   │               self.sqlEngine  = aiomysql
            │   │               self.conn       = None # 初期値はNone
            │   │               self.cur        = None # 初期値はNone
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connect(self) -> Any:
            │   │               """
            │   │               非同期でMySQLに接続し、プールを作成
            │   │               Returns:
            │   │                   Any : コネクトオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : データベースの接続に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.pool = await self.sqlEngine.create_pool(
            │   │                       host       = self.hostName,
            │   │                       user       = self.userName,
            │   │                       password   = self.password,
            │   │                       db         = self.databaseName,
            │   │                       autocommit = False
            │   │                   )
            │   │                   self.conn = await self.pool.acquire()
            │   │                   return self.conn
            │   │               except Exception as e:
            │   │                   msg = "データベースの接続に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def cursor(self):
            │   │               """
            │   │               非同期カーソルの作成
            │   │               Args:
            │   │                   dictionary (bool) : 辞書型の指定
            │   │               Returns:
            │   │                   Any : カーソルオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : カーソルの失敗した場合
            │   │               """
            │   │               try:
            │   │                   # 接続してなければ
            │   │                   if self.conn is None:
            │   │                       await self.connect()
            │   │                   # 絶対Noneがないと明示する
            │   │                   # 接続があればカーソル取得
            │   │                   if not self.conn:# 安全チェック
            │   │                       raise Exception
            │   │                   # 戻り値は接続オブジェクトのコルーチンの完了を待って設定
            │   │                   self.cur  = await self.conn.cursor()
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def execute(self, query: str, value: tuple = ()):
            │   │               """
            │   │               非同期にSQLクエリを実行する
            │   │               Args:
            │   │                   query (str)     : SQL文
            │   │                   value (tuple)   : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   cur = await self.cursor()
            │   │                   await cur.execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def executeAny(self, query : str, data : list[tuple[str]]) -> None:
            │   │               """
            │   │               非同期にSQLクエリ(複数)を実行する
            │   │               Args:
            │   │                   query (str)              : クエリ文
            │   │                   value (list[tuple[str]]) : プレイスホルダーに渡す値
            │   │               Args:
            │   │                   query (str)             : SQL文
            │   │                   value (list[tuple[str]) : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
            │   │                   cur = await self.cursor()
            │   │                   await cur.executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def commit(self):
            │   │               """
            │   │               非同期にデータベースにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   await self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectOpen(self):
            │   │               """
            │   │               コネクトとカーソルの開放(非同期)
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   await self.connect()
            │   │                   await self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectClose(self):
            │   │               """
            │   │               非同期でコネクションとカーソルのクローズ
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.cur:
            │   │                       await self.cur.close()
            │   │                   if self.conn:
            │   │                       self.pool.release(self.conn)
            │   │                       self.cur  = None
            │   │                       self.conn = None
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def transaction(self):
            │   │               """
            │   │               非同期でトランザクションの開始
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   await self.cursor()
            │   │                   await self.execute("START TRANSACTION")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def rollback(self):
            │   │               """
            │   │               非同期でトランザクションをロールバックする
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               MySQLに接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncPostgreSqlEngine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       # psycopgのインストールが出来ているかどうか確認
            │   │       try:
            │   │           import psycopg
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "psycopgがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install psycopg[binary]"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       # 非同期psycopgのインストールが出来ているかどうか確認
            │   │       try:
            │   │           from psycopg import AsyncConnection, AsyncCursor
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "非同期psycopgがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install psycopg[async]"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       from typing         import Any                  # Any型クラス
            │   │       from .SqlEngine     import SqlEngine            # 基底SQLエンジンクラス
            │   │       from .datetypes     import PostgreSqlDateTypes  # PostgreSQLのデータ型クラス
            │   │       from ...common      import override             # オーバライドメソッド
            │   │       from ...common      import public               # パブリックメソッド
            │   │       from ...common      import private              # プライベートメソッド
            │   │       from ...Log          import Log                  # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncPostgreSqlEngine(SqlEngine, PostgreSqlDateTypes):
            │   │           """
            │   │           非同期PostgreSQLエンジンクラス
            │   │           Attributes:
            │   │               hostName     (str)        : ホスト名
            │   │               userName     (str)        : ユーザー名
            │   │               password     (str)        : パスワード
            │   │               databaseName (str)        : データベース名
            │   │               port         (int)        : ポート番号
            │   │               sqlEngine    (psycopg)    : psycopgクラス
            │   │               conn         (Any | None) : psycopgコネクトオブジェクト
            │   │               cur          (Any | None) : psycopgカーソルオブジェクト
            │   │               __isLog      (bool)       : ログフラグ
            │   │               __Log        (Log)        : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   hostName     : str,
            │   │                   userName     : str,
            │   │                   password     : str,
            │   │                   databaseName : str,
            │   │                   port         : int,
            │   │                   logFile      : str | None = None
            │   │               ):
            │   │               """
            │   │               PostgreSQLエンジンの初期化
            │   │               Args:
            │   │                   hostName     (str)        : ホスト名
            │   │                   userName     (str)        : ユーザー名
            │   │                   password     (str)        : パスワード
            │   │                   databaseName (str)        : データベース名
            │   │                   port         (str)        : ポート番号
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.hostName     = hostName
            │   │               self.userName     = userName
            │   │               self.password     = password
            │   │               self.databaseName = databaseName
            │   │               self.port         = port
            │   │               # インスタンス変数,(オブジェクト)
            │   │               self.sqlEngine  = psycopg
            │   │               self.conn : AsyncConnection | None = None
            │   │               self.cur  : AsyncCursor     | None = None
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │          #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connect(self) -> AsyncConnection:
            │   │               """
            │   │               非同期でデータベースの接続
            │   │               Returns:
            │   │                   AsyncConnection : コネクトオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : データベースの接続に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.conn = await self.sqlEngine.AsyncConnection.connect(
            │   │                       host     = self.hostName,
            │   │                       user     = self.userName,
            │   │                       password = self.password,
            │   │                       database = self.databaseName,
            │   │                       port     = self.port
            │   │                   )
            │   │                   return self.conn
            │   │               except Exception as e:
            │   │                   msg = "データベースの接続に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def cursor(self) -> AsyncCursor:
            │   │               """
            │   │               非同期でカーソルの作成
            │   │               Returns:
            │   │                   AsyncCursor : カーソルオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : カーソルの失敗した場合
            │   │               """
            │   │               try:
            │   │                   assert self.conn is not None # 明示する
            │   │                   if self.cur:
            │   │                       try:
            │   │                          await self.cur.close()
            │   │                       except Exception:
            │   │                           pass # カーソルが閉じ済みの時用
            │   │                   self.cur = self.conn.cursor()
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def execute(self, query: Any, value: tuple = ()) -> None:
            │   │               """
            │   │               クエリの実行
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   cur = await self.cursor()
            │   │                   await cur.execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def executeAny(self, query: Any, data: list[tuple[str]]) -> None:
            │   │               """
            │   │               クエリの実行(複数)
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   cur = await self.cursor()
            │   │                   await cur.executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def commit(self) -> None:
            │   │               """
            │   │               データベースにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   await self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectOpen(self) -> None:
            │   │               """
            │   │               コネクトとカーソルの開放(非同期)
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   await self.connect()
            │   │                   await self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectClose(self) -> None:
            │   │               """
            │   │               コネクションとカーソルのクローズ(非同期)
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   # カーソルがあれば
            │   │                   if self.cur:
            │   │                       await self.cur.close()
            │   │                   # コネクトが接続していれば
            │   │                   if self.conn:
            │   │                       await self.conn.close()
            │   │                   self.conn = None # 初期値に戻す
            │   │                   self.cur  = None # 初期値に戻す
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def transaction(self) -> None:
            │   │               """
            │   │               非同期トランザクションの開始
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       cur = await self.cursor()
            │   │                       await cur.execute("BEGIN")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def rollback(self) -> None:
            │   │               """
            │   │               非同期ロールバック
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               PostgreSQLに接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncSqlite3Engine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       # aiosqliteのインストールが出来ているかどうか確認
            │   │       try:
            │   │           import aiosqlite
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "aiosqliteがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install aiosqlite"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       from .SqlEngine     import SqlEngine        # 規定SQLエンジンクラス
            │   │       from .datetypes     import Sqlite3DateTypes # Sqlite3のデータ型クラス
            │   │       from ...common      import override         # オーバライドメソッド
            │   │       from ...common      import public           # パブリックメソッド
            │   │       from ...common      import private          # プライベートメソッド
            │   │       from ...Log         import Log              # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncSqlite3Engine(SqlEngine, Sqlite3DateTypes):
            │   │           """
            │   │           非同期Sqlite3エンジンクラス
            │   │           Attributes:
            │   │               database  (str)                         : データベースパス名
            │   │               sqlEngine (aiosqlite)                   : sqlite3クラス
            │   │               conn      (aiosqlite.Connection | None) : sqlite3コネクトオブジェクト
            │   │               cur       (aiosqlite.Cursor     | None) : sqlite3カーソルオブジェクト
            │   │               __isLog   (bool)                        : ログフラグ
            │   │               __Log     (Log)                         : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   databasePath : str,
            │   │                   logFile      : str | None = None
            │   │               ):
            │   │               """
            │   │               非同期SQLite3データベース接続エンジンの初期化
            │   │               Args:
            │   │                   databasePath (str)        : データベースパス
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.database  = databasePath # データベースパス
            │   │               self.sqlEngine = aiosqlite    # 非同期対応のSqlite3エンジン
            │   │               # カーソルとコネクト
            │   │               self.conn : aiosqlite.Connection | None = None # ← 明示的に定義
            │   │               self.cur  : aiosqlite.Cursor     | None = None # ← 明示的に定義
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connect(self) -> aiosqlite.Connection:
            │   │               """
            │   │               非同期でデータベースの接続
            │   │               Returns:
            │   │                   aiosqlite.Connection : コネクトオブジェクト
            │   │               Raises:
            │   │                   Exception : データベースの接続に失敗した場合
            │   │               """
            │   │               try:
            │   │                   # 戻り値はエンジンのコルーチンの完了を待って設定
            │   │                   self.conn = await self.sqlEngine.connect(self.database)
            │   │                   return self.conn
            │   │               except Exception as e:
            │   │                   msg = "データベースの接続に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def cursor(self) -> aiosqlite.Cursor:
            │   │               """
            │   │               非同期にカーソルを作成
            │   │               Returns:
            │   │                   aiosqlite.Cursor : カーソルオブジェクト
            │   │               Raises:
            │   │                   Exception : カーソルの作成に失敗した場合
            │   │               """
            │   │               try:
            │   │                   # 接続してなければ
            │   │                   if self.conn is None:
            │   │                       await self.connect()
            │   │                   # 絶対Noneがないと明示する
            │   │                   # 接続があればカーソル取得
            │   │                   if not self.conn:# 安全チェック
            │   │                       raise Exception
            │   │                   # 戻り値は接続オブジェクトのコルーチンの完了を待って設定
            │   │                   self.cur = await self.conn.cursor()
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def execute(self, query : str, value : tuple = ()) -> None:
            │   │               """
            │   │               非同期にSQLクエリを実行する
            │   │               Args:
            │   │                   query (str)     : 実行するクエリ文
            │   │                   value (tuple)   : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
            │   │                   cur = await self.cursor()
            │   │                   await cur.execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def executeAny(self, query : str, data : list[tuple[str]]) -> None:
            │   │               """
            │   │               非同期にSQLクエリ(複数)を実行する
            │   │               Args:
            │   │                   query (str)              : クエリ文
            │   │                   value (list[tuple[str]]) : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   # カーソルオブジェクトはコルーチンの完了を持って設定
            │   │                   cur = await self.cursor()
            │   │                   await cur.executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def commit(self):
            │   │               """
            │   │               非同期にトランザクションにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   await self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectOpen(self):
            │   │               """
            │   │               コネクトとカーソルの開放(非同期)
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   await self.connect()
            │   │                   await self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def connectClose(self) -> None:
            │   │               """
            │   │               コネクションとカーソルのクローズ(非同期)
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   # コネクトが接続していれば
            │   │                   if self.conn:
            │   │                       await self.conn.close()
            │   │                       self.conn = None
            │   │                       self.cur  = None
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def transaction(self) -> None:
            │   │               """
            │   │               非同期でトランザクションの開始
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.execute("BEGIN")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           async def rollback(self) -> None:
            │   │               """
            │   │               非同期でトランザクションをロールバックする
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       await self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               Sqlite3に接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── MySqlEngine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       # mysql.connectorのインストールが出来ているかどうか確認
            │   │       try:
            │   │           import mysql.connector
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "mysql.connnectorがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install mysql-connector-python"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       from typing         import Any              # Any型クラス
            │   │       from .SqlEngine     import SqlEngine        # 基底SQLエンジンクラス
            │   │       from .datetypes     import MySqlDateTypes   # MySQLのデータ型クラス
            │   │       from ...common      import override         # オーバライドメソッド
            │   │       from ...common      import public           # パブリックメソッド
            │   │       from ...common      import private          # プライベートメソッド
            │   │       from ...Log         import Log              # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class MySqlEngine(SqlEngine, MySqlDateTypes):
            │   │           """
            │   │           MySQLエンジンクラス
            │   │           Attributes:
            │   │               hostName     (str)             : ホスト名
            │   │               userName     (str)             : ユーザー名
            │   │               password     (str)             : パスワード
            │   │               databaseName (str)             : データベース名
            │   │               sqlEngine    (mysql.connector) : mysql.connectorクラス
            │   │               conn         (Any | None)      : mysqlコネクトオブジェクト
            │   │               cur          (Any | None)      : mysqlカーソルオブジェクト
            │   │               __isLog      (bool)            : ログフラグ
            │   │               __Log        (Log)             : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   hostName     : str,
            │   │                   userName     : str,
            │   │                   password     : str,
            │   │                   databaseName : str,
            │   │                   logFile      : str | None = None
            │   │               ):
            │   │               """
            │   │               MySQLエンジンの初期化
            │   │               Args:
            │   │                   hostName     (str)        : ホスト名
            │   │                   userName     (str)        : ユーザー名
            │   │                   password     (str)        : パスワード
            │   │                   databaseName (str)        : データベース名
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.hostName     = hostName
            │   │               self.userName     = userName
            │   │               self.password     = password
            │   │               self.databaseName = databaseName
            │   │               # インスタンス変数(オブジェクト)
            │   │               self.sqlEngine  = mysql.connector
            │   │               self.conn       = None # 初期値はNone
            │   │               self.cur        = None # 初期値はNone
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connect(self) -> Any:
            │   │               """
            │   │               データベースの接続
            │   │               Returns:
            │   │                   Any : コネクトオブジェクトを返す
            │   │               Raises:
            │   │                   ProgrammingError : 認証エラーやデータベース指定ミス
            │   │                   InterfaceError   : ソケットエラーやネットワークの接続エラー
            │   │                   Error            : その他のMySQLエラー
            │   │               """
            │   │               try:
            │   │                   self.conn = self.sqlEngine.connect(
            │   │                       host     = self.hostName,
            │   │                       user     = self.userName,
            │   │                       password = self.password,
            │   │                       database = self.databaseName
            │   │                   )
            │   │                   # 問題なければ返す
            │   │                   return self.conn
            │   │               # データベースとの接続が切れた場合
            │   │               except mysql.connector.errors.OperationalError as oe:
            │   │                   try:
            │   │                       self.__logInfo("接続が切れています。再接続を試みます...")
            │   │                       # 再接続を試みる
            │   │                       self.conn = self.sqlEngine.connect(
            │   │                           host     = self.hostName,
            │   │                           user     = self.userName,
            │   │                           password = self.password,
            │   │                           database = self.databaseName
            │   │                       )
            │   │                       return self.conn
            │   │                   # 再接続に失敗した場合
            │   │                   except Exception as e:
            │   │                       msg = "MySQLの再接続に失敗しました"
            │   │                       # ログ
            │   │                       self.__logError(msg)
            │   │                       print(f"{msg}: {e}")
            │   │                       raise Exception
            │   │               # 認証エラーやデータベース指定ミスの場合
            │   │               except mysql.connector.errors.ProgrammingError as pe:
            │   │                   msg = "認証エラーやデータベース指定ミスです"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {pe}")
            │   │               # ネットワークの接続やソケットエラーの場合
            │   │               except mysql.connector.errors.InterfaceError as ie:
            │   │                   msg = "ソケットエラーやネットワークの接続エラーです"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {ie}")
            │   │               except mysql.connector.errors.Error as e:
            │   │                   # ユーザ名またはパスワードが違う場合
            │   │                   if e.errno == 1045:
            │   │                       msg = "ユーザ名またはパスワードが間違っています"
            │   │                       self.__logError(msg)
            │   │                       raise Exception(msg)
            │   │                   # 指定されたデータベースが存在しない場合
            │   │                   elif e.errno == 1049:
            │   │                       msg = "指定されたデータベースが存在しません"
            │   │                       self.__logError(msg)
            │   │                       raise Exception(msg)
            │   │                   # その他
            │   │                   else:
            │   │                       msg = f"MySQLエラー({e.errno})です"
            │   │                       self.__logError(msg)
            │   │                       raise Exception(f"{msg}: {e.msg}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def cursor(
            │   │                   self,
            │   │                   dictionary : bool = False
            │   │               ) -> Any: # Anyじゃないとエラーになりやすい
            │   │               """
            │   │               カーソルの作成
            │   │               Args:
            │   │                   dictionary (bool) : 辞書型の指定
            │   │               Returns:
            │   │                   Any : カーソルオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : カーソルの失敗した場合
            │   │               """
            │   │               try:
            │   │                   # 接続されていなければ
            │   │                   if self.conn is None or not self.conn.is_connected():
            │   │                       self.connect()
            │   │                   assert self.conn is not None # 明示する
            │   │                   if self.cur:
            │   │                       try:
            │   │                           self.cur.close()
            │   │                       except Exception:
            │   │                           pass # カーソルが閉じ済みの時用
            │   │                   self.cur = self.conn.cursor(dictionary = dictionary)
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def execute(self, query: str, value : tuple = ()) -> None:
            │   │               """
            │   │               クエリの実行
            │   │               Args:
            │   │                   query (str)     : SQL文
            │   │                   value (tuple)   : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   self.cursor().execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def executeAny(self, query: str, data : list[tuple[str]]) -> None:
            │   │               """
            │   │               クエリの実行(複数)
            │   │               Args:
            │   │                   query (str)             : SQL文
            │   │                   value (list[tuple[str]) : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   self.cursor().executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def commit(self) -> None:
            │   │               """
            │   │               データベースにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn and self.conn.is_connected():
            │   │                       self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectOpen(self) -> None:
            │   │               """
            │   │               コネクトとカーソルの開放
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.connect()
            │   │                   self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectClose(self) -> None:
            │   │               """
            │   │               コネクションとカーソルのクローズ
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   # コネクトが接続していれば
            │   │                   if self.conn and self.conn.is_connected():
            │   │                       if self.cur is not None:
            │   │                           self.cur.close()
            │   │                       self.conn.close()
            │   │                       self.conn = None # 初期値に戻す
            │   │                       self.cur  = None # 初期値に戻す
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def transaction(self) -> None:
            │   │               """
            │   │               トランザクション
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn and self.conn.is_connected():
            │   │                       self.cursor().execute("START TRANSACTION")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def rollback(self) -> None:
            │   │               """
            │   │               ロールバック
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn and self.conn.is_connected():
            │   │                       self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               MySQLに接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None and self.conn.is_connected()
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── PostgreSqlEngine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       # psycopgのインストールが出来ているかどうか確認
            │   │       try:
            │   │           import psycopg
            │   │       except Exception as e:
            │   │           raise Exception(
            │   │               "psycopgがインストールされていません\n"
            │   │               "下記をターミナルで実行してください\n"
            │   │               "pip install psycopg[binary]"
            │   │           )
            │   │       #-------------------------------------------------------------------------------
            │   │       from typing         import Any                  # Any型クラス
            │   │       from .SqlEngine     import SqlEngine            # 基底SQLエンジンクラス
            │   │       from .datetypes     import PostgreSqlDateTypes  # PostgreSQLのデータ型クラス
            │   │       from ...common      import override             # オーバライドメソッド
            │   │       from ...common      import public               # パブリックメソッド
            │   │       from ...common      import private              # プライベートメソッド
            │   │       from ...Log          import Log                  # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class PostgreSqlEngine(SqlEngine, PostgreSqlDateTypes):
            │   │           """
            │   │           PostgreSQLエンジンクラス
            │   │           Attributes:
            │   │               hostName     (str)        : ホスト名
            │   │               userName     (str)        : ユーザー名
            │   │               password     (str)        : パスワード
            │   │               databaseName (str)        : データベース名
            │   │               port         (int)        : ポート番号
            │   │               sqlEngine    (psycopg)    : psycopgクラス
            │   │               conn         (Any | None) : psycopgコネクトオブジェクト
            │   │               cur          (Any | None) : psycopgカーソルオブジェクト
            │   │               __isLog      (bool)       : ログフラグ
            │   │               __Log        (Log)        : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   hostName     : str,
            │   │                   userName     : str,
            │   │                   password     : str,
            │   │                   databaseName : str,
            │   │                   port         : int,
            │   │                   logFile      : str | None = None
            │   │               ):
            │   │               """
            │   │               PostgreSQLエンジンの初期化
            │   │               Args:
            │   │                   hostName     (str)        : ホスト名
            │   │                   userName     (str)        : ユーザー名
            │   │                   password     (str)        : パスワード
            │   │                   databaseName (str)        : データベース名
            │   │                   port         (str)        : ポート番号
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.hostName     = hostName
            │   │               self.userName     = userName
            │   │               self.password     = password
            │   │               self.databaseName = databaseName
            │   │               self.port         = port
            │   │               # インスタンス変数,(オブジェクト)
            │   │               self.sqlEngine  = psycopg
            │   │               self.conn = None
            │   │               self.cur  = None
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │          #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connect(self) -> Any:
            │   │               """
            │   │               データベースの接続
            │   │               Returns:
            │   │                   Any : コネクトオブジェクトを返す
            │   │               Raises:
            │   │
            │   │               """
            │   │               try:
            │   │                   self.conn = self.sqlEngine.connect(
            │   │                       host     = self.hostName,
            │   │                       user     = self.userName,
            │   │                       password = self.password,
            │   │                       database = self.databaseName,
            │   │                       port     = self.port
            │   │                   )
            │   │                   return self.conn
            │   │               except Exception as e:
            │   │                   msg = "データベースの接続に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def cursor(self) -> Any:
            │   │               """
            │   │               カーソルの作成
            │   │               Returns:
            │   │                   Any : カーソルオブジェクトを返す
            │   │               Raises:
            │   │                   Exception : カーソルの失敗した場合
            │   │               """
            │   │               try:
            │   │                   assert self.conn is not None # 明示する
            │   │                   if self.cur:
            │   │                       try:
            │   │                           self.cur.close()
            │   │                       except Exception:
            │   │                           pass # カーソルが閉じ済みの時用
            │   │                   self.cur = self.conn.cursor()
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def execute(self, query: Any, value: tuple = ()) -> None:
            │   │               """
            │   │               クエリの実行
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   self.cursor().execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def executeAny(self, query: Any, data: list[tuple[str]]) -> None:
            │   │               """
            │   │               クエリの実行(複数)
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   self.cursor().executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def commit(self) -> None:
            │   │               """
            │   │               データベースにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectOpen(self) -> None:
            │   │               """
            │   │               コネクトとカーソルの開放
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.connect()
            │   │                   self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectClose(self) -> None:
            │   │               """
            │   │               コネクションとカーソルのクローズ
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   # コネクトが接続していれば
            │   │                   if self.conn:
            │   │                       if self.cur is not None:
            │   │                           self.cur.close()
            │   │                       self.conn.close()
            │   │                       self.conn = None # 初期値に戻す
            │   │                       self.cur  = None # 初期値に戻す
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def transaction(self) -> None:
            │   │               """
            │   │               トランザクション
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.cursor().execute("BEGIN")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def rollback(self) -> None:
            │   │               """
            │   │               ロールバック
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               MySQLに接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── SqlEngine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ...common.Public   import public
            │   │       #-------------------------------------------------------------------------------
            │   │       class SqlEngine:
            │   │           """基底SQLエンジンクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(self):
            │   │               super().__init__()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def connect(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def cursor(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def executeAny(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def commit(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def connectOpen(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def connectClose(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def transaction(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def rollback(self): ...
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def isConnected(self): ...
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── Sqlite3Engine.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       import sqlite3                              # sqlite3
            │   │       from .SqlEngine     import SqlEngine        # 規定SQLエンジンクラス
            │   │       from .datetypes     import Sqlite3DateTypes # Sqlite3のデータ型クラス
            │   │       from ...common      import override         # オーバライドメソッド
            │   │       from ...common      import public           # パブリックメソッド
            │   │       from ...common      import private          # プライベートメソッド
            │   │       from ...Log         import Log              # ログクラス
            │   │       #-------------------------------------------------------------------------------
            │   │       class Sqlite3Engine(SqlEngine, Sqlite3DateTypes):
            │   │           """
            │   │           Sqlite3エンジンクラス
            │   │           Attributes:
            │   │               database  (str)                       : データベースパス名
            │   │               sqlEngine (sqlite3)                   : sqlite3クラス
            │   │               conn      (sqlite3.Connection | None) : sqlite3コネクトオブジェクト
            │   │               cur       (sqlite3.Cursor     | None) : sqlite3カーソルオブジェクト
            │   │               __isLog   (bool)                      : ログフラグ
            │   │               __Log     (Log)                       : ログオブジェクト
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   databasePath : str,
            │   │                   logFile      : str | None = None
            │   │               ):
            │   │               """
            │   │               SQLite3データベース接続エンジンの初期化
            │   │               Args:
            │   │                   databasePath (str)        : データベースパス
            │   │                   logFile      (str | None) : ログファイル名
            │   │               """
            │   │               super().__init__()
            │   │               # インスタンス変数
            │   │               self.database : str = databasePath
            │   │               # インスタンス変数(オブジェクト)
            │   │               self.sqlEngine = sqlite3
            │   │               self.conn : sqlite3.Connection | None = None # ← 明示的に定義
            │   │               self.cur  : sqlite3.Cursor     | None = None # ← 明示的に定義
            │   │               # ログの初期設定
            │   │               self.__setLog(logFile)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __setLog(self, logFile : str | None):
            │   │               """ログクラスとフラグの設定"""
            │   │               # ログファイルが未指定なら
            │   │               if logFile is None:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │               # ログファイルが指定されていれば
            │   │               elif logFile:
            │   │                   self.__isLog = True
            │   │                   self.__log   = Log(logFile)
            │   │               else:
            │   │                   self.__isLog = False
            │   │                   self.__log   = None
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logDebug(self, msg):
            │   │               """デバックメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.debug(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logInfo(self, msg):
            │   │               """インフォメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.info(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logWarning(self, msg):
            │   │               """警告メッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.warning(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logError(self, msg):
            │   │               """エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.error(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __logCritical(self, msg):
            │   │               """致命的エラーメッセージ"""
            │   │               if self.__isLog and self.__log is not None:
            │   │                   self.__log.critical(msg)
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connect(self) -> sqlite3.Connection:
            │   │               """
            │   │               データベースの接続
            │   │               Returns:
            │   │                   sqlite3.Connection : コネクトオブジェクト
            │   │               Raises:
            │   │                   Exception : データベースの接続に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.conn = self.sqlEngine.connect(self.database)
            │   │                   return self.conn
            │   │               except Exception as e:
            │   │                   msg = "データベースの接続に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def cursor(self) -> sqlite3.Cursor:
            │   │               """
            │   │               カーソルの作成
            │   │               Returns:
            │   │                   sqlite3.Cursor : カーソルオブジェクト
            │   │               Raises:
            │   │                   Exception : カーソルの作成に失敗した場合
            │   │               """
            │   │               try:
            │   │                   # 接続してなければ
            │   │                   if self.conn is None:
            │   │                       self.connect()
            │   │                   # 絶対Noneがないと明示する
            │   │                   # 接続があればカーソル取得
            │   │                   assert self.conn is not None # 安全チェック
            │   │                   self.cur = self.conn.cursor()
            │   │                   return self.cur
            │   │               except Exception as e:
            │   │                   msg = "カーソルの作成に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def execute(self, query : str, value : tuple = ()) -> None:
            │   │               """
            │   │               クエリを実行
            │   │               Args:
            │   │                   query (str)     : 実行するクエリ文
            │   │                   value (tuple)   : プレイスホルダーに渡す値
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{value}")
            │   │                   self.cursor().execute(query, value)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{value}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def executeAny(self, query: str, data: list[tuple[str]]):
            │   │               """
            │   │               クエリの実行(複数)
            │   │               Raises:
            │   │                   Exception : クエリの実行に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.__logDebug(f"クエリ:{query}, 値:{data}")
            │   │                   self.cursor().executemany(query, data)
            │   │               except Exception as e:
            │   │                   msg  = "クエリの実行に失敗しました"
            │   │                   qmsg = f"クエリ:{query}, 値:{data}"
            │   │                   self.__logError(msg)
            │   │                   self.__logError(qmsg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def commit(self):
            │   │               """
            │   │               データベースにコミットする
            │   │               Raises:
            │   │                   Exception : コミットに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.conn.commit()
            │   │               except Exception as e:
            │   │                   # コミットが失敗した場合ロールバックする
            │   │                   msg = "コミットが失敗したためロールバックしました"
            │   │                   self.__logError(msg)
            │   │                   self.rollback()
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectOpen(self):
            │   │               """
            │   │               コネクトとカーソルの開放
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルの開放に失敗した場合
            │   │               """
            │   │               try:
            │   │                   self.connect()
            │   │                   self.cursor()
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルの開放に失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def connectClose(self) -> None:
            │   │               """
            │   │               コネクションとカーソルのクローズ
            │   │               Raises:
            │   │                   Exception : コネクトとカーソルのクローズに失敗した場合
            │   │               """
            │   │               try:
            │   │                   # コネクトが接続していれば
            │   │                   if self.conn:
            │   │                       self.conn.close()
            │   │                       self.conn = None
            │   │                       self.cur  = None
            │   │               except Exception as e:
            │   │                   msg = "コネクトとカーソルのクローズに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def transaction(self) -> None:
            │   │               """
            │   │               トランザクション
            │   │               Raises:
            │   │                   Exception : トランザクションに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.cursor().execute("BEGIN")
            │   │               except Exception as e:
            │   │                   msg = "トランザクションに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def rollback(self) -> None:
            │   │               """
            │   │               ロールバック
            │   │               Raises:
            │   │                   Exception : ロールバックに失敗した場合
            │   │               """
            │   │               try:
            │   │                   if self.conn:
            │   │                       self.conn.rollback()
            │   │               except Exception as e:
            │   │                   msg = "ロールバックに失敗しました"
            │   │                   self.__logError(msg)
            │   │                   raise Exception(f"{msg}: {e}")
            │   │           #---------------------------------------------------------------------------
            │   │           @override
            │   │           @public
            │   │           def isConnected(self) -> bool:
            │   │               """
            │   │               Sqlite3に接続中かどうか返す
            │   │               Returns:
            │   │                   bool : 接続されていればTrue
            │   │               """
            │   │               return self.conn is not None
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .AsyncSqlite3Engine    import AsyncSqlite3Engine
            │   │       from .AsyncMySqlEngine      import AsyncMySqlEngine
            │   │       from .MySqlEngine           import MySqlEngine
            │   │       from .Sqlite3Engine         import Sqlite3Engine
            │   │       from .SqlEngine             import SqlEngine
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "AsyncSqlite3Engine",
            │   │           "AsyncMySqlEngine",
            │   │           "MySqlEngine",
            │   │           "Sqlite3Engine",
            │   │           "SqlEngine"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── AsyncEngine.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .base     import AsyncMySqlEngine
            │       from .base     import AsyncSqlite3Engine
            │       from ..common  import public          #パブリックメソッド
            │       from ..column  import Column
            │       from ..model   import Model           # モデルクラス
            │       from ..manager import Select          # SELECT句クラス
            │       from ..config  import Config
            │       #-------------------------------------------------------------------------------
            │       class AsyncEngine:
            │           """
            │           SQLエンジンを初期化・管理するためのクラス
            │           データベースの接続設定、エンジンの初期化、SQL発行に必要な
            │           各種情報の取得・設定を提供する
            │           """
            │           #---------------------------------------------------------------------------
            │           def __init__(
            │                   self,
            │                   sqlEngineName : str,
            │                   hostName      : str | None = None,
            │                   userName      : str | None = None,
            │                   password      : str | None = None,
            │                   database      : str | None = None
            │               ):
            │               """
            │               エンジンを初期化し、接続情報を登録する。
            │               Parameters:
            │                   sqlEngineName (str) : 使用するエンジン名
            │                   hostName      (str) : ホスト名
            │                   userName      (str) : ユーザー名
            │                   password      (str) : パスワード
            │                   databaseName  (str) : データベース名またはDBファイルパス
            │               """
            │               self.sqlEngineName = sqlEngineName
            │               self.hostName      = hostName
            │               self.userName      = userName
            │               self.password      = password
            │               self.database      = database
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def launch(self) -> None:
            │               """
            │               SQLエンジンをエンジン名に応じて初期化する
            │               Raises:
            │                   ModuleNotFoundError : 未対応のエンジン名が指定された場合
            │               """
            │               if self.sqlEngineName == "sqlite3":
            │                   if self.database:
            │                       self.sqlEngine = AsyncSqlite3Engine(
            │                           databasePath = self.database
            │                       )
            │                   raise Exception("データベースを指定してください")
            │               elif self.sqlEngineName == "mysql":
            │                   if  self.hostName and self.userName \
            │                   and self.password and self.database:
            │                       self.sqlEngine = AsyncMySqlEngine(
            │                           hostName     = self.hostName,
            │                           userName     = self.userName,
            │                           password     = self.password,
            │                           databaseName = self.database
            │                       )
            │                   else:
            │                       raise Exception("引数を指定ください")
            │               else:
            │                   raise ModuleNotFoundError("未対応のモジュールエンジンです")
            │               Config.asyncSqlEngine = self.sqlEngine
            │               Config.database       = self.database
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def commit(self) -> None:
            │               """
            │               トランザクションをコミットする
            │               """
            │               await self.sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def connectOpen(self) -> None:
            │               """
            │               データベース接続を開始する
            │               """
            │               await self.sqlEngine.connectOpen()
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def connectClose(self) -> None:
            │               """
            │               データベース接続を閉じる
            │               """
            │               await self.sqlEngine.connectClose()
            │           #---------------------------------------------------------------------------
            │   ├── Engine.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .base     import MySqlEngine
            │       from .base     import Sqlite3Engine
            │       from ..common  import public          #パブリックメソッド
            │       from ..column  import Column
            │       from ..model   import Model           # モデルクラス
            │       from ..manager import Select          # SELECT句クラス
            │       from ..config  import Config
            │       #-------------------------------------------------------------------------------
            │       class Engine:
            │           """
            │           SQLエンジンを初期化・管理するためのクラス
            │           データベースの接続設定、エンジンの初期化、SQL発行に必要な
            │           各種情報の取得・設定を提供する
            │           """
            │           #---------------------------------------------------------------------------
            │           def __init__(
            │                   self,
            │                   sqlEngineName : str,
            │                   hostName      : str | None = None,
            │                   userName      : str | None = None,
            │                   password      : str | None = None,
            │                   database      : str | None = None
            │               ):
            │               """
            │               エンジンを初期化し、接続情報を登録する。
            │               Args:
            │                   sqlEngineName (str) : 使用するエンジン名
            │                   hostName      (str) : ホスト名
            │                   userName      (str) : ユーザー名
            │                   password      (str) : パスワード
            │                   databaseName  (str) : データベース名またはDBファイルパス
            │               """
            │               self.sqlEngineName = sqlEngineName
            │               self.hostName      = hostName
            │               self.userName      = userName
            │               self.password      = password
            │               self.database      = database
            │           #---------------------------------------------------------------------------
            │           @public
            │           def launch(self) -> None:
            │               """
            │               SQLエンジンをエンジン名に応じて初期化する
            │               Raises:
            │                   ModuleNotFoundError : 未対応のエンジン名が指定された場合
            │               """
            │               if self.sqlEngineName == "sqlite3":
            │                   if self.database:
            │                       self.sqlEngine = Sqlite3Engine(
            │                           databasePath = self.database
            │                       )
            │                   else:
            │                       raise Exception("データベースを指定してください")
            │               elif self.sqlEngineName == "mysql":
            │                   if  self.hostName and self.userName \
            │                   and self.password and self.database:
            │                       self.sqlEngine = MySqlEngine(
            │                           hostName     = self.hostName,
            │                           userName     = self.userName,
            │                           password     = self.password,
            │                           databaseName = self.database
            │                       )
            │                   else:
            │                       raise Exception("引数を指定ください")
            │               else:
            │                   raise ModuleNotFoundError("未対応のモジュールエンジンです")
            │               Config.sqlEngine = self.sqlEngine
            │               Config.database  = self.database
            │           #---------------------------------------------------------------------------
            │           @public
            │           def commit(self) -> None:
            │               """
            │               トランザクションをコミットする
            │               """
            │               self.sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def connectOpen(self) -> None:
            │               """
            │               データベース接続を開始する
            │               """
            │               self.sqlEngine.connectOpen()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def connectClose(self) -> None:
            │               """
            │               データベース接続を閉じる
            │               """
            │               self.sqlEngine.connectClose()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def select(
            │                   self,
            │                   table    : type[Model],
            │                   *columns : Column
            │               ) -> Select:
            │               """
            │               SELECT文用のSelectオブジェクトを生成する
            │               Args:
            │                   table   (type[Model]) : モデルクラス
            │                   columns (Column...)   : 取得対象のカラム
            │               Returns:
            │                   Select : SELECTクラス
            │               """
            │               # columnsが引数として指定されていない場合は*として認識する
            │               if len(columns) == 0:
            │                   cols = "*"
            │               else:
            │                   cols = ", ".join(col.columnName for col in columns)
            │               return Select(
            │                   tableName  = table.tableName, # テーブル名
            │                   columns    = cols,            # カラム
            │               )
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .base        import MySqlEngine
            │       from .base        import AsyncMySqlEngine
            │       from .base        import Sqlite3Engine
            │       from .base        import AsyncSqlite3Engine
            │       from .Engine      import Engine
            │       from .AsyncEngine import AsyncEngine
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "MySqlEngine",
            │           "AsyncMySqlEngine",
            │           "Sqlite3Engine",
            │           "AsyncSqlite3Engine",
            │           "Engine",
            │           "AsyncEngine"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [filed]
            │   ├── BoolFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed   # 基底クラス
            │       from ..datatypes import Boolean # 論理値型
            │       #-------------------------------------------------------------------------------
            │       class BoolFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   isUnique        = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = Boolean(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = isUnique,
            │                   isAutoincrement = False,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── DateTimeFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed    # 基底クラス
            │       from ..datatypes import DateTime # 日付型
            │       #-------------------------------------------------------------------------------
            │       class DateTimeFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   isUnique        = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = DateTime(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = isUnique,
            │                   isAutoincrement = False,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── Filed.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..datatypes.DataType import DataType    # データ型　<-インポートエラー回避
            │       from ..column             import Column      # カラムクラス
            │       from ..constraints        import Default     # デフォルト値クラス
            │       from ..constraints        import NotNull     # NotNullクラス
            │       from ..constraints        import Unique      # ユニーク設定クラス
            │       from ..constraints        import ForeignKey  # 外部キー制約クラス
            │       from ..common             import private     # プライベートメソッド
            │       from ..common             import override    # オーバライドメソッド
            │       #-------------------------------------------------------------------------------
            │       class Filed(Column):
            │           def __init__(
            │                   self,
            │                   dataType        : DataType,
            │                   isPrimaryKey    : bool       = False,
            │                   isNotNull       : bool       = False,
            │                   isUnique        : bool       = False,
            │                   isAutoincrement : bool       = False,
            │                   default         : str | None = None,
            │                   foreignKey      : str | None = None
            │               ) -> None:
            │               # 制約
            │               self.dataType        = dataType
            │               self.isPrimaryKey    = isPrimaryKey
            │               self.isNotNull       = isNotNull
            │               self.isUnique        = isUnique
            │               self.isAutoincrement = isAutoincrement
            │               self.default         = default
            │               self.foreignKey      = foreignKey
            │               #
            │               self.columnName  : str
            │               self.tableName   : str
            │               self.dataTypeSql : str
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setDataTypeSql(self) -> None: ...
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setPrimaryKeySql(self) -> None:
            │               return super().setPrimaryKeySql(self.isPrimaryKey)
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setDefaultSql(self) -> None:
            │               return super().setDefaultSql(
            │                   Default(self.default)
            │               )
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setNotNullSql(self) -> None:
            │               return super().setNotNullSql(
            │                   NotNull(self.isNotNull)
            │               )
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setUniqueSql(self) -> None:
            │               return super().setUniqueSql(
            │                   Unique()
            │               )
            │           #---------------------------------------------------------------------------
            │           @override
            │           @private
            │           def setForeignKeySql(self) -> None:
            │               if self.foreignKey is None:
            │                   foreignKey = None
            │               else:
            │                   foreignKey = ForeignKey(
            │                       referenceName = self.foreignKey,
            │                       onUpdate      = None,
            │                       onDelete      = None
            │                   )
            │               return super().setForeignKeySql(
            │                   foreignKey = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── FloatFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed # 基底クラス
            │       from ..datatypes import Float # 浮動小数点型
            │       #-------------------------------------------------------------------------------
            │       class FloatFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   isUnique        = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = Float(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = isUnique,
            │                   isAutoincrement = False,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── IntFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed   # 基底クラス
            │       from ..datatypes import Integer # 整数型
            │       #-------------------------------------------------------------------------------
            │       class IntFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   isUnique        = False,
            │                   isAutoincrement = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = Integer(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = isUnique,
            │                   isAutoincrement = isAutoincrement,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── StrFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed # 基底クラス
            │       from ..datatypes import Char  # 固定長文字列型
            │       #-------------------------------------------------------------------------------
            │       class StrFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   isUnique        = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = Char(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = isUnique,
            │                   isAutoincrement = False,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   ├── TimeFiled.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Filed      import Filed # 基底クラス
            │       from ..datatypes import Time  # 時刻型
            │       #-------------------------------------------------------------------------------
            │       class TimeFiled(Filed):
            │           def __init__(
            │                   self,
            │                   isPrimaryKey    = False,
            │                   isNotNull       = False,
            │                   default         = None,
            │                   foreignKey      = None
            │               ) -> None:
            │               super().__init__(
            │                   dataType        = Time(),
            │                   isPrimaryKey    = isPrimaryKey,
            │                   isNotNull       = isNotNull,
            │                   isUnique        = False,
            │                   isAutoincrement = False,
            │                   default         = default,
            │                   foreignKey      = foreignKey
            │               )
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .BoolFiled     import BoolFiled
            │       from .DateTimeFiled import DateTimeFiled
            │       from .Filed         import Filed
            │       from .FloatFiled    import FloatFiled
            │       from .IntFiled      import IntFiled
            │       from .StrFiled      import StrFiled
            │       from .TimeFiled     import TimeFiled
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "BoolFiled",
            │           "DateTimeFiled",
            │           "Filed",
            │           "FloatFiled",
            │           "IntFiled",
            │           "StrFiled",
            │           "TimeFiled"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [index]
            │   ├── Index.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common import private
            │       from ..common import public
            │       from ..config import Config
            │       from ..column import Column
            │       #-------------------------------------------------------------------------------
            │       class Index:
            │           def __init__(
            │                   self,
            │                   indexName : str,
            │                   *columns  : Column
            │               ) -> None:
            │               """
            │               インデックスの操作クラス
            │               Args:
            │                   indexName (str)    : インデックス名
            │                   *columns  (Column) : カラムオブジェクト
            │               Examples:
            │                   ↓ インデックスインスタンスの作成
            │                   index = Index("indexName", User.id, User.name)
            │                   ↓ インデックスを作成
            │                   index.create()
            │                   ↓ インデックスを削除
            │                   index.drop()
            │                   ※ 各操作は自動でコミットされる
            │               """
            │               self.__indexName = indexName        # インデックス名
            │               self.__columns   = columns          # カラムオブジェクト群
            │               self.__sqlEngine = Config.sqlEngine # エンジンオブジェクト
            │           #---------------------------------------------------------------------------
            │           @ private
            │           def __columnsToSql(self) -> str:
            │               query = ""
            │               for col in self.__columns:
            │                   if query == "":
            │                       query += f"{col.tableName}("
            │                   else:
            │                       query += f"{col.columnName}, "
            │               else:
            │                   query = query[:-2]
            │                   query += ")"
            │               # User (id, name, ...)の形に成形して返す
            │               return query
            │           #---------------------------------------------------------------------------
            │           @ public
            │           def create(self) -> None:
            │               """
            │               インデックスの作成
            │               """
            │               # User (id, name, ...)の形を取得する
            │               colToSql = self.__columnsToSql()
            │               # クエリ
            │               query = f"CREATE INDEX {self.__indexName} ON {colToSql};"
            │               # エンジンが設定されていたら
            │               if not self.__sqlEngine is None:
            │                   self.__sqlEngine.execute(query = query)
            │                   self.__sqlEngine.commit()
            │               else:
            │                   raise Exception("エンジンが未設定です")
            │           #---------------------------------------------------------------------------
            │           @ public
            │           def drop(self) -> None:
            │               """
            │               インデックスの削除
            │               """
            │               # クエリ
            │               query = f"DROP INDEX IF NOT EXISTS {self.__indexName};"
            │               # エンジンが設定されていたら
            │               if not self.__sqlEngine is None:
            │                   self.__sqlEngine.execute(query = query)
            │                   self.__sqlEngine.commit()
            │               else:
            │                   raise Exception("エンジンが未設定です")
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Index import Index
            │       __all__ = [
            │           "Index"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [manager]
            │   ├── [alter]
            │   │   ├── AlterTableAddColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AlterTableAddColumn(Base):
            │   │           """テーブルにカラムを追加するクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   column      : str,
            │   │                   dataType    : str,
            │   │                   constraints : str,
            │   │               ):
            │   │               """
            │   │               テーブルにカラムを追加するクラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   column      (str) : カラム名
            │   │                   dataType    (str) : データ型
            │   │                   constraints (str) : 制約
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} ADD " \
            │   │                            + f"{column} {dataType} {constraints};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AlterTableAddConstraint.py
            │   │       ↓ 内容（最大10000行）
            │   │       from ..Base import Base    #マネージャーのベースクラス
            │   │
            │   │       class AlterTableAddConstraint(Base):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │
            │   │   ├── AlterTableDropColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AlterTableDropColumn(Base):
            │   │           """テーブルからカラムを削除するクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName  : str,
            │   │                   columnName : str
            │   │               ):
            │   │               """
            │   │               テーブルからカラムを削除するクラスの初期化
            │   │               Args:
            │   │                   tableName (str)  : テーブル名
            │   │                   columnNmae (str) : カラム名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} DROP COLUMN {columnName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AlterTableDropConstraint.py
            │   │       ↓ 内容（最大10000行）
            │   │       from ..Base import Base    #マネージャーのベースクラス
            │   │
            │   │       class AlterTableDropConstraint(Base):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │   ├── AlterTableRenameColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AlterTableRenameColumn(Base):
            │   │           """テーブルのカラム名変更クラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   oldName   : str,
            │   │                   newName   : str,
            │   │               ):
            │   │               """
            │   │               テーブルのカラム名変更クラス
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   oldName   (str) : 既存の名前
            │   │                   newName   (str) : 新しい名前
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} " \
            │   │                            + f"RENAME COLUMN {oldName} TO {newName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AlterTableRenameTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       from ..Base import Base    #マネージャーのベースクラス
            │   │       class AlterTableRenameTable(Base):
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName: str
            │   │               ):
            │   │               super().__init__(tableName)
            │   │   ├── AlterView.py
            │   │       ↓ 内容（最大10000行）
            │   │       from ..Base import Base    #マネージャーのベースクラス
            │   │
            │   │       class AlterView(Base):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │   ├── AsyncAlterTableAddColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableAddColumn(AsyncBase):
            │   │           """テーブルにカラムを追加するクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   column      : str,
            │   │                   dataType    : str,
            │   │                   constraints : str,
            │   │               ):
            │   │               """
            │   │               テーブルにカラムを追加するクラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   column      (str) : カラム名
            │   │                   dataType    (str) : データ型
            │   │                   constraints (str) : 制約
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} ADD " \
            │   │                            + f"{column} {dataType} {constraints};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterTableAddConstraint.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableAddConstraint(AsyncBase):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterTableDropColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableDropColumn(AsyncBase):
            │   │           """テーブルからカラムを削除するクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName  : str,
            │   │                   columnName : str
            │   │               ):
            │   │               """
            │   │               テーブルからカラムを削除するクラスの初期化
            │   │               Args:
            │   │                   tableName (str)  : テーブル名
            │   │                   columnNmae (str) : カラム名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} DROP COLUMN {columnName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterTableDropConstraint.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableDropConstraint(AsyncBase):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterTableRenameColumn.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableRenameColumn(AsyncBase):
            │   │           """テーブルのカラム名変更クラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   oldName   : str,
            │   │                   newName   : str,
            │   │               ):
            │   │               """
            │   │               テーブルのカラム名変更クラス
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   oldName   (str) : 既存の名前
            │   │                   newName   (str) : 新しい名前
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"ALTER TABLE {tableName} " \
            │   │                            + f"RENAME COLUMN {oldName} TO {newName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterTableRenameTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterTableRenameTable(AsyncBase):
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName: str
            │   │               ):
            │   │               super().__init__(tableName)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncAlterView.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncAlterView(AsyncBase):
            │   │           def __init__(self, tableName: str):
            │   │               super().__init__(tableName)
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .AlterTableAddColumn           import AlterTableAddColumn
            │   │       from .AlterTableAddConstraint       import AlterTableAddConstraint
            │   │       from .AlterTableDropColumn          import AlterTableDropColumn
            │   │       from .AlterTableDropConstraint      import AlterTableDropConstraint
            │   │       from .AlterTableRenameColumn        import AlterTableRenameColumn
            │   │       from .AlterTableRenameTable         import AlterTableRenameTable
            │   │       from .AlterView                     import AlterView
            │   │       from .AsyncAlterTableAddColumn      import AsyncAlterTableAddColumn
            │   │       from .AsyncAlterTableAddConstraint  import AsyncAlterTableAddConstraint
            │   │       from .AsyncAlterTableDropColumn     import AsyncAlterTableDropColumn
            │   │       from .AsyncAlterTableDropConstraint import AsyncAlterTableDropConstraint
            │   │       from .AsyncAlterTableRenameColumn   import AsyncAlterTableRenameColumn
            │   │       from .AsyncAlterTableRenameTable    import AsyncAlterTableRenameTable
            │   │       from .AsyncAlterView                import AsyncAlterView
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "AlterTableAddColumn",
            │   │           "AlterTableAddConstraint",
            │   │           "AlterTableDropColumn",
            │   │           "AlterTableDropConstraint",
            │   │           "AlterTableRenameColumn",
            │   │           "AlterTableRenameTable",
            │   │           "AlterView",
            │   │           "AsyncAlterTableAddColumn",
            │   │           "AsyncAlterTableAddConstraint",
            │   │           "AsyncAlterTableDropColumn",
            │   │           "AsyncAlterTableDropConstraint",
            │   │           "AsyncAlterTableRenameColumn",
            │   │           "AsyncAlterTableRenameTable",
            │   │           "AsyncAlterView"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── [create]
            │   │   ├── AsyncCreateIndex.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncCreateIndex(AsyncBase):
            │   │           """非同期インデックス作成クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   indexName : str,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │               非同期インデックス作成クラスの初期化
            │   │               Args:
            │   │                   indexName (str) : インデックス名
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : カラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"CREATE {indexName} ON {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def exexute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncCreateTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncCreateTable(AsyncBase):
            │   │           """
            │   │           非同期テーブル作成クラス
            │   │           ※存在する場合も
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │               非同期テーブル作成クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : CREATE TABLE (...);の...部分
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"CREATE TABLE {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncCreateTableIfNotExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncCreateTableIfNotExists(AsyncBase):
            │   │           """非同期テーブル作成クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │               非同期テーブル作成クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : CREATE TABLE (...);の...部分
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"CREATE TABLE IF NOT EXISTS {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncCreateTrigger.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import private   # プライベートメソッド
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncCreateTrigger(AsyncBase):
            │   │           """非同期トリガーの作成"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str,
            │   │                   timing      : str,
            │   │                   event       : str,
            │   │                   body        : str
            │   │               ):
            │   │               """
            │   │               非同期トリガーの作成
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │                   timing      (str) : タイミング BEFORE AFTER
            │   │                   event       (str) : イベント  INSERT UPDATE DELETE
            │   │                   body        (str) : 実行するSQL文
            │   │               Examples:
            │   │                   trigger = User.createTrigger(
            │   │                       "tableName",
            │   │                       "triggerName",
            │   │                       "before | after",
            │   │                       "inser | update | delete",
            │   │                       "SQL文"
            │   │                   )
            │   │                   trigger.execute()
            │   │                   trigger.commit()
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = self.__buildQuery(
            │   │                   tableName   = tableName,
            │   │                   triggerName = triggerName,
            │   │                   timing      = timing,
            │   │                   event       = event,
            │   │                   body        = body
            │   │               )
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __buildQuery(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str,
            │   │                   timing      : str,
            │   │                   event       : str,
            │   │                   body        : str
            │   │               ) -> str:
            │   │               """
            │   │               トリガー作成クエリの作成用のプライベートメソッド
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │                   timing      (str) : タイミング BEFORE AFTER
            │   │                   event       (str) : イベント  INSERT UPDATE DELETE
            │   │                   body        (str) : 実行するSQL文
            │   │               """
            │   │               query = f"CREATE {triggerName} "
            │   │               if timing == "before":
            │   │                   query += "BEFORE " # 末尾にスペース
            │   │               elif timing == "after":
            │   │                   query += "AFTER "  # 末尾にスペース
            │   │               else:
            │   │                   raise Exception(f"使えない引数:{timing} を指定しています。")
            │   │               if event == "insert":
            │   │                   query += "INSERT " # 末尾にスペース
            │   │               elif event == "update":
            │   │                   query += "UPDATE " # 末尾にスペース
            │   │               elif event == "delete":
            │   │                   query += "DELETE " # 末尾にスペース
            │   │               else:
            │   │                   raise Exception(f"使えない引数:{event} を指定しています。")
            │   │               query += f"ON {tableName} EACH ROW BIGIN {body} END;"
            │   │               return query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self) -> str:
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncCreateView.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncCreateView(Base):
            │   │           def __init__(
            │   │                   self,
            │   │                   viewName  : str,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               super().__init__(tableName)
            │   │               self.__viewName  = viewName
            │   │               self.__columns   = columns
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def where(self, **conditon):
            │   │               query = f"CREATE VIEW {self.__viewName} AS"
            │   │               con = ""
            │   │               for key, value in conditon.items():
            │   │                   con += f"{key} = {value}"
            │   │               return ...
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── CreateIndex.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class CreateIndex(Base):
            │   │           """インデックス作成クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   indexName : str,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │                   インデックス作成クラス
            │   │                   Args:
            │   │                       indexName (str) : インデックス名
            │   │                       tableName (str) : テーブル名
            │   │                       columns   (str) : カラム(文字列形式)
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"CREATE {indexName} ON {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def exexute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── CreateTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base          import Base          # 基底クラス
            │   │       from ...common       import public        # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class CreateTable(Base):
            │   │           """
            │   │           テーブル作成クラス
            │   │           ※存在する場合も
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │               テーブル作成クラスの初期化
            │   │               Args;
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : CREATE TABLE (...);の...部分
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"CREATE TABLE {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @property
            │   │           @public
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── CreateTableIfNotExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class CreateTableIfNotExists(Base):
            │   │           """テーブル作成クラスの初期化"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               """
            │   │               テーブル作成クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : CREATE TABLE (...);の...部分
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"CREATE TABLE IF NOT EXISTS {tableName} ({columns});"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── CreateTrigger.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base    # 基底クラス
            │   │       from ...common import private # プライベートメソッド
            │   │       from ...common import public  # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class CreateTrigger(Base):
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str,
            │   │                   timing      : str,
            │   │                   event       : str,
            │   │                   body        : str
            │   │               ):
            │   │               """
            │   │               トリガーの作成
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │                   timing      (str) : タイミング BEFORE AFTER
            │   │                   event       (str) : イベント  INSERT UPDATE DELETE
            │   │                   body        (str) : 実行するSQL文
            │   │               Examples:
            │   │                   trigger = User.createTrigger(
            │   │                       "tableName",
            │   │                       "triggerName",
            │   │                       "before | after",
            │   │                       "inser | update | delete",
            │   │                       "SQL文"
            │   │                   )
            │   │                   trigger.execute()
            │   │                   trigger.commit()
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = self.__buildQuery(
            │   │                   tableName   = tableName,
            │   │                   triggerName = triggerName,
            │   │                   timing      = timing,
            │   │                   event       = event,
            │   │                   body        = body
            │   │               )
            │   │           #---------------------------------------------------------------------------
            │   │           @private
            │   │           def __buildQuery(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str,
            │   │                   timing      : str,
            │   │                   event       : str,
            │   │                   body        : str
            │   │               ) -> str:
            │   │               """
            │   │               トリガー作成クエリの作成用のプライベートメソッド
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │                   timing      (str) : タイミング BEFORE AFTER
            │   │                   event       (str) : イベント  INSERT UPDATE DELETE
            │   │                   body        (str) : 実行するSQL文
            │   │               """
            │   │               query = f"CREATE {triggerName} "
            │   │               if timing == "before":
            │   │                   query += "BEFORE " # 末尾にスペース
            │   │               elif timing == "after":
            │   │                   query += "AFTER "  # 末尾にスペース
            │   │               else:
            │   │                   raise Exception(f"使えない引数:{timing} を指定しています。")
            │   │               if event == "insert":
            │   │                   query += "INSERT " # 末尾にスペース
            │   │               elif event == "update":
            │   │                   query += "UPDATE " # 末尾にスペース
            │   │               elif event == "delete":
            │   │                   query += "DELETE " # 末尾にスペース
            │   │               else:
            │   │                   raise Exception(f"使えない引数:{event} を指定しています。")
            │   │               query += f"ON {tableName} EACH ROW BIGIN {body} END;"
            │   │               return query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self) -> str:
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── CreateView.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class CreateView(Base):
            │   │           def __init__(
            │   │                   self,
            │   │                   viewName  : str,
            │   │                   tableName : str,
            │   │                   columns   : str
            │   │               ):
            │   │               super().__init__(tableName)
            │   │               self.__viewName  = viewName
            │   │               self.__columns   = columns
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def where(self, **conditon):
            │   │               query = f"CREATE VIEW {self.__viewName} AS"
            │   │               con = ""
            │   │               for key, value in conditon.items():
            │   │                   con += f"{key} = {value}"
            │   │               return ...
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .AsyncCreateIndex            import AsyncCreateIndex
            │   │       from .AsyncCreateTable            import AsyncCreateTable
            │   │       from .AsyncCreateTable            import AsyncCreateTable
            │   │       from .AsyncCreateTableIfNotExists import AsyncCreateTableIfNotExists
            │   │       from .AsyncCreateTrigger          import AsyncCreateTrigger
            │   │       from .AsyncCreateView             import AsyncCreateView
            │   │       from .CreateIndex                 import CreateIndex
            │   │       from .CreateTable                 import CreateTable
            │   │       from .CreateTableIfNotExists      import CreateTableIfNotExists
            │   │       from .CreateTrigger               import CreateTrigger
            │   │       from .CreateView                  import CreateView
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "AsyncCreateIndex",
            │   │           "AsyncCreateTable",
            │   │           "AsyncCreateTable",
            │   │           "AsyncCreateTableIfNotExists",
            │   │           "AsyncCreateTrigger",
            │   │           "AsyncCreateView",
            │   │           "CreateIndex",
            │   │           "CreateTable",
            │   │           "CreateTableIfNotExists",
            │   │           "CreateTrigger",
            │   │           "CreateView"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── [drop]
            │   │   ├── AsyncDropIndex.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropIndex(AsyncBase):
            │   │           """インデックス削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   indexName : str
            │   │               ):
            │   │               """
            │   │               インデックス削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   indexName (str) : インデックス名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP INDEX {indexName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropIndexIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropIndexIfExists(AsyncBase):
            │   │           """インデックス削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   indexName : str
            │   │               ):
            │   │               """
            │   │               インデックス削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   indexName (str) : インデックス名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP INDEX IF NOT EXISTS{indexName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropTable(AsyncBase):
            │   │           """テーブル削除クラス"""
            │   │           def __init__(self, tableName: str):
            │   │               """
            │   │               テーブル削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TABLE {self.tableName}"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropTableIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropTableIfExists(AsyncBase):
            │   │           """テーブル削除クラス"""
            │   │           def __init__(self, tableName: str):
            │   │               """
            │   │               テーブル削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TABLE IF NOT EXISTS {self.tableName}"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropTrigger.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropTrigger(AsyncBase):
            │   │           """トリガー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str
            │   │               ):
            │   │               """
            │   │               トリガー削除クラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TRIGGER {triggerName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropTriggerIfNotExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropTriggerIfNotExists(AsyncBase):
            │   │           """トリガー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str
            │   │               ):
            │   │               """
            │   │               トリガー削除クラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TRIGGER IF NOT EXISTS {triggerName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropView.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropView(AsyncBase):
            │   │           """ビュー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   viewName  : str
            │   │               ):
            │   │               """
            │   │               ビュー削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   vieName   (str) : 削除するビュー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP VIEW {viewName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncDropViewIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase   # 基底クラス
            │   │       from ...common   import public      # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDropViewIfExists(AsyncBase):
            │   │           """ビュー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   viewName  : str
            │   │               ):
            │   │               """
            │   │               ビュー削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   vieName   (str) : 削除するビュー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP VIEW IF NOT EXISTS {viewName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               await self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropIndex.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropIndex(Base):
            │   │           """インデックス削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   indexName : str
            │   │               ):
            │   │               """
            │   │               インデックス削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   indexName (str) : インデックス名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP INDEX {indexName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropIndexIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropIndexIfExists(Base):
            │   │           """インデックス削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   indexName : str
            │   │               ):
            │   │               """
            │   │               インデックス削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   indexName (str) : インデックス名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP INDEX IF NOT EXISTS{indexName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropTable.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropTable(Base):
            │   │           """テーブル削除クラス"""
            │   │           def __init__(self, tableName: str):
            │   │               """
            │   │               テーブル削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TABLE {self.tableName}"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropTableIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropTableIfExists(Base):
            │   │           """テーブル削除クラス"""
            │   │           def __init__(self, tableName: str):
            │   │               """
            │   │               テーブル削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TABLE IF NOT EXISTS {self.tableName}"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropTrigger.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropTrigger(Base):
            │   │           """トリガー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str
            │   │               ):
            │   │               """
            │   │               トリガー削除クラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TRIGGER {triggerName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropTriggerIfNotExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropTriggerIfNotExists(Base):
            │   │           """トリガー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName   : str,
            │   │                   triggerName : str
            │   │               ):
            │   │               """
            │   │               トリガー削除クラスの初期化
            │   │               Args:
            │   │                   tableName   (str) : テーブル名
            │   │                   triggerName (str) : トリガー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP TRIGGER IF NOT EXISTS {triggerName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropView.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropView(Base):
            │   │           """ビュー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   viewName  : str
            │   │               ):
            │   │               """
            │   │               ビュー削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   vieName   (str) : 削除するビュー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP VIEW {viewName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DropViewIfExists.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DropViewIfExists(Base):
            │   │           """ビュー削除クラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   viewName  : str
            │   │               ):
            │   │               """
            │   │               ビュー削除クラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   vieName   (str) : 削除するビュー名
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"DROP VIEW IF NOT EXISTS {viewName};"
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               self.sqlEngine.execute(self.__query)
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .AsyncDropIndex                import AsyncDropIndex
            │   │       from .AsyncDropIndexIfExists        import AsyncDropIndexIfExists
            │   │       from .AsyncDropTable                import AsyncDropTable
            │   │       from .AsyncDropTableIfExists        import AsyncDropTableIfExists
            │   │       from .AsyncDropTrigger              import AsyncDropTrigger
            │   │       from .AsyncDropTriggerIfNotExists   import AsyncDropTriggerIfNotExists
            │   │       from .AsyncDropView                 import AsyncDropView
            │   │       from .AsyncDropViewIfExists         import AsyncDropViewIfExists
            │   │       from .DropIndex                     import DropIndex
            │   │       from .DropIndexIfExists             import DropIndexIfExists
            │   │       from .DropTable                     import DropTable
            │   │       from .DropTableIfExists             import DropTableIfExists
            │   │       from .DropTrigger                   import DropTrigger
            │   │       from .DropTriggerIfNotExists        import DropTriggerIfNotExists
            │   │       from .DropView                      import DropView
            │   │       from .DropViewIfExists              import DropViewIfExists
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "AsyncDropIndex",
            │   │           "AsyncDropIndexIfExists",
            │   │           "AsyncDropTable",
            │   │           "AsyncDropTableIfExists",
            │   │           "AsyncDropTrigger",
            │   │           "AsyncDropTriggerIfNotExists",
            │   │           "AsyncDropView",
            │   │           "AsyncDropViewIfExists",
            │   │           "DropIndex",
            │   │           "DropIndexIfExists",
            │   │           "DropTable",
            │   │           "DropTableIfExists",
            │   │           "DropTrigger",
            │   │           "DropTriggerIfNotExists",
            │   │           "DropView",
            │   │           "DropViewIfExists"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── [record]
            │   │   ├── AsyncDeleteRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncDeleteRecord(AsyncBase):
            │   │           """
            │   │           レコード削除クラス
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   values    : tuple
            │   │               ):
            │   │               """
            │   │               レコード削除のクラスの初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"DELETE FROM {self.tableName} WHERE {columns}"
            │   │               # プレイスホルダーをSQLによって置き換える
            │   │               self.__query = self.__query.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncInsertRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncInsertRecord(AsyncBase):
            │   │           """
            │   │           レコードを挿入するクラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │                   placeHolders : str
            │   │               ):
            │   │               """
            │   │               レコード挿入の初期化
            │   │               Args:
            │   │                   tableName    (str)   : テーブル名
            │   │                   columns      (str)   : カラム(str) id, name, age
            │   │                   values       (tuple) : 値 1, "name", 19
            │   │                   placeHolders (str)   : プレイスホルダー
            │   │               """
            │   │               # オーバーロード
            │   │               super().__init__(tableName)
            │   │               # プレイスホルダーをSQLによって変える
            │   │               placeHolders = placeHolders.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # クエリ
            │   │               self.__query = f"INSERT INTO {self.tableName} "\
            │   │                            + f"({columns}) VALUES ({placeHolders});"
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncInsertRecords.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncInsertRecords(AsyncBase):
            │   │           """
            │   │           レコードを複数挿入するクラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   data         : list[tuple[str]],
            │   │                   placeHolders : str
            │   │               ):
            │   │               """
            │   │               レコード挿入の初期化
            │   │               Args:
            │   │                   tableName    (str)              : テーブル名
            │   │                   columns      (str)              : カラム(str) id, name, age
            │   │                   data         (list[tuple[str]]) : 値
            │   │                                                     [(1,  2,  3 ),
            │   │                                                      (a,  b,  c ),
            │   │                                                      (19, 22, 17)]
            │   │                   placeHolders (str)              : プレイスホルダー
            │   │               """
            │   │               # オーバーロード
            │   │               super().__init__(tableName)
            │   │               # プレイスホルダーをSQLによって変える
            │   │               placeHolders = placeHolders.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # クエリ
            │   │               self.__query = f"INSERT INTO {self.tableName} "\
            │   │                            + f"({columns}) VALUES ({placeHolders});"
            │   │               # 値
            │   │               self.__data = data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def data(self):
            │   │               """値"""
            │   │               return self.__data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def execute(self):
            │   │               return await super().executeAny(self.__query, self.__data)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncUpdateRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncUpdateRecord(AsyncBase):
            │   │           """
            │   │           レコード更新クラス
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │               ):
            │   │               """
            │   │               レコード更新の初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__columns = columns # カラム
            │   │               self.__values  = values  # 値
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           async def where(self, **conditionsColumn):
            │   │               """
            │   │               指定したレコードを更新するメソッド
            │   │               Args:
            │   │                   **conditionsColumn (str) : 更新したい条件カラムを指定
            │   │               Examples:
            │   │                   user = User.updateRecord(name = "a", age = 20)
            │   │                   user.where(id = 1) ※複数条件は指定できない
            │   │                   user.execute()
            │   │                   user.commit()
            │   │               Returns:
            │   │                   Where : 条件指定クラスを返す
            │   │               """
            │   │               conditions = ""
            │   │               for key, value in conditionsColumn.items():
            │   │                   conditions    += f"{key} = ?"
            │   │                   self.__values += tuple(str(value))
            │   │               return Where(
            │   │                   tableName    = self.tableName, # テーブル名
            │   │                   columns      = self.__columns, # カラム
            │   │                   values       = self.__values,  # 値
            │   │                   conditions   = conditions,     # 条件カラム
            │   │               )
            │   │       #-------------------------------------------------------------------------------
            │   │       class Where(AsyncBase):
            │   │           """
            │   │           条件クラス(UpdateRecord用)
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │                   conditions   : str,
            │   │               ) -> None:
            │   │               """
            │   │               条件クラスの初期化
            │   │               Args:
            │   │                   tableName  (str)   : テーブル名
            │   │                   columns    (str)   : 更新するカラム
            │   │                   values     (tuple) : 値
            │   │                   conditions (str)   : 条件のカラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"UPDATE {tableName} SET {columns} WHERE {conditions};"
            │   │               # プレイスホルダーをSQLによって変更
            │   │               self.__query = self.__query.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               return super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── AsyncUpdateRecords.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..AsyncBase import AsyncBase # 基底クラス
            │   │       from ...common   import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class AsyncUpdateRecords(AsyncBase):
            │   │           """
            │   │           複数レコード更新クラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   data      : list[tuple[str]]
            │   │               ):
            │   │               """
            │   │               複数レコード更新の初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__columns   = columns
            │   │               self.__data      = data
            │   │           #---------------------------------------------------------------------------
            │   │           @ public
            │   │           async def where(self, **conditionsColumn):
            │   │               """
            │   │               指定したレコードを更新するメソッド
            │   │               Args:
            │   │                   **conditionsColumns : 更新したい条件カラムを指定する
            │   │               Examples:
            │   │                   user = User.updateRecords(
            │   │                       name = ["a","b","c"], age = [20,22,24]
            │   │                   ).where(id = [1,2,3]) ※whereも忘れずに
            │   │                   user.execute()
            │   │                   user.commit()
            │   │               Returns:
            │   │                   Where : 条件指定クラスを返す
            │   │               """
            │   │               conditions = "" # 条件文
            │   │               datas      = [] # 値のリスト(最終的にタプルにする)
            │   │               # 成型
            │   │               for key, values in conditionsColumn.items():
            │   │                   conditions += f"{key} = ?"
            │   │                   # プレイスホルダーで使用できるようにする
            │   │                   for i in range(len(values)):
            │   │                       data = list(self.__data[i]) # appendできるようにリスト型に変更
            │   │                       data.append(values[i])      # プレイスホルダーで使用できるように
            │   │                                                   # 末尾にデータを足す
            │   │                       datas.append(tuple(data))   # タプル型に変更し、リストに加える
            │   │               print(datas)
            │   │               return Where(
            │   │                   tableName  = self.tableName, # テーブル名
            │   │                   columns    = self.__columns, # カラム
            │   │                   data       = datas,          # 値
            │   │                   conditions = conditions,     # 条件
            │   │               )
            │   │       #-------------------------------------------------------------------------------
            │   │       class Where(AsyncBase):
            │   │           """
            │   │           条件クラス(UpdateRecords用)
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName  : str,
            │   │                   columns    : str,
            │   │                   data       : list[tuple[str]],
            │   │                   conditions : str,
            │   │
            │   │               ) -> None:
            │   │               """
            │   │               条件クラスの初期化
            │   │               Args:
            │   │                   tableName  (str)              : テーブル名
            │   │                   columns    (str)              : 更新するカラム
            │   │                   values     (list[tuple[str]]) : 値
            │   │                   conditions (str)              : 条件のカラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"UPDATE {tableName} SET {columns}" \
            │   │                            + f"WHERE {conditions};"
            │   │               # プレイスホルダーをSQLによって置き換える
            │   │               self.__query = self.__query.replace("?", self.sqlEngine.PLACEHOLDER)
            │   │               # 値
            │   │               self.__data = data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__data
            │   │           #---------------------------------------------------------------------------
            │   │           async def execute(self):
            │   │               return await super().executeAny(self.__query, self.__data)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── DeleteRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class DeleteRecord(Base):
            │   │           """
            │   │           レコード削除クラス
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   values    : tuple
            │   │               ):
            │   │               """
            │   │               レコード削除のクラスの初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"DELETE FROM {self.tableName} WHERE {columns}"
            │   │               # プレイスホルダーをSQLによって置き換える
            │   │               self.__query = self.__query.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── InsertRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class InsertRecord(Base):
            │   │           """
            │   │           レコードを挿入するクラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │                   placeHolders : str
            │   │               ):
            │   │               """
            │   │               レコード挿入の初期化
            │   │               Args:
            │   │                   tableName    (str)   : テーブル名
            │   │                   columns      (str)   : カラム(str) id, name, age
            │   │                   values       (tuple) : 値 1, "name", 19
            │   │                   placeHolders (str)   : プレイスホルダー
            │   │               """
            │   │               # オーバーロード
            │   │               super().__init__(tableName)
            │   │               # プレイスホルダーをSQLによって変える
            │   │               placeHolders = placeHolders.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # クエリ
            │   │               self.__query = f"INSERT INTO {self.tableName} "\
            │   │                            + f"({columns}) VALUES ({placeHolders});"
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── InsertRecords.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class InsertRecords(Base):
            │   │           """
            │   │           レコードを複数挿入するクラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   data         : list[tuple[str]],
            │   │                   placeHolders : str
            │   │               ):
            │   │               """
            │   │               レコード挿入の初期化
            │   │               Args:
            │   │                   tableName    (str)              : テーブル名
            │   │                   columns      (str)              : カラム(str) id, name, age
            │   │                   data         (list[tuple[str]]) : 値
            │   │                                                     [(1,  2,  3 ),
            │   │                                                      (a,  b,  c ),
            │   │                                                      (19, 22, 17)]
            │   │                   placeHolders (str)              : プレイスホルダー
            │   │               """
            │   │               # オーバーロード
            │   │               super().__init__(tableName)
            │   │               # プレイスホルダーをSQLによって変える
            │   │               placeHolders = placeHolders.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # クエリ
            │   │               self.__query = f"INSERT INTO {self.tableName} "\
            │   │                            + f"({columns}) VALUES ({placeHolders});"
            │   │               # 値
            │   │               self.__data = data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def data(self):
            │   │               """値"""
            │   │               return self.__data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().executeAny(self.__query, self.__data)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── UpdateRecord.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base   # 基底クラス
            │   │       from ...common import public # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class UpdateRecord(Base):
            │   │           """
            │   │           レコード更新クラス
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │               ):
            │   │               """
            │   │               レコード更新の初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__columns = columns # カラム
            │   │               self.__values  = values  # 値
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def where(self, **conditionsColumn):
            │   │               """
            │   │               指定したレコードを更新するメソッド
            │   │               Args:
            │   │                   **conditionsColumn (str) : 更新したい条件カラムを指定
            │   │               Examples:
            │   │                   user = User.updateRecord(name = "a", age = 20)
            │   │                   user.where(id = 1) ※複数条件は指定できない
            │   │                   user.execute()
            │   │                   user.commit()
            │   │               Returns:
            │   │                   Where : 条件指定クラスを返す
            │   │               """
            │   │               conditions = ""
            │   │               for key, value in conditionsColumn.items():
            │   │                   conditions    += f"{key} = ?"
            │   │                   self.__values += tuple(str(value))
            │   │               return Where(
            │   │                   tableName    = self.tableName, # テーブル名
            │   │                   columns      = self.__columns, # カラム
            │   │                   values       = self.__values,  # 値
            │   │                   conditions   = conditions,     # 条件カラム
            │   │               )
            │   │       #-------------------------------------------------------------------------------
            │   │       class Where(Base):
            │   │           """
            │   │           条件クラス(UpdateRecord用)
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName    : str,
            │   │                   columns      : str,
            │   │                   values       : tuple,
            │   │                   conditions   : str,
            │   │               ) -> None:
            │   │               """
            │   │               条件クラスの初期化
            │   │               Args:
            │   │                   tableName  (str)   : テーブル名
            │   │                   columns    (str)   : 更新するカラム
            │   │                   values     (tuple) : 値
            │   │                   conditions (str)   : 条件のカラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"UPDATE {tableName} SET {columns} WHERE {conditions};"
            │   │               # プレイスホルダーをSQLによって変更
            │   │               self.__query = self.__query.replace(
            │   │                   "?", self.sqlEngine.PLACEHOLDER
            │   │               )
            │   │               # 値
            │   │               self.__values = values
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__values
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               return super().execute(self.__query, self.__values)
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── UpdateRecords.py
            │   │       ↓ 内容（最大10000行）
            │   │
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base          # 基底クラス
            │   │       from ...common import public        # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class UpdateRecords(Base):
            │   │           """
            │   │           複数レコード更新クラス
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   data      : list[tuple[str]]
            │   │               ):
            │   │               """
            │   │               複数レコード更新の初期化
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__columns   = columns
            │   │               self.__data      = data
            │   │           #---------------------------------------------------------------------------
            │   │           @ public
            │   │           def where(self, **conditionsColumn):
            │   │               """
            │   │               指定したレコードを更新するメソッド
            │   │               Args:
            │   │                   **conditionsColumns : 更新したい条件カラムを指定する
            │   │               Examples:
            │   │                   user = User.updateRecords(
            │   │                       name = ["a","b","c"], age = [20,22,24]
            │   │                   ).where(id = [1,2,3]) ※whereも忘れずに
            │   │                   user.execute()
            │   │                   user.commit()
            │   │               Returns:
            │   │                   Where : 条件指定クラスを返す
            │   │               """
            │   │               conditions = "" # 条件文
            │   │               datas      = [] # 値のリスト(最終的にタプルにする)
            │   │               # 成型
            │   │               for key, values in conditionsColumn.items():
            │   │                   conditions += f"{key} = ?"
            │   │                   # プレイスホルダーで使用できるようにする
            │   │                   for i in range(len(values)):
            │   │                       data = list(self.__data[i]) # appendできるようにリスト型に変更
            │   │                       data.append(values[i])      # プレイスホルダーで使用できるように
            │   │                                                   # 末尾にデータを足す
            │   │                       datas.append(tuple(data))   # タプル型に変更し、リストに加える
            │   │               print(datas)
            │   │               return Where(
            │   │                   tableName  = self.tableName, # テーブル名
            │   │                   columns    = self.__columns, # カラム
            │   │                   data       = datas,          # 値
            │   │                   conditions = conditions,     # 条件
            │   │               )
            │   │       #-------------------------------------------------------------------------------
            │   │       class Where(Base):
            │   │           """
            │   │           条件クラス(UpdateRecords用)
            │   │           """
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName  : str,
            │   │                   columns    : str,
            │   │                   data       : list[tuple[str]],
            │   │                   conditions : str,
            │   │
            │   │               ) -> None:
            │   │               """
            │   │               条件クラスの初期化
            │   │               Args:
            │   │                   tableName  (str)              : テーブル名
            │   │                   columns    (str)              : 更新するカラム
            │   │                   values     (list[tuple[str]]) : 値
            │   │                   conditions (str)              : 条件のカラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               # クエリ
            │   │               self.__query = f"UPDATE {tableName} SET {columns}" \
            │   │                            + f"WHERE {conditions};"
            │   │               # プレイスホルダーをSQLによって置き換える
            │   │               self.__query = self.__query.replace("?", self.sqlEngine.PLACEHOLDER)
            │   │               # 値
            │   │               self.__data = data
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           @property
            │   │           def values(self):
            │   │               """値"""
            │   │               return self.__data
            │   │           #---------------------------------------------------------------------------
            │   │           def execute(self):
            │   │               return super().executeAny(self.__query, self.__data)
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .AsyncDeleteRecord     import AsyncDeleteRecord
            │   │       from .AsyncInsertRecord     import AsyncInsertRecord
            │   │       from .AsyncInsertRecords    import AsyncInsertRecords
            │   │       from .AsyncUpdateRecord     import AsyncUpdateRecord
            │   │       from .AsyncUpdateRecords    import AsyncUpdateRecords
            │   │       from .DeleteRecord          import DeleteRecord
            │   │       from .InsertRecord          import InsertRecord
            │   │       from .InsertRecords         import InsertRecords
            │   │       from .UpdateRecord          import UpdateRecord
            │   │       from .UpdateRecords         import UpdateRecords
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "AsyncDeleteRecord",
            │   │           "AsyncInsertRecord",
            │   │           "AsyncInsertRecords",
            │   │           "AsyncUpdateRecord",
            │   │           "AsyncUpdateRecords",
            │   │           "DeleteRecord",
            │   │           "InsertRecord",
            │   │           "InsertRecords",
            │   │           "UpdateRecord",
            │   │           "UpdateRecords"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── [select]
            │   │   ├── GroupBy.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base import Base
            │   │       #-------------------------------------------------------------------------------
            │   │       class GroupBy(Base):
            │   │           """
            │   │               SQLのGROUP BY構文を構築・実行するクラス
            │   │               Parameters:
            │   │                   tableName (str) : 対象のテーブル名
            │   │                   columns   (str) : 取得するカラム（例: "name, COUNT(*)"）
            │   │                   condition (str) : WHERE句で使用する条件（空文字で無条件）
            │   │                   byColumn  (str) : GROUP BYでグループ化する列名
            │   │               Attributes:
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : SELECT対象のカラム
            │   │                   condition (str) : 条件式（※綴りミスがあるため注意）
            │   │                   byColumn  (str) : GROUP BYの対象列
            │   │           """
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   condition : str,
            │   │                   byColumn  : str
            │   │               ):
            │   │               super().__init__(tableName)
            │   │               self.tableName = tableName
            │   │               self.columns   = columns
            │   │               self.condition = condition
            │   │               self.byColumn  = byColumn
            │   │           #---------------------------------------------------------------------------
            │   │           def getRecord(self):
            │   │               """
            │   │                   GROUP BY構文を用いてレコードを取得する
            │   │                   Returns:
            │   │                       List[Tuple] : グループ化されたクエリの結果一覧
            │   │                   Raises:
            │   │                       DatabaseConnectionError : 実行時にDB接続エラーが発生した場合
            │   │               """
            │   │               # 基本となるクエリ
            │   │               query = f"SELECT {self.columns} FROM {self.tableName} "
            │   │               # 条件が存在するなら
            │   │               if self.condition == "":
            │   │                   query += f"GROUP BY {self.byColumn};"
            │   │               # 条件が存在しないなら
            │   │               else:
            │   │                   query += f"WHERE {self.condition} GROUP BY {self.byColumn};"
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           def having(self, aggregate):
            │   │               """
            │   │                   GROUP BY + HAVING構文を用いて集計条件付きレコードを取得する
            │   │                   Parameters:
            │   │                       aggregate (Column) : HAVING句で使用する集計関数付きカラム
            │   │                                            例: Column("COUNT(*) > 1")
            │   │                   Returns:
            │   │                       List[Tuple] : HAVING句適用後のクエリ結果一覧
            │   │                   Raises:
            │   │                       DatabaseConnectionError : 実行時にDB接続エラーが発生した場合
            │   │               """
            │   │               # 基本となるクエリ
            │   │               query = f"SELECT {self.columns} FROM {self.tableName} "
            │   │               # 条件が存在するなら
            │   │               if self.condition == "":
            │   │                   query += f"GROUP BY {self.byColumn} "
            │   │               # 条件が存在しないなら
            │   │               else:
            │   │                   query += f"WHERE {self.condition} GROUP BY {self.byColumn} "
            │   │               # HAVING句を足す
            │   │               query += f"HAVING {aggregate.columnName};"
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(query)
            │   │               return cur.fetchall()
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── Select.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base        import Base           # ベース
            │   │       from .GroupBy      import GroupBy        # GROUP BY
            │   │       from .Where        import Where          # WHERE
            │   │       from ...column     import Column         # カラムクラス
            │   │       from ...conditions import Condition      # 条件クラス
            │   │       from ...conditions import ConditionGroup # 複数条件クラス
            │   │       from ...common     import public         # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class Select(Base):
            │   │           """SELECTクラス"""
            │   │           #---------------------------------------------------------------------------
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName  : str,
            │   │                   columns    : str,
            │   │               ) -> None:
            │   │               """"
            │   │               SELECTクラスの初期化
            │   │               Args:
            │   │                   tableName (str) : テーブル名
            │   │                   columns   (str) : カラム
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__columns = columns
            │   │               self.__query   = ""
            │   │           #---------------------------------------------------------------------------
            │   │           @property
            │   │           @public
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getRecord(self) -> list:
            │   │               """
            │   │               指定したカラムの全てのレコードを取得する
            │   │               Returns:
            │   │                   List : クエリ結果のレコードリスト
            │   │               """
            │   │               # クエリ
            │   │               self.__query = f"SELECT {self.__columns} FROM {self.tableName};"
            │   │               # クエリから結果を取得する
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getAllRecord(self) -> list:
            │   │               """
            │   │               テーブル内の全カラムの全てのレコードを取得する
            │   │               Returns:
            │   │                   List : クエリ結果のレコードリスト
            │   │               """
            │   │               # クエリ
            │   │               self.__query = f"SELECT * FROM {self.tableName};"
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def where(
            │   │                   self,
            │   │                   *condition : Condition | ConditionGroup
            │   │               )-> Where:
            │   │               """
            │   │               WHERE句
            │   │               Args:
            │   │                   *condition (Condition | ConditionGroup) : 条件
            │   │               Examples:
            │   │                   engine = Engine(...)
            │   │                   engine.launch()
            │   │                   user   = engine.select(User, User.id, User.name)
            │   │                   result = user.where((User.age >= 20) & (User.age <= 29)).fetchall()
            │   │               """
            │   │               placeHolder = self.sqlEngine.PLACEHOLDER
            │   │               parts  = []
            │   │               values = []
            │   │               for cond in condition:
            │   │                   sql, vals = cond.toSql(placeHolder)
            │   │                   parts.append(sql)
            │   │                   values.extend(vals)
            │   │               whereClause = " AND ".join(parts)
            │   │               values = tuple(values)
            │   │               return Where(
            │   │                   tableName = self.tableName,
            │   │                   columns   = self.__columns,
            │   │                   condition = whereClause,
            │   │                   value     = values
            │   │               )
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def orderBy(
            │   │                   self,
            │   │                   asc  : Column | None = None, # 昇順
            │   │                   desc : Column | None = None, # 降順
            │   │               ) -> list:
            │   │               """
            │   │               データを昇順・降順で並び替える
            │   │               Args:
            │   │                   asc  (Column) : 昇順にソートするカラム
            │   │                   desc (Column) : 降順にソートするカラム
            │   │               Returns:
            │   │                   list : 並び替え後のレコードリスト
            │   │               """
            │   │               query = f"SELECT {self.__columns} FROM {self.tableName} "
            │   │               # ASCが未指定かつ, DESCが未指定
            │   │               if asc is None and desc is None:
            │   │                   raise Exception("ascまたはdescのいずれかを指定してください")
            │   │               # ASCが未指定かつ, DESCが指定されている
            │   │               if asc is None and not desc is None:
            │   │                   query += f"ORDER BY {desc.columnName} DESC;"
            │   │                # ASCが指定されている, かつDESCが未指定
            │   │               if not asc is None and desc is None:
            │   │                   query += f"ORDER BY {asc.columnName} ASC;"
            │   │                # ASCが指定されている, かつDESCがされている
            │   │               if not desc is None and not asc is None:
            │   │                   query += f"ORDER BY {asc.columnName} ASC, {desc.columnName} DESC;"
            │   │               cur = self.cursor()
            │   │               cur.execute(query)
            │   │               self.__query = query
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def limitOffset(
            │   │                   self,
            │   │                   limit  : int,
            │   │                   offset : int
            │   │               ) -> list:
            │   │               """
            │   │               LIMITとOFFSETを使ってページネーションされたレコードを取得する
            │   │               Args:
            │   │                   limit  (int) : 最大取得件数
            │   │                   offset (int) : 取得開始位置
            │   │               Returns:
            │   │                   list : クエリ結果の一部
            │   │               """
            │   │               #クエリ
            │   │               query = f"SELECT {self.__columns} " \
            │   │                     + f"FROM {self.tableName} " \
            │   │                     + f"LIMIT {limit} OFFSET {offset}"
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(query)
            │   │               self.__query = query
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def count(self):
            │   │               """
            │   │               レコード件数を取得する
            │   │               Returns:
            │   │                   int : 件数のタプル
            │   │               """
            │   │               # クエリ
            │   │               self.__query = f"SELECT COUNT(*) " \
            │   │                            + f"FROM {self.tableName} "
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getAvg(
            │   │                   self,
            │   │                   column : Column
            │   │               ):
            │   │               """
            │   │               指定列の平均値を取得する
            │   │               Returns:
            │   │                   List[Tuple] : 平均値のタプル (例: [(34.5,)])
            │   │               """
            │   │               self.__query = f"SELECT AVG({column.columnName}) " \
            │   │                            + f"FROM {self.tableName} "
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getSum(
            │   │                   self,
            │   │                   column : Column
            │   │               ):
            │   │               """
            │   │               指定列の合計値を取得する
            │   │               Args:
            │   │                   column (Column) : 対象カラム
            │   │               Returns:
            │   │                   List[Tuple] : 合計値のタプル
            │   │               """
            │   │               self.__query = f"SELECT SUM({column.columnName}) " \
            │   │                            + f"FROM {self.tableName} "
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getMax(
            │   │                   self,
            │   │                   column : Column
            │   │               ):
            │   │               """
            │   │               指定列の最大値を取得する
            │   │               Args:
            │   │                   column (Column) : 対象カラム
            │   │               Returns:
            │   │                   List[Tuple] : 最大値のタプル
            │   │               """
            │   │               self.__query = f"SELECT Max({column.columnName}) " \
            │   │                            + f"FROM {self.tableName} "
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def getMin(
            │   │                   self,
            │   │                   column : Column
            │   │               ):
            │   │               """
            │   │               指定列の最小値を取得する
            │   │               Args:
            │   │                   column (Column) : 対象カラム
            │   │               Returns:
            │   │                   List[Tuple] : 最小値のタプル
            │   │               """
            │   │               self.__query = f"SELECT Min({column.columnName}) " \
            │   │                            + f"FROM {self.tableName} "
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.__query)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def groupBy(
            │   │                   self,
            │   │                   column : Column  # グループ化する列
            │   │               ):
            │   │               """
            │   │               指定列でGROUP BYを実行する
            │   │               Args:
            │   │                   column (Column) : グループ化対象のカラム
            │   │               Returns:
            │   │                   GroupBy : グループ化クエリオブジェクト
            │   │               """
            │   │               return GroupBy(
            │   │                   tableName = self.tableName,
            │   │                   columns   = self.__columns,
            │   │                   condition = "",
            │   │                   byColumn  = column.columnName
            │   │               )
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def whereGroupBy(
            │   │                   self,
            │   │                   condition, # 条件
            │   │                   column : Column  # グループ化する列
            │   │               ):
            │   │               """
            │   │               WHERE + GROUP BY句による条件付きグループ化
            │   │               Args:
            │   │                   condition (str) : WHERE条件式
            │   │                   column    (Column) : グループ化対象のカラム
            │   │               Returns:
            │   │                   GroupBy : グループ化クエリオブジェクト
            │   │               """
            │   │               return GroupBy(
            │   │                   tableName = self.tableName,
            │   │                   columns   = self.__columns,
            │   │                   condition = condition,
            │   │                   byColumn  = column.columnName
            │   │               )
            │   │       #-------------------------------------------------------------------------------
            │   │   ├── Where.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from ..Base    import Base # 基底クラス
            │   │       from ...common import public    # パブリックメソッド
            │   │       #-------------------------------------------------------------------------------
            │   │       class Where(Base):
            │   │           """WHEREクラス"""
            │   │           def __init__(
            │   │                   self,
            │   │                   tableName : str,
            │   │                   columns   : str,
            │   │                   condition : str,
            │   │                   value     : tuple
            │   │               ):
            │   │               """
            │   │               WHEREクラスの初期化
            │   │                   tableName (str)   : テーブル名
            │   │                   columns   (str)   : カラム
            │   │                   condition (str)   : 条件
            │   │                   value     (tuple) : 値
            │   │               """
            │   │               super().__init__(tableName)
            │   │               self.__query = f"SELECT {columns} " \
            │   │                            + f"FROM {self.tableName} WHERE {condition};"
            │   │               self.__value = value
            │   │           #---------------------------------------------------------------------------
            │   │           @property
            │   │           @public
            │   │           def query(self):
            │   │               """クエリ"""
            │   │               return self.__query
            │   │           #---------------------------------------------------------------------------
            │   │           @property
            │   │           @public
            │   │           def value(self):
            │   │               """値"""
            │   │               return self.__value
            │   │           #---------------------------------------------------------------------------
            │   │           def inSubQuery(self, subQuery):
            │   │               query  = self.__query[:-1]
            │   │               sQuery = subQuery[:-1]
            │   │               query += f" IN ({sQuery});"
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(query, self.__value)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def fetchall(self):
            │   │               """
            │   │
            │   │               """
            │   │               cur = self.sqlEngine.cursor()
            │   │               cur.execute(self.query, self.__value)
            │   │               return cur.fetchall()
            │   │           #---------------------------------------------------------------------------
            │   │           @public
            │   │           def execute(self):
            │   │               return super().execute(self.query, self.__value)
            │   │       #-------------------------------------------------------------------------------
            │   │   └── __init__.py
            │   │       ↓ 内容（最大10000行）
            │   │       #-------------------------------------------------------------------------------
            │   │       from .GroupBy import GroupBy
            │   │       from .Select  import Select
            │   │       from .Where   import Where
            │   │       #-------------------------------------------------------------------------------
            │   │       __all__ = [
            │   │           "GroupBy",
            │   │           "Select",
            │   │           "Where"
            │   │       ]
            │   │       #-------------------------------------------------------------------------------
            │   ├── AsyncBase.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common import public  # パブリックメソッド
            │       from ..config import Config  # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class AsyncBase:
            │           """
            │           データベース操作マネージャークラスにおける基底クラス
            │           """
            │           def __init__(self, tableName : str):
            │               """初期化"""
            │               self.tableName = tableName
            │           #---------------------------------------------------------------------------
            │           @property
            │           @public
            │           def sqlEngine(self):
            │               """sqlエンジンの設定"""
            │               engine = Config.asyncSqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def connect(self):
            │               """コネクト"""
            │               await self.sqlEngine.connect()
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def cursor(self):
            │               """カーソル"""
            │               return await self.sqlEngine.cursor()
            │
            │           # #---------------------------------------------------------------------------
            │           @public
            │           async def execute(self, query : str, value : tuple = ()):
            │               """クエリの実行"""
            │               await self.sqlEngine.execute(query, value)
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def executeAny(self, query : str, data : list[tuple[str]]):
            │               """複数クエリの実行"""
            │               await self.sqlEngine.executeAny(query, data)
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def commit(self):
            │               """データベースにコミットする"""
            │               await self.sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def transaction(self):
            │               """トランザクション"""
            │               await self.sqlEngine.transaction()
            │           #---------------------------------------------------------------------------
            │           @public
            │           async def rollback(self):
            │               """ロールバック"""
            │               await self.sqlEngine.rollback()
            │           #---------------------------------------------------------------------------
            │           @public
            │           @property
            │           def query(self) -> str:...
            │       #-------------------------------------------------------------------------------
            │   ├── Base.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..common import public  # パブリックメソッド
            │       from ..config import Config  # コンフィグクラス
            │       #-------------------------------------------------------------------------------
            │       class Base:
            │           """
            │           データベース操作マネージャークラスにおける基底クラス
            │           """
            │           def __init__(self, tableName : str):
            │               """初期化"""
            │               self.tableName = tableName
            │           #---------------------------------------------------------------------------
            │           @property
            │           @public
            │           def sqlEngine(self):
            │               """sqlエンジンの設定"""
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           @public
            │           def connect(self):
            │               """コネクト"""
            │               self.sqlEngine.connect()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def cursor(self):
            │               """カーソル"""
            │               return self.sqlEngine.cursor()
            │
            │           # #---------------------------------------------------------------------------
            │           @public
            │           def execute(self, query : str, value : tuple = ()):
            │               """クエリの実行"""
            │               self.sqlEngine.execute(query, value)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def executeAny(self, query : str, data : list[tuple[str]]):
            │               """複数クエリの実行"""
            │               self.sqlEngine.executeAny(query, data)
            │           #---------------------------------------------------------------------------
            │           @public
            │           def commit(self):
            │               """データベースにコミットする"""
            │               self.sqlEngine.commit()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def transaction(self):
            │               """トランザクション"""
            │               self.sqlEngine.transaction()
            │           #---------------------------------------------------------------------------
            │           @public
            │           def rollback(self):
            │               """ロールバック"""
            │               self.sqlEngine.rollback()
            │           #---------------------------------------------------------------------------
            │           @public
            │           @property
            │           def query(self) -> str:...
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Base          import Base
            │       from .AsyncBase     import AsyncBase
            │       from .alter         import AlterTableAddColumn
            │       from .alter         import AlterTableAddConstraint
            │       from .alter         import AlterTableDropColumn
            │       from .alter         import AlterTableDropConstraint
            │       from .alter         import AlterTableRenameColumn
            │       from .alter         import AlterTableRenameTable
            │       from .alter         import AlterView
            │       from .alter         import AsyncAlterTableAddColumn
            │       from .alter         import AsyncAlterTableAddConstraint
            │       from .alter         import AsyncAlterTableDropColumn
            │       from .alter         import AsyncAlterTableDropConstraint
            │       from .alter         import AsyncAlterTableAddConstraint
            │       from .alter         import AsyncAlterTableRenameColumn
            │       from .alter         import AsyncAlterView
            │       from .create        import AsyncCreateIndex
            │       from .create        import AsyncCreateTable
            │       from .create        import AsyncCreateTableIfNotExists
            │       from .create        import AsyncCreateTrigger
            │       from .create        import AsyncCreateView
            │       from .create        import CreateIndex
            │       from .create        import CreateTable
            │       from .create        import CreateTableIfNotExists
            │       from .create        import CreateTrigger
            │       from .create        import CreateView
            │       from .drop          import AsyncDropIndex
            │       from .drop          import AsyncDropIndexIfExists
            │       from .drop          import AsyncDropTable
            │       from .drop          import AsyncDropTableIfExists
            │       from .drop          import AsyncDropTrigger
            │       from .drop          import AsyncDropTriggerIfNotExists
            │       from .drop          import AsyncDropView
            │       from .drop          import AsyncDropViewIfExists
            │       from .drop          import DropIndex
            │       from .drop          import DropIndexIfExists
            │       from .drop          import DropTable
            │       from .drop          import DropTableIfExists
            │       from .drop          import DropTrigger
            │       from .drop          import DropTriggerIfNotExists
            │       from .drop          import DropView
            │       from .drop          import DropViewIfExists
            │       from .record        import AsyncDeleteRecord
            │       from .record        import AsyncInsertRecord
            │       from .record        import AsyncInsertRecords
            │       from .record        import AsyncUpdateRecord
            │       from .record        import AsyncUpdateRecords
            │       from .record        import DeleteRecord
            │       from .record        import InsertRecord
            │       from .record        import InsertRecords
            │       from .record        import UpdateRecord
            │       from .record        import UpdateRecords
            │       from .select        import GroupBy
            │       from .select        import Where
            │       from .select        import Select
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Base",
            │           "AsyncBase",
            │           "AlterTableAddColumn",
            │           "AlterTableAddConstraint",
            │           "AlterTableDropColumn",
            │           "AlterTableDropConstraint",
            │           "AlterTableRenameColumn",
            │           "AlterTableRenameTable",
            │           "AlterView",
            │           "AsyncAlterTableAddColumn",
            │           "AsyncAlterTableAddConstraint",
            │           "AsyncAlterTableDropColumn",
            │           "AsyncAlterTableDropConstraint",
            │           "AsyncAlterTableRenameColumn",
            │           "AsyncAlterView",
            │           "AsyncCreateIndex",
            │           "AsyncCreateTable",
            │           "AsyncCreateTableIfNotExists",
            │           "AsyncCreateTrigger",
            │           "AsyncCreateView",
            │           "CreateIndex",
            │           "CreateTable",
            │           "CreateTableIfNotExists",
            │           "CreateTrigger",
            │           "CreateView",
            │           "AsyncDropIndex",
            │           "AsyncDropIndexIfExists",
            │           "AsyncDropTable",
            │           "AsyncDropTableIfExists",
            │           "AsyncDropTrigger",
            │           "AsyncDropTriggerIfNotExists",
            │           "AsyncDropView",
            │           "AsyncDropViewIfExists",
            │           "DropIndex",
            │           "DropIndexIfExists",
            │           "DropTable",
            │           "DropTableIfExists",
            │           "DropTrigger",
            │           "DropTriggerIfNotExists",
            │           "DropView",
            │           "DropViewIfExists",
            │           "AsyncDeleteRecord",
            │           "AsyncInsertRecord",
            │           "AsyncInsertRecords",
            │           "AsyncUpdateRecord",
            │           "AsyncUpdateRecords",
            │           "DeleteRecord",
            │           "InsertRecord",
            │           "InsertRecords",
            │           "UpdateRecord",
            │           "UpdateRecords",
            │           "GroupBy",
            │           "Where",
            │           "Select"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [migration]
            │   ├── Migration.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       import os
            │       import sys
            │       import importlib.util
            │       from datetime import datetime
            │       from ..engine import MySqlEngine
            │       from ..engine import Sqlite3Engine
            │       from ..model import Model
            │       from ..common import public
            │       from ..common import private
            │       from ..column import Column
            │       from ..constraints import Unique
            │       from ..datatypes import Integer
            │       from ..datatypes import Text
            │       from ..config import Config
            │       #-------------------------------------------------------------------------------
            │       class Migration:
            │           def __init__(
            │                   self,
            │                   migrationsDir : str
            │               ) -> None:
            │               """
            │               マイグレーションクラスの初期化
            │               Args:
            │                   migrationsDir (str) : マイグレーションディレクトリのパス
            │               """
            │               super().__init__()
            │               self.__migrationsDir = migrationsDir
            │               os.makedirs(migrationsDir, exist_ok = True)
            │               self.__sqlEngine.execute(self.__buildCreateTableSql())
            │               self.__sqlEngine.commit()
            │               print("初期化完了")
            │           #---------------------------------------------------------------------------
            │           @private
            │           def __buildCreateTableSql(self):
            │               query = "CREATE TABLE IF NOT EXISTS migration (" \
            │                   + "id INTEGER PRIMARY KEY auto_increment, " \
            │                   + "name text, applied_at TEXT)"
            │               # MySQLの場合
            │               if isinstance(self.__sqlEngine,MySqlEngine):
            │                   query = query.replace(
            │                       "auto_increment", "AUTO_INCREMENT"
            │                   )
            │                   query = query.replace(
            │                       "text", "VARCHAR(255) UNIQUE"
            │                   )
            │               # SQLite3の場合
            │               elif isinstance(self.__sqlEngine,Sqlite3Engine):
            │                   query = query.replace(
            │                       "auto_increment", "AUTOINCREMENT"
            │                   )
            │                   query = query.replace(
            │                       "text", "TEXT"
            │                   )
            │               else:
            │                   raise Exception("エンジンが未設定です")
            │               return query
            │           #---------------------------------------------------------------------------
            │           @property
            │           @private
            │           def __sqlEngine(self):
            │               """
            │               sqlエンジンの設定
            │               """
            │               engine = Config.sqlEngine
            │               if engine is None:
            │                   raise Exception("エンジンが未設定です")
            │               return engine
            │           #---------------------------------------------------------------------------
            │           def make(self, name : str) -> None:
            │               """
            │               新しいマイグレーションファイルを作成する
            │               Args:
            │                   name (str) : マイグレーション名
            │               """
            │               timeStamp = datetime.now().strftime("%Y%m%d%H%M%S")
            │               fileName  = f"{timeStamp}_{name.replace('', '_')}.py"
            │               filePath  = os.path.join(self.__migrationsDir, fileName)
            │               templete = f"""\
            │       def upgrade(engine):
            │           # ここにスキーマ変更SQLを記述
            │           pass
            │       def downgrade(engine):
            │           # 元に戻すSQLを記述
            │           pass
            │       """
            │               with open(filePath, "w", encoding = "utf-8") as f:
            │                   f.write(templete)
            │               print(f"{filePath}を作成しました")
            │           #---------------------------------------------------------------------------
            │           def history(self) -> list:
            │               """
            │               適用済みのマイグレーション一覧を返す
            │               Returns:
            │                   list[str] : ファイル名のリスト
            │               """
            │               cur = self.__sqlEngine.cursor()
            │               cur.execute("SELECT name FROM migration ORDER BY id")
            │               rows = cur.fetchall()
            │               return []
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Migration import Migration
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Migration"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── [model]
            │   ├── AsyncModel.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .ModelMeta    import ModelMeta
            │       from ..column      import Column
            │       from ..common      import private
            │       from ..common      import public
            │       from ..constraints import Constraints
            │       from ..manager     import Base
            │       from ..manager     import AsyncAlterTableAddColumn
            │       from ..manager     import AsyncAlterTableAddConstraint
            │       from ..manager     import AsyncAlterTableDropColumn
            │       from ..manager     import AsyncAlterTableDropConstraint
            │       from ..manager     import AsyncAlterTableRenameColumn
            │       from ..manager     import AsyncCreateIndex
            │       from ..manager     import AsyncCreateTable
            │       from ..manager     import AsyncCreateTableIfNotExists
            │       from ..manager     import AsyncCreateTrigger
            │       from ..manager     import AsyncCreateView
            │       from ..manager     import AsyncInsertRecord
            │       from ..manager     import AsyncInsertRecords
            │       from ..manager     import AsyncUpdateRecord
            │       from ..manager     import AsyncUpdateRecords
            │       from ..manager     import AsyncDeleteRecord
            │       from ..manager     import AsyncDropIndex
            │       from ..manager     import AsyncDropIndexIfExists
            │       from ..manager     import AsyncDropTable
            │       from ..manager     import AsyncDropTableIfExists
            │       from ..manager     import AsyncDropTrigger
            │       from ..manager     import AsyncDropTriggerIfNotExists
            │       from ..manager     import AsyncDropView
            │       from ..manager     import AsyncDropViewIfExists
            │       from ..manager     import Select
            │       #-------------------------------------------------------------------------------
            │       class Model(metaclass = ModelMeta):
            │           """
            │           モデルクラスの基底クラス。
            │
            │           Attributes:
            │               tableName (str)                     : テーブル名（クラス名から自動取得）
            │               columns   (list[dict[str, Column]]) : カラム定義のリスト
            │           """
            │
            │           tableName : str                     # テーブル名
            │           columns   : list[dict[str, Column]] # カラム
            │           #---------------------------------------------------------------------------
            │           # プライベートメソッド
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __parameterColumnsToStrings(cls, columns :tuple[Column, ...]) -> str:
            │               cols = ""
            │               for col in columns:
            │                   cols += col.columnName + ", "
            │               return cols[:-2]
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __columnsToQuery(cls):
            │               """
            │               カラムをSQL文にする
            │               テーブル作成時に使用する
            │               """
            │               cls.__foreignKeyList = [] # 外部キー定義リスト
            │               columnDefineLists    = [] # 各カラム定義
            │               # 各カラム定義をリストに追加
            │               for cols in cls.columns:
            │                   columnSql = cls.__columnsToSql(cols)
            │                   columnDefineLists.append(columnSql)
            │               # 外部キーがある場合、末尾に追加
            │               for fk in cls.__foreignKeyList:
            │                   columnDefineLists.append(fk)
            │               return ", ".join(columnDefineLists)
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __columnsToSql(
            │                   cls,
            │                   columns : dict[str, Column]
            │               ) -> str:
            │               """
            │               カラムをSQL文にする
            │               columnsToQueryでのみ使用するプライベートメソッド
            │               Args:
            │                   columns (dict[str, Column]) : カラム
            │               Returns:
            │                   Create文で使用するSQL文を返す
            │               """
            │               columnName, columnObject = next(iter(columns.items()))
            │               parts = []
            │               parts.append(columnName)
            │               # データ型
            │               if columnObject.dataTypeSql:
            │                   parts.append(columnObject.dataTypeSql)
            │               # 主キー
            │               if columnObject.primaryKeySql:
            │                   parts.append(columnObject.primaryKeySql)
            │               # デフォルト値
            │               if columnObject.defaultSql:
            │                   parts.append(columnObject.defaultSql)
            │               # ユニーク設定
            │               if columnObject.uniqueSql:
            │                   parts.append(columnObject.uniqueSql)
            │               # NotNull制約
            │               if columnObject.notNullSql:
            │                   parts.append(columnObject.notNullSql)
            │               # 外部キー制約
            │               # 定義ある場合は別途保管
            │               fk = cls.__foreignKeyToSql(columnName, columnObject)
            │               if fk:
            │                   cls.__foreignKeyList.append(fk)
            │               return " ".join(parts)
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __foreignKeyToSql(
            │                   cls,
            │                   columnName : str,
            │                   columnObject : Column
            │               ) -> str:
            │               """
            │               外部キー制約の設定をSQL文として出力するプライベートメソッド
            │               Args:
            │                   columnName   (str) : カラム名
            │                   cokumnObject (str) : カラムオブジェクト
            │               Returns:
            │                   fk : SQL文
            │               """
            │               fk = columnObject.foreignKeySql
            │               # リプレイスする
            │               if fk: fk = fk.replace("~~~", columnName)
            │               else:  fk = ""
            │               return fk
            │           #---------------------------------------------------------------------------
            │           # パブリックメソッド
            │           #---------------------------------------------------------------------------
            │           # CREATE系
            │           @classmethod
            │           @public
            │           async def createTable(cls) -> AsyncCreateTable:
            │               """
            │               テーブルを作成する
            │               Returns:
            │                   CreateTable : テーブル作成クラス
            │               """
            │               columns = cls.__columnsToQuery()
            │               return AsyncCreateTable(
            │                   tableName = cls.__name__, # テーブル名
            │                   columns   = columns       # テーブル作成用カラム
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def createTableIfNotExists(cls) -> AsyncCreateTableIfNotExists:
            │               """
            │               テーブルが存在しない場合に作成する
            │               Returns:
            │                   CreateTableIfNotExists : テーブル作成クラス
            │               """
            │               columns = cls.__columnsToQuery()
            │               return AsyncCreateTableIfNotExists(
            │                   tableName = cls.__name__, # テーブル名
            │                   columns   = columns       # テーブル作成用カラム
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def createIndex(
            │                   cls,
            │                   indexName : str,
            │                   *columns  : Column
            │               ) -> AsyncCreateIndex:
            │               """
            │               インデックスを作成する
            │               Args:
            │                   indexName (str)    : 作成するインデックス名
            │                   *columns  (Column) : 対象とするカラム
            │               Returns:
            │                   CreateIndex: インデックス作成処理オブジェクト
            │               Examples:
            │                   ↓ インスタンスの作成
            │                   user = User.createIndex("indexName", User.id, User.name)
            │                   ↓ 実行とコミット
            │                   user.execute()
            │                   user.commit()
            │               """
            │               # カラムを文字列に変更する
            │               cols = cls.__parameterColumnsToStrings(columns)
            │               return AsyncCreateIndex(
            │                   indexName = indexName,
            │                   tableName = cls.__name__,
            │                   columns   = cols
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def createView(cls): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def createTrigger(
            │                   cls,
            │                   triggerName : str,
            │                   timing      : str,
            │                   event       : str,
            │                   body        : Base
            │               ):
            │               """
            │               トリガーの作成
            │               Args:
            │                   triggerName (str) : トリガー名
            │                   timing      (str) : タイミング BEFORE AFTER
            │                   event       (str) : イベント  INSERT UPDATE DELETE
            │                   body        (str) : 実行するSQL文
            │               Examples:
            │                   trigger = User.createTrigger(
            │                       "tableName",
            │                       "triggerName",
            │                       "before | after",
            │                       "inser | update | delete",
            │                       User.InsertRecord(~~~)      <-実行したいものを入れる
            │                   )
            │                   trigger.execute()
            │                   trigger.commit()
            │               """
            │               return AsyncCreateTrigger(
            │                   tableName   = cls.__name__, # テーブル名
            │                   triggerName = triggerName,  # トリガー名
            │                   timing      = timing,       # イベントタイミング
            │                   event       = event,        # イベント
            │                   body        = body.query    # 実行するSQL
            │               )
            │           #---------------------------------------------------------------------------
            │           # DROP系
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropTable(cls) -> AsyncDropTable:
            │               """
            │               テーブルを削除する
            │               Example:
            │                   user = User.dropTable()
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTable : テーブル削除クラス
            │               """
            │               return AsyncDropTable(
            │                   tableName = cls.__name__
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropTableIfExists(cls) -> AsyncDropTableIfExists:
            │               """
            │               テーブルが存在する場合のみ削除する
            │               Example:
            │                   user = User.dropTableIfExists()
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTableIfExists : テーブル削除クラス
            │               """
            │               return AsyncDropTableIfExists(
            │                   tableName = cls.__name__
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropView(cls, viewName : str) -> AsyncDropView:
            │               """
            │               ビューの削除
            │               Args:
            │                   viewName (str) : 削除するビュー名
            │               Example:
            │                   user = User.dropView("view")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropView : ビュー削除クラス
            │               """
            │               return AsyncDropView(
            │                   tableName = cls.__name__,
            │                   viewName  = viewName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropViewIfExist(cls, viewName : str) -> AsyncDropViewIfExists:
            │               """
            │               ビューが存在する場合削除する
            │               Args:
            │                   viewName (str) : 削除するビュー名
            │               Example:
            │                   user = User.dropView("view")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropViewIfExists : ビュー削除クラス
            │               """
            │               return AsyncDropViewIfExists(
            │                   tableName = cls.__name__,
            │                   viewName  = viewName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropIndex(cls, indexName : str) -> AsyncDropIndex:
            │               """
            │               インデックス削除
            │               Args:
            │                   indexName (str) : インデックス名
            │               Example:
            │                   user = User.dropIndex("index")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropIndex : インデックス削除クラス
            │               """
            │               return AsyncDropIndex(
            │                   tableName = cls.__name__,
            │                   indexName = indexName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropIndexIfNotExists(
            │                   cls,
            │                   indexName : str
            │               ) -> AsyncDropIndexIfExists:
            │               """
            │               インデックス削除
            │               Args:
            │                   indexName (str) : インデックス名
            │               Example:
            │                   user = User.dropIndexIfExists("index")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropIndexIfExists : インデックス削除クラス
            │               """
            │               return AsyncDropIndexIfExists(
            │                   tableName = cls.__name__,
            │                   indexName = indexName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropTrigger(cls, triggerName : str) -> AsyncDropTrigger:
            │               """
            │               トリガーの削除
            │               Args:
            │                   triggerName (str) : トリガー名
            │               Examples:
            │                   user = User.dropTrigger("trigger")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTrigger : トリガー削除オブジェクト
            │               """
            │               return AsyncDropTrigger(
            │                   tableName   = cls.__name__,
            │                   triggerName = triggerName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def dropTriggerIfNotExists(
            │                   cls,
            │                   triggerName : str
            │               ) -> AsyncDropTriggerIfNotExists:
            │               """
            │               トリガーの削除
            │               Args:
            │                   triggerName (str) : トリガー名
            │               Examples:
            │                   user = User.dropTriggerIfNotExists("trigger")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTriggerIfNotExists : トリガー削除オブジェクト
            │               """
            │               return AsyncDropTriggerIfNotExists(
            │                   tableName   = cls.__name__,
            │                   triggerName = triggerName
            │               )
            │           #---------------------------------------------------------------------------
            │           # INSERT/UPDATE/DELETE
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def insertRecord(cls, **columns) -> AsyncInsertRecord:
            │               """
            │               レコードを挿入
            │               Args:
            │                   **columns : 例: id = 1, name = "name", age = 19...
            │               Examples:
            │                   user = User.insertRecord(id = 1, name = "name", age = 19)
            │                   user.execute()
            │                   user.commit()
            │
            │                   Userテーブルにidが1, nameが"name", ageが19が挿入される
            │               Returns:
            │                   InsertRecord : レコード挿入クラスを返す
            │               """
            │               cols         = "" # カラム
            │               placeHolders = "" # プレイスホルダー
            │               values       = [] # 値
            │               # id = 1, name = "name", age = 19...の形に成形
            │               # 値をストックに格納
            │               # カラム数に応じて, プレイスホルダー数を決定
            │               for key, value in columns.items():
            │                   cols         += f"{key}, "
            │                   placeHolders += "?, "
            │                   values.append(value)
            │               return AsyncInsertRecord(
            │                   tableName    = cls.__name__,     # テーブル名
            │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
            │                   values       = tuple(values),    # 値はタプルで渡す
            │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
            │               )
            │
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def insertRecords(cls, **columns) -> AsyncInsertRecords:
            │               """
            │               レコードを複数挿入
            │               Args:
            │                   **columns : 例: id   = [1,   2,   3  ],
            │                                   name = ["a", "b", "c"],
            │                                   age  = [19,  22,  17 ]
            │               Examples:
            │                   user = User.insertRecord(
            │                       id = [1, 2, 3], name = ["a", "b", "c"], age = [19, 22, 17]
            │                   )
            │                   user.execute()
            │                   user.commit()
            │
            │                   ↓Userテーブルに
            │                   |id|name|user|
            │                   |1 |a   |19  |
            │                   |2 |b   |22  |
            │                   |3 |c   |17  | と複数レコードが挿入される
            │               Returns:
            │                   InsertRecord : レコード複数挿入クラスを返す
            │               """
            │               cols         = "" # カラム
            │               placeHolders = "" # プレイスホルダー
            │               for key, values in columns.items(): # valuesは使わない
            │                   cols         += f"{key}, "
            │                   placeHolders += "?, "
            │               return AsyncInsertRecords(
            │                   tableName    = cls.__name__,     # テーブル名
            │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
            │                   data         = list(
            │                       zip(*columns.values())       # 値はリストで渡す
            │                   ),
            │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def updateRecord(cls, **updateColumns) -> AsyncUpdateRecord:
            │               """
            │               レコードを更新
            │               Args:
            │                   **updateColumns : 更新したいカラムを指定する
            │               Examples:
            │                   user = User.updateRecord(name = "a", age = 20)
            │                   user.where(id = 1)
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   UpdateRecord : レコード更新クラスを返す
            │               """
            │               cols   = "" # カラム
            │               values = [] # 値(リスト型)
            │               # id = ?, name = ?, age = ? の形に成型
            │               for key, value in updateColumns.items():
            │                   cols += f"{key} = ?, "
            │                   values.append(value)
            │               return AsyncUpdateRecord(
            │                   tableName    = cls.__name__,    # テーブル名
            │                   columns      = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
            │                   values       = tuple(values),   # タプルで渡す
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def updateRecords(cls, **updateColumns) -> AsyncUpdateRecords:
            │               """
            │               レコードを更新
            │               Args:
            │                   **updateColumns : 更新したいカラムを指定する
            │               Examples:
            │                   user = User.updateRecords(
            │                       name = ["a","b","c"], age = [20,22,24]
            │                   ).where(id = [1,2,3]) ※whereも忘れずに
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   UpdateRecords : 複数レコード更新クラスを返す
            │               """
            │               cols = "" # カラム
            │               for key, value in updateColumns.items(): # valueは使わない
            │                   cols += f"{key} = ?, "
            │               return AsyncUpdateRecords(
            │                   tableName = cls.__name__,    # テーブル名
            │                   columns   = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
            │                   data      = list(zip(*updateColumns.values()))
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           async def deleteRecord(cls, **deleteColumns) -> AsyncDeleteRecord:
            │               """
            │               レコードを削除
            │               Args:
            │                   **deleteColumns : 削除したいカラムを指定する
            │               Examples:
            │                   user = User.deleteRecord(id = 1) ※複数指定不可
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DeleteRecord : レコード削除クラスを返す
            │               """
            │               cols    = "" # カラム
            │               values = [] # 値(リスト型)
            │               # id = ? の形に成型
            │               for key, value in deleteColumns.items():
            │                   cols += f"{key} = ?, "
            │                   values.append(value)
            │               return AsyncDeleteRecord(
            │                   tableName = cls.__name__,    # テーブル名
            │                   columns   = cols[:-2] + " ", # <-WHEREの前に空白を入れる用
            │                   values    = tuple(values)    # タプルで渡す
            │               )
            │           #---------------------------------------------------------------------------
            │           # ALTER系
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableAddColumn(
            │                   cls,
            │                   **column : Column
            │               ) -> AsyncAlterTableAddColumn:
            │               """
            │               テーブルにカラムを追加する
            │               Args:
            │                   column (Column) : カラム
            │               Examples:
            │                   user = User.alterTableAddColumn(age = Column(Integer()))
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableAddColumn : カラム追加クラス
            │               """
            │               columnName   : str    # カラム名
            │               columnObject : Column # カラムオブジェクト
            │               # カラム
            │               for key, value in column.items():
            │                   columnName   = key
            │                   columnObject = value
            │               # 条件
            │               constraints = f"{columnObject.notNullSql} "\
            │                           + f"{columnObject.notNullSql} "\
            │                           + f"{columnObject.uniqueSql}"
            │               return AsyncAlterTableAddColumn(
            │                   tableName   = cls.__name__,             # テーブル名
            │                   column      = columnName,               # カラム名
            │                   dataType    = columnObject.dataTypeSql, # データ型
            │                   constraints = constraints               # 制約
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableDropColumn(
            │                   cls,
            │                   column : Column
            │               ) -> AsyncAlterTableDropColumn:
            │               """
            │               テーブルからカラムを削除する
            │               Args:
            │                   column (Column) : カラム
            │               Examples:
            │                   user = User.alterTableDropColumn(User.age)
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableDropColumn : カラム削除クラス
            │               """
            │               return AsyncAlterTableDropColumn(
            │                   tableName  = cls.__name__,     # テーブル名
            │                   columnName = column.columnName # カラム名
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableRenameColumn(
            │                   cls,
            │                   oldName : str,
            │                   newName : str
            │               ) -> AsyncAlterTableRenameColumn:
            │               """
            │               テーブルのカラム名を変更
            │               Args:
            │                   oldName (str) : 既存の名前
            │                   newName (str) : 新しい名前
            │               Examples:
            │                   user = User.alterTableRenameColumn("email", "address")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableRenameColumn : カラム名変更クラス
            │               """
            │               return AsyncAlterTableRenameColumn(
            │                   tableName = cls.__name__,
            │                   oldName   = oldName,
            │                   newName   = newName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableAddConstraint(cls,**constraints : Constraints): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableDropConstraint(cls): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterView(cls): ...
            │           #---------------------------------------------------------------------------
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def fromDict(cls, data : dict):
            │               instance = cls()
            │               for key, value in data.items():
            │                   if hasattr(isinstance, key):
            │                       setattr(instance, key, value)
            │               return instance
            │           #---------------------------------------------------------------------------
            │           #---------------------------------------------------------------------------
            │           def __and__(self, other):
            │               return f"{self} {other}"
            │       #-------------------------------------------------------------------------------
            │   ├── Model.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .ModelMeta    import ModelMeta
            │       from ..column      import Column
            │       from ..common      import private
            │       from ..common      import public
            │       from ..constraints import Constraints
            │       from ..manager     import Base
            │       from ..manager     import AlterTableAddColumn
            │       from ..manager     import AlterTableAddConstraint
            │       from ..manager     import AlterTableDropColumn
            │       from ..manager     import AlterTableDropConstraint
            │       from ..manager     import AlterTableRenameColumn
            │       from ..manager     import CreateIndex
            │       from ..manager     import CreateTable
            │       from ..manager     import CreateTableIfNotExists
            │       from ..manager     import CreateTrigger
            │       from ..manager     import CreateView
            │       from ..manager     import InsertRecord
            │       from ..manager     import InsertRecords
            │       from ..manager     import Select
            │       from ..manager     import UpdateRecord
            │       from ..manager     import UpdateRecords
            │       from ..manager     import DeleteRecord
            │       from ..manager     import DropIndex
            │       from ..manager     import DropIndexIfExists
            │       from ..manager     import DropTable
            │       from ..manager     import DropTableIfExists
            │       from ..manager     import DropTrigger
            │       from ..manager     import DropTriggerIfNotExists
            │       from ..manager     import DropView
            │       from ..manager     import DropViewIfExists
            │       #-------------------------------------------------------------------------------
            │       class Model(metaclass = ModelMeta):
            │           """
            │           モデルクラスの基底クラス。
            │
            │           Attributes:
            │               tableName (str)                     : テーブル名（クラス名から自動取得）
            │               columns   (list[dict[str, Column]]) : カラム定義のリスト
            │           """
            │
            │           tableName : str                     # テーブル名
            │           columns   : list[dict[str, Column]] # カラム
            │           #---------------------------------------------------------------------------
            │           # プライベートメソッド
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __parameterColumnsToStrings(cls, columns :tuple[Column, ...]) -> str:
            │               cols = ""
            │               for col in columns:
            │                   cols += col.columnName + ", "
            │               return cols[:-2]
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __columnsToQuery(cls):
            │               """
            │               カラムをSQL文にする
            │               テーブル作成時に使用する
            │               """
            │               cls.__foreignKeyList = [] # 外部キー定義リスト
            │               columnDefineLists    = [] # 各カラム定義
            │               # 各カラム定義をリストに追加
            │               for cols in cls.columns:
            │                   columnSql = cls.__columnsToSql(cols)
            │                   columnDefineLists.append(columnSql)
            │               # 外部キーがある場合、末尾に追加
            │               for fk in cls.__foreignKeyList:
            │                   columnDefineLists.append(fk)
            │               return ", ".join(columnDefineLists)
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __columnsToSql(
            │                   cls,
            │                   columns : dict[str, Column]
            │               ) -> str:
            │               """
            │               カラムをSQL文にする
            │               columnsToQueryでのみ使用するプライベートメソッド
            │               Args:
            │                   columns (dict[str, Column]) : カラム
            │               Returns:
            │                   Create文で使用するSQL文を返す
            │               """
            │               columnName, columnObject = next(iter(columns.items()))
            │               parts = []
            │               parts.append(columnName)
            │               # データ型
            │               if columnObject.dataTypeSql:
            │                   parts.append(columnObject.dataTypeSql)
            │               # 主キー
            │               if columnObject.primaryKeySql:
            │                   parts.append(columnObject.primaryKeySql)
            │               # 自動採番
            │               if columnObject.autoIncrementSql:
            │                   parts.append((columnObject.autoIncrementSql))
            │               # デフォルト値
            │               if columnObject.defaultSql:
            │                   parts.append(columnObject.defaultSql)
            │               # ユニーク設定
            │               if columnObject.uniqueSql:
            │                   parts.append(columnObject.uniqueSql)
            │               # NotNull制約
            │               if columnObject.notNullSql:
            │                   parts.append(columnObject.notNullSql)
            │               # 外部キー制約
            │               # 定義ある場合は別途保管
            │               fk = cls.__foreignKeyToSql(columnName, columnObject)
            │               if fk:
            │                   cls.__foreignKeyList.append(fk)
            │               return " ".join(parts)
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @private
            │           def __foreignKeyToSql(
            │                   cls,
            │                   columnName : str,
            │                   columnObject : Column
            │               ) -> str:
            │               """
            │               外部キー制約の設定をSQL文として出力するプライベートメソッド
            │               Args:
            │                   columnName   (str) : カラム名
            │                   cokumnObject (str) : カラムオブジェクト
            │               Returns:
            │                   fk : SQL文
            │               """
            │               fk = columnObject.foreignKeySql
            │               # リプレイスする
            │               if fk: fk = fk.replace("~~~", columnName)
            │               else:  fk = ""
            │               return fk
            │           #---------------------------------------------------------------------------
            │           # パブリックメソッド
            │           #---------------------------------------------------------------------------
            │           # CREATE系
            │           @classmethod
            │           @public
            │           def createTable(cls) -> CreateTable:
            │               """
            │               テーブルを作成する
            │               Returns:
            │                   CreateTable : テーブル作成クラス
            │               """
            │               columns = cls.__columnsToQuery()
            │               return CreateTable(
            │                   tableName = cls.__name__, # テーブル名
            │                   columns   = columns       # テーブル作成用カラム
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def createTableIfNotExists(cls) -> CreateTableIfNotExists:
            │               """
            │               テーブルが存在しない場合に作成する
            │               Returns:
            │                   CreateTableIfNotExists : テーブル作成クラス
            │               """
            │               columns = cls.__columnsToQuery()
            │               return CreateTableIfNotExists(
            │                   tableName = cls.__name__, # テーブル名
            │                   columns   = columns       # テーブル作成用カラム
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def createIndex(
            │                   cls,
            │                   indexName : str,
            │                   *columns  : Column
            │               ) -> CreateIndex:
            │               """
            │               インデックスを作成する
            │               Args:
            │                   indexName (str)    : 作成するインデックス名
            │                   *columns  (Column) : 対象とするカラム
            │               Returns:
            │                   CreateIndex: インデックス作成処理オブジェクト
            │               Examples:
            │                   ↓ インスタンスの作成
            │                   user = User.createIndex("indexName", User.id, User.name)
            │                   ↓ 実行とコミット
            │                   user.execute()
            │                   user.commit()
            │               """
            │               # カラムを文字列に変更する
            │               cols = cls.__parameterColumnsToStrings(columns)
            │               return CreateIndex(
            │                   indexName = indexName,
            │                   tableName = cls.__name__,
            │                   columns   = cols
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def createView(cls): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def createTrigger(
            │                   cls,
            │                   triggerName : str,
            │                   timing      : str,
            │                   event       : str,
            │                   body        : Base
            │               ) -> CreateTrigger:
            │               """
            │               トリガーの作成
            │               Args:
            │                   triggerName (str) : トリガー名
            │                   timing      (str) : タイミング BEFORE AFTER
            │                   event       (str) : イベント  INSERT UPDATE DELETE
            │                   body        (str) : 実行するSQL文
            │               Examples:
            │                   trigger = User.createTrigger(
            │                       "tableName",
            │                       "triggerName",
            │                       "before | after",
            │                       "inser | update | delete",
            │                       User.InsertRecord(~~~)      <-実行したいものを入れる
            │                   )
            │                   trigger.execute()
            │                   trigger.commit()
            │               """
            │               return CreateTrigger(
            │                   tableName   = cls.__name__, # テーブル名
            │                   triggerName = triggerName,  # トリガー名
            │                   timing      = timing,       # イベントタイミング
            │                   event       = event,        # イベント
            │                   body        = body.query    # 実行するSQL
            │               )
            │           #---------------------------------------------------------------------------
            │           # DROP系
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropTable(cls) -> DropTable:
            │               """
            │               テーブルを削除する
            │               Example:
            │                   user = User.dropTable()
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTable : テーブル削除クラス
            │               """
            │               return DropTable(
            │                   tableName = cls.__name__
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropTableIfExists(cls) -> DropTableIfExists:
            │               """
            │               テーブルが存在する場合のみ削除する
            │               Example:
            │                   user = User.dropTableIfExists()
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTableIfExists : テーブル削除クラス
            │               """
            │               return DropTableIfExists(
            │                   tableName = cls.__name__
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropView(cls, viewName : str) -> DropView:
            │               """
            │               ビューの削除
            │               Args:
            │                   viewName (str) : 削除するビュー名
            │               Example:
            │                   user = User.dropView("view")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropView : ビュー削除クラス
            │               """
            │               return DropView(
            │                   tableName = cls.__name__,
            │                   viewName  = viewName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropViewIfExist(cls, viewName : str) -> DropViewIfExists:
            │               """
            │               ビューが存在する場合削除する
            │               Args:
            │                   viewName (str) : 削除するビュー名
            │               Example:
            │                   user = User.dropView("view")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropViewIfExists : ビュー削除クラス
            │               """
            │               return DropViewIfExists(
            │                   tableName = cls.__name__,
            │                   viewName  = viewName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropIndex(cls, indexName : str) -> DropIndex:
            │               """
            │               インデックス削除
            │               Args:
            │                   indexName (str) : インデックス名
            │               Example:
            │                   user = User.dropIndex("index")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropIndex : インデックス削除クラス
            │               """
            │               return DropIndex(
            │                   tableName = cls.__name__,
            │                   indexName = indexName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropIndexIfNotExists(cls, indexName : str) -> DropIndexIfExists:
            │               """
            │               インデックス削除
            │               Args:
            │                   indexName (str) : インデックス名
            │               Example:
            │                   user = User.dropIndexIfExists("index")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropIndexIfExists : インデックス削除クラス
            │               """
            │               return DropIndexIfExists(
            │                   tableName = cls.__name__,
            │                   indexName = indexName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropTrigger(cls, triggerName : str) -> DropTrigger:
            │               """
            │               トリガーの削除
            │               Args:
            │                   triggerName (str) : トリガー名
            │               Examples:
            │                   user = User.dropTrigger("trigger")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTrigger : トリガー削除オブジェクト
            │               """
            │               return DropTrigger(
            │                   tableName   = cls.__name__,
            │                   triggerName = triggerName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def dropTriggerIfNotExists(
            │                   cls,
            │                   triggerName : str
            │               ) -> DropTriggerIfNotExists:
            │               """
            │               トリガーの削除
            │               Args:
            │                   triggerName (str) : トリガー名
            │               Examples:
            │                   user = User.dropTriggerIfNotExists("trigger")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DropTriggerIfNotExists : トリガー削除オブジェクト
            │               """
            │               return DropTriggerIfNotExists(
            │                   tableName   = cls.__name__,
            │                   triggerName = triggerName
            │               )
            │           #---------------------------------------------------------------------------
            │           # INSERT/UPDATE/DELETE
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def insertRecord(cls, **columns) -> InsertRecord:
            │               """
            │               レコードを挿入
            │               Args:
            │                   **columns : 例: id = 1, name = "name", age = 19...
            │               Examples:
            │                   user = User.insertRecord(id = 1, name = "name", age = 19)
            │                   user.execute()
            │                   user.commit()
            │
            │                   Userテーブルにidが1, nameが"name", ageが19が挿入される
            │               Returns:
            │                   InsertRecord : レコード挿入クラスを返す
            │               """
            │               cols         = "" # カラム
            │               placeHolders = "" # プレイスホルダー
            │               values       = [] # 値
            │               # id = 1, name = "name", age = 19...の形に成形
            │               # 値をストックに格納
            │               # カラム数に応じて, プレイスホルダー数を決定
            │               for key, value in columns.items():
            │                   cols         += f"{key}, "
            │                   placeHolders += "?, "
            │                   values.append(value)
            │               return InsertRecord(
            │                   tableName    = cls.__name__,     # テーブル名
            │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
            │                   values       = tuple(values),    # 値はタプルで渡す
            │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
            │               )
            │
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def insertRecords(cls, **columns) -> InsertRecords:
            │               """
            │               レコードを複数挿入
            │               Args:
            │                   **columns : 例: id   = [1,   2,   3  ],
            │                                   name = ["a", "b", "c"],
            │                                   age  = [19,  22,  17 ]
            │               Examples:
            │                   user = User.insertRecord(
            │                       id = [1, 2, 3], name = ["a", "b", "c"], age = [19, 22, 17]
            │                   )
            │                   user.execute()
            │                   user.commit()
            │
            │                   ↓Userテーブルに
            │                   |id|name|user|
            │                   |1 |a   |19  |
            │                   |2 |b   |22  |
            │                   |3 |c   |17  | と複数レコードが挿入される
            │               Returns:
            │                   InsertRecord : レコード複数挿入クラスを返す
            │               """
            │               cols         = "" # カラム
            │               placeHolders = "" # プレイスホルダー
            │               for key, values in columns.items(): # valuesは使わない
            │                   cols         += f"{key}, "
            │                   placeHolders += "?, "
            │               return InsertRecords(
            │                   tableName    = cls.__name__,     # テーブル名
            │                   columns      = cols[:-2],        # id,name, ...の形で渡す, 末尾を削除
            │                   data         = list(
            │                       zip(*columns.values())       # 値はリストで渡す
            │                   ),
            │                   placeHolders = placeHolders[:-2] # プレイスホルダー, 末尾を削除
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def updateRecord(cls, **updateColumns) -> UpdateRecord:
            │               """
            │               レコードを更新
            │               Args:
            │                   **updateColumns : 更新したいカラムを指定する
            │               Examples:
            │                   user = User.updateRecord(name = "a", age = 20)
            │                   user.where(id = 1)
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   UpdateRecord : レコード更新クラスを返す
            │               """
            │               cols   = "" # カラム
            │               values = [] # 値(リスト型)
            │               # id = ?, name = ?, age = ? の形に成型
            │               for key, value in updateColumns.items():
            │                   cols += f"{key} = ?, "
            │                   values.append(value)
            │               return UpdateRecord(
            │                   tableName    = cls.__name__,    # テーブル名
            │                   columns      = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
            │                   values       = tuple(values),   # タプルで渡す
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def updateRecords(cls, **updateColumns) -> UpdateRecords:
            │               """
            │               レコードを更新
            │               Args:
            │                   **updateColumns : 更新したいカラムを指定する
            │               Examples:
            │                   user = User.updateRecords(
            │                       name = ["a","b","c"], age = [20,22,24]
            │                   ).where(id = [1,2,3]) ※whereも忘れずに
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   UpdateRecords : 複数レコード更新クラスを返す
            │               """
            │               cols = "" # カラム
            │               for key, value in updateColumns.items(): # valueは使わない
            │                   cols += f"{key} = ?, "
            │               return UpdateRecords(
            │                   tableName = cls.__name__,    # テーブル名
            │                   columns   = cols[:-2] + " ", # ←WHEREの前に空白を入れる用
            │                   data      = list(zip(*updateColumns.values()))
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def deleteRecord(cls, **deleteColumns) -> DeleteRecord:
            │               """
            │               レコードを削除
            │               Args:
            │                   **deleteColumns : 削除したいカラムを指定する
            │               Examples:
            │                   user = User.deleteRecord(id = 1) ※複数指定不可
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   DeleteRecord : レコード削除クラスを返す
            │               """
            │               cols    = "" # カラム
            │               values = [] # 値(リスト型)
            │               # id = ? の形に成型
            │               for key, value in deleteColumns.items():
            │                   cols += f"{key} = ?, "
            │                   values.append(value)
            │               return DeleteRecord(
            │                   tableName = cls.__name__,    # テーブル名
            │                   columns   = cols[:-2] + " ", # <-WHEREの前に空白を入れる用
            │                   values    = tuple(values)    # タプルで渡す
            │               )
            │           #---------------------------------------------------------------------------
            │           # ALTER系
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableAddColumn(cls, **column : Column) -> AlterTableAddColumn:
            │               """
            │               テーブルにカラムを追加する
            │               Args:
            │                   column (Column) : カラム
            │               Examples:
            │                   user = User.alterTableAddColumn(age = Column(Integer()))
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableAddColumn : カラム追加クラス
            │               """
            │               columnName   : str    # カラム名
            │               columnObject : Column # カラムオブジェクト
            │               # カラム
            │               for key, value in column.items():
            │                   columnName   = key
            │                   columnObject = value
            │               # 条件
            │               constraints = f"{columnObject.notNullSql} "\
            │                           + f"{columnObject.notNullSql} "\
            │                           + f"{columnObject.uniqueSql}"
            │               return AlterTableAddColumn(
            │                   tableName   = cls.__name__,             # テーブル名
            │                   column      = columnName,               # カラム名
            │                   dataType    = columnObject.dataTypeSql, # データ型
            │                   constraints = constraints               # 制約
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableDropColumn(
            │                   cls,
            │                   column : Column
            │               ):
            │               """
            │               テーブルからカラムを削除する
            │               Args:
            │                   column (Column) : カラム
            │               Examples:
            │                   user = User.alterTableDropColumn(User.age)
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableDropColumn : カラム削除クラス
            │               """
            │               return AlterTableDropColumn(
            │                   tableName  = cls.__name__,     # テーブル名
            │                   columnName = column.columnName # カラム名
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableRenameColumn(
            │                   cls,
            │                   oldName : str,
            │                   newName : str
            │               ) -> AlterTableRenameColumn:
            │               """
            │               テーブルのカラム名を変更
            │               Args:
            │                   oldName (str) : 既存の名前
            │                   newName (str) : 新しい名前
            │               Examples:
            │                   user = User.alterTableRenameColumn("email", "address")
            │                   user.execute()
            │                   user.commit()
            │               Returns:
            │                   AlterTableRenameColumn : カラム名変更クラス
            │               """
            │               return AlterTableRenameColumn(
            │                   tableName = cls.__name__,
            │                   oldName   = oldName,
            │                   newName   = newName
            │               )
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableAddConstraint(cls,**constraints : Constraints): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterTableDropConstraint(cls): ...
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def alterView(cls): ...
            │           #---------------------------------------------------------------------------
            │           #---------------------------------------------------------------------------
            │           @classmethod
            │           @public
            │           def fromDict(cls, data : dict):
            │               instance = cls()
            │               for key, value in data.items():
            │                   if hasattr(isinstance, key):
            │                       setattr(instance, key, value)
            │               return instance
            │           #---------------------------------------------------------------------------
            │           #---------------------------------------------------------------------------
            │           def __and__(self, other):
            │               return f"{self} {other}"
            │       #-------------------------------------------------------------------------------
            │   ├── ModelMeta.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from ..column import Column # カラムクラス
            │       from ..filed  import Filed  # カラムクラス(フィールド)
            │       #-------------------------------------------------------------------------------
            │       class ModelMeta(type):
            │           """
            │           モデルクラスのメタクラス。
            │           Columnインスタンスを自動的に検出し、各カラムに `columnName`（変数名）と
            │           `tableName`（クラス名）を設定する。
            │           また、テーブル名とカラム一覧をクラス属性として持たせる。
            │           このメタクラスは、ORMのModel定義時に使用され、クラス定義時に
            │           自動的にカラム定義を収集・構造化する役割を持つ。
            │           主な機能:
            │           - `Model` クラス自体は対象外（カラムを要求しない）
            │           - クラス定義時に Column 型の属性を検出し、名前とテーブル名を自動的に設定
            │           - クラス属性 `tableName`, `columns` を付与
            │           Attributes (動的に付加):
            │               tableName : str
            │                   テーブル名（＝クラス名）
            │               columns : list[dict[str, Column]]
            │                   カラム名とColumnオブジェクトの辞書リスト形式
            │           Exception:
            │               Columnが1つも定義されていない場合に例外を発生させる。
            │           Examples:
            │               class User(Model, metaclass=ModelMeta):
            │                   id   = Column(Integer(), isPrimaryKey=True)
            │                   name = Column(Text())
            │
            │               → 自動的に:
            │                   User.tableName = "User"
            │                   User.columns = [{"id": Column(...)}, {"name": Column(...)}]
            │           """
            │           def __new__(mcs, name, bases, namespace):
            │               # Model自体にはカラムを要求しない
            │               if name == "Model":
            │                   return super().__new__(mcs, name, bases, namespace)
            │               # カラムを自動登録
            │               columns = []
            │               for key, value in namespace.items():
            │                   #カラムクラスかフィールドクラス
            │                   if isinstance(value, Column) or isinstance(value, Filed):
            │                       value.columnName = key       # カラム名に属性名を設定
            │                       value.tableName  = name      # テーブル名にクラス名を設定
            │                       columns.append({key: value}) # 辞書形式で保存
            │               # カラムが1つもない場合は例外
            │               if not columns:
            │                   raise Exception(f"[{name}] クラスにカラムが定義されていません。")
            │               # テーブル名とカラムリストをクラス属性として付加
            │               namespace['tableName'] = name
            │               namespace['columns']   = columns
            │               return super().__new__(mcs, name, bases, namespace)
            │       #-------------------------------------------------------------------------------
            │   └── __init__.py
            │       ↓ 内容（最大10000行）
            │       #-------------------------------------------------------------------------------
            │       from .Model import Model
            │       #-------------------------------------------------------------------------------
            │       __all__ = [
            │           "Model"
            │       ]
            │       #-------------------------------------------------------------------------------
            ├── __init__.py
                ↓ 内容（最大10000行）
                #-------------------------------------------------------------------------------
                # 集計関数（Aggregate Functions）
                from .aggregate import Avg       # 平均
                from .aggregate import Count     # カウント
                from .aggregate import Max       # 最大
                from .aggregate import Min       # 最小
                from .aggregate import Sum       # 合計
                #-------------------------------------------------------------------------------
                # 制約（Constraints）
                from .constraints import Default      # デフォルト制約
                from .constraints import NotNull      # NULL不可制約
                from .constraints import Unique       # 一意制約
                from .constraints import ForeignKey   # 外部キー制約
                #-------------------------------------------------------------------------------
                # CSV
                from .csv import CSV
                #-------------------------------------------------------------------------------
                # 条件式（Conditions for WHERE）
                from .conditions import Condition
                from .conditions import Regexp
                #-------------------------------------------------------------------------------
